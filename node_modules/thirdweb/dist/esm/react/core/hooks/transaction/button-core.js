import { useState } from "react";
import { waitForReceipt, } from "../../../../transaction/actions/wait-for-tx-receipt.js";
import { stringify } from "../../../../utils/json.js";
import { useSendTransaction, } from "../../../web/hooks/useSendTransaction.js";
import { useActiveAccount } from "../wallets/wallet-hooks.js";
export function useTransactionButtonCore(props) {
    const { transaction, onTransactionSent, onTransactionConfirmed, onError, onClick, gasless, payModal, } = props;
    const account = useActiveAccount();
    const [isPending, setIsPending] = useState(false);
    const sendTransaction = useSendTransaction({
        gasless,
        payModal,
    });
    const handleClick = async () => {
        if (onClick) {
            onClick();
        }
        try {
            setIsPending(true);
            const resolvedTx = await transaction();
            const result = await sendTransaction.mutateAsync(resolvedTx);
            if (onTransactionSent) {
                onTransactionSent(result);
            }
            if (onTransactionConfirmed) {
                const receipt = await waitForReceipt(result);
                if (receipt.status === "reverted") {
                    throw new Error(`Execution reverted: ${stringify(receipt, null, 2)}`);
                }
                onTransactionConfirmed(receipt);
            }
        }
        catch (error) {
            if (onError) {
                onError(error);
            }
        }
        finally {
            setIsPending(false);
        }
    };
    return {
        account,
        handleClick,
        isPending,
    };
}
//# sourceMappingURL=button-core.js.map