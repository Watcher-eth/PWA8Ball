"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_native_1 = require("react-native");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const button_core_js_1 = require("../../../core/hooks/transaction/button-core.js");
const button_js_1 = require("../components/button.js");
const spinner_js_1 = require("../components/spinner.js");
/**
 * TransactionButton component is used to render a button that triggers a transaction.
 * - It shows a "Switch Network" button if the connected wallet is on a different chain than the transaction.
 * @param props - The props for this component.
 * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.
 * @example
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onTransactionConfirmed={handleSuccess}
 *   onError={handleError}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 * @component
 */
function TransactionButton(props) {
    const { children, transaction, onTransactionSent, onTransactionConfirmed, onError, onClick, gasless, payModal, disabled, unstyled, ...buttonProps } = props;
    const { account, handleClick, isPending } = (0, button_core_js_1.useTransactionButtonCore)(props);
    const theme = (0, CustomThemeProvider_js_1.parseTheme)(buttonProps.theme);
    return ((0, jsx_runtime_1.jsxs)(button_js_1.ThemedButton, { disabled: !account || disabled || isPending, variant: "primary", onPress: handleClick, style: buttonProps.style, theme: theme, children: [(0, jsx_runtime_1.jsx)(react_native_1.View, { style: { opacity: isPending ? 0 : 1 }, children: children }), isPending && ((0, jsx_runtime_1.jsx)(react_native_1.View, { style: {
                    position: "absolute",
                    flex: 1,
                    justifyContent: "center",
                    alignItems: "center",
                    top: 0,
                    bottom: 0,
                    margin: "auto",
                }, children: (0, jsx_runtime_1.jsx)(spinner_js_1.ThemedSpinner, { color: theme.colors.primaryButtonText }) }))] }));
}
exports.TransactionButton = TransactionButton;
//# sourceMappingURL=TrabsactionButton.js.map