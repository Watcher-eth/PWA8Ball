'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Apollo = require('@apollo/client');
var generated = require('./generated-2076dc4c.cjs.dev.js');
var context = require('@apollo/client/link/context');
var utilities = require('@apollo/client/utilities');
var sharedKernel = require('@lens-protocol/shared-kernel');
var entities = require('@lens-protocol/domain/entities');
var publications = require('@lens-protocol/domain/use-cases/publications');
var profile = require('@lens-protocol/domain/use-cases/profile');

function semVer(value) {
  // for now just asserts the type, in future it will enforce a format
  return value;
}

var LENS_API_MINIMAL_SUPPORTED_VERSION = semVer('2.0.0');

function chainType(chainId) {
  switch (chainId) {
    case 1:
    case 5:
      return sharedKernel.ChainType.ETHEREUM;
    case 137:
    case 80001:
      return sharedKernel.ChainType.POLYGON;
    default:
      throw new Error("Not supported chainId: ".concat(chainId));
  }
}
function erc20Amount(_ref) {
  var from = _ref.from;
  var asset = from.asset,
    value = from.value;
  var erc20Asset = sharedKernel.erc20({
    name: asset.name,
    decimals: asset.decimals,
    symbol: asset.symbol,
    address: asset.contract.address,
    chainType: chainType(asset.contract.chainId)
  });
  return sharedKernel.Amount.erc20(erc20Asset, value);
}

var validationRegex = /^[a-z](?:[a-z0-9_]{4,25})$/;

/**
 * @group Helpers
 */
function isValidHandle(handle) {
  return validationRegex.test(handle);
}

function omitTypename(target) {
  return sharedKernel.omitDeep(target, '__typename');
}

var ModulesWithKnownCollectCapability = {
  LegacyAaveFeeCollectModuleSettings: true,
  LegacyERC4626FeeCollectModuleSettings: true,
  LegacyFeeCollectModuleSettings: true,
  LegacyLimitedFeeCollectModuleSettings: true,
  LegacyLimitedTimedFeeCollectModuleSettings: true,
  LegacyMultirecipientFeeCollectModuleSettings: true,
  LegacyTimedFeeCollectModuleSettings: true,
  LegacySimpleCollectModuleSettings: true,
  LegacyFreeCollectModuleSettings: true,
  MultirecipientFeeCollectOpenActionSettings: true,
  SimpleCollectOpenActionSettings: true,
  LegacyRevertCollectModuleSettings: false,
  UnknownOpenActionModuleSettings: false
};
function isKnownCollectModuleSettings(settings) {
  var _ModulesWithKnownColl;
  return (_ModulesWithKnownColl = ModulesWithKnownCollectCapability[settings.__typename]) !== null && _ModulesWithKnownColl !== void 0 ? _ModulesWithKnownColl : false;
}
function findCollectActionModuleSettings(collectable) {
  var _collectable$openActi;
  if (!collectable.openActionModules) return null;
  return (_collectable$openActi = collectable.openActionModules.find(isKnownCollectModuleSettings)) !== null && _collectable$openActi !== void 0 ? _collectable$openActi : null;
}

/* eslint-disable no-case-declarations */

/**
 * The category of Open Actions to perform on a given publication.
 */
var OpenActionKind = /*#__PURE__*/function (OpenActionKind) {
  OpenActionKind["COLLECT"] = "COLLECT";
  OpenActionKind["UNKNOWN"] = "UNKNOWN";
  return OpenActionKind;
}({});

/**
 * Execute the specified Unknown Open Action.
 */

/**
 * Execute the Collect Open Action defined by the publication.
 */

/**
 * The Open Action to perform.
 */

function resolveCollectRequestFor(publication, context) {
  var _context$action$refer, _context$action$refer2;
  var collectable = publication.__typename === 'Mirror' ? publication.mirrorOn : publication;
  var settings = findCollectActionModuleSettings(collectable);
  sharedKernel.invariant(settings, 'No open action module settings found for publication');
  switch (settings.__typename) {
    case 'LegacyAaveFeeCollectModuleSettings':
    case 'LegacyERC4626FeeCollectModuleSettings':
    case 'LegacyFeeCollectModuleSettings':
    case 'LegacyLimitedFeeCollectModuleSettings':
    case 'LegacyLimitedTimedFeeCollectModuleSettings':
    case 'LegacyMultirecipientFeeCollectModuleSettings':
    case 'LegacyTimedFeeCollectModuleSettings':
    case 'LegacySimpleCollectModuleSettings':
      sharedKernel.invariant(context["public"] === false, 'Legacy collect cannot be collected with just a wallet');
      return {
        kind: entities.TransactionKind.ACT_ON_PUBLICATION,
        type: publications.AllOpenActionType.LEGACY_COLLECT,
        publicationId: collectable.id,
        referrer: publication !== collectable ? publication.id : undefined,
        fee: {
          amount: erc20Amount({
            from: settings.amount
          }),
          contractAddress: settings.contract.address
        },
        "public": false,
        signless: context.signless,
        sponsored: context.sponsored
      };
    case 'LegacyFreeCollectModuleSettings':
      sharedKernel.invariant(context["public"] === false, 'Legacy collect cannot be collected with just a wallet');
      return {
        kind: entities.TransactionKind.ACT_ON_PUBLICATION,
        type: publications.AllOpenActionType.LEGACY_COLLECT,
        publicationId: collectable.id,
        referrer: publication !== collectable ? publication.id : undefined,
        "public": false,
        signless: context.signless,
        sponsored: context.sponsored
      };
    case 'SimpleCollectOpenActionSettings':
      var amount = erc20Amount({
        from: settings.amount
      });
      return {
        kind: entities.TransactionKind.ACT_ON_PUBLICATION,
        type: publications.AllOpenActionType.SIMPLE_COLLECT,
        publicationId: collectable.id,
        referrers: (_context$action$refer = context.action.referrers) !== null && _context$action$refer !== void 0 ? _context$action$refer : publication !== collectable ? [publication.id] : undefined,
        fee: amount.isZero() ? undefined : {
          amount: amount,
          contractAddress: settings.contract.address
        },
        signless: context.signless,
        "public": context["public"],
        sponsored: context.sponsored
      };
    case 'MultirecipientFeeCollectOpenActionSettings':
      return {
        kind: entities.TransactionKind.ACT_ON_PUBLICATION,
        type: publications.AllOpenActionType.MULTIRECIPIENT_COLLECT,
        publicationId: collectable.id,
        referrers: (_context$action$refer2 = context.action.referrers) !== null && _context$action$refer2 !== void 0 ? _context$action$refer2 : publication !== collectable ? [publication.id] : undefined,
        fee: {
          amount: erc20Amount({
            from: settings.amount
          }),
          contractAddress: settings.contract.address
        },
        "public": context["public"],
        signless: context.signless,
        sponsored: context.sponsored
      };
    default:
      sharedKernel.never("The publication ".concat(collectable.id, " is not collectable"));
  }
}
function isUnknownOpenActionModuleSettings(settings) {
  return settings.__typename === 'UnknownOpenActionModuleSettings';
}
function resolveUnknownRequestFor(publication, context) {
  var _target$openActionMod, _target$openActionMod2;
  var target = publication.__typename === 'Mirror' ? publication.mirrorOn : publication;
  var settings = (_target$openActionMod = (_target$openActionMod2 = target.openActionModules) === null || _target$openActionMod2 === void 0 ? void 0 : _target$openActionMod2.find(function (entry) {
    return isUnknownOpenActionModuleSettings(entry) && entry.contract.address === context.action.address;
  })) !== null && _target$openActionMod !== void 0 ? _target$openActionMod : sharedKernel.never("Cannot find Open Action settings ".concat(context.action.address, " fro publication ").concat(target.id));
  return {
    kind: entities.TransactionKind.ACT_ON_PUBLICATION,
    type: publications.AllOpenActionType.UNKNOWN_OPEN_ACTION,
    publicationId: target.id,
    address: settings.contract.address,
    data: context.action.data,
    "public": context["public"],
    signless: context.signless,
    sponsored: context.sponsored
  };
}
function resolveOpenActionRequestFor(publication, context) {
  switch (context.action.kind) {
    case OpenActionKind.COLLECT:
      return resolveCollectRequestFor(publication, context);
    case OpenActionKind.UNKNOWN:
      return resolveUnknownRequestFor(publication, context);
  }
}

var publicationIdRegExp = /^0x[a-f0-9]{2,}-0x[a-f0-9]{2,}/i;

/**
 * @group Helpers
 */
function isPublicationId(value) {
  return publicationIdRegExp.test(value);
}

/**
 * @group Helpers
 */
function isPostPublication(publication) {
  return publication.__typename === 'Post';
}

/**
 * @group Helpers
 */
function isCommentPublication(publication) {
  return publication.__typename === 'Comment';
}

/**
 * @group Helpers
 */
function isMirrorPublication(publication) {
  return publication.__typename === 'Mirror';
}

/**
 * @group Helpers
 */
function isQuotePublication(publication) {
  return publication.__typename === 'Quote';
}

/**
 * @group Helpers
 */
function isPrimaryPublication(publication) {
  return isCommentPublication(publication) || isPostPublication(publication) || isQuotePublication(publication);
}

function resolveTokenAllowanceRequestForCollect(publication, limit) {
  var module = findCollectActionModuleSettings(publication);
  sharedKernel.invariant(module, "Publication ".concat(publication.id, " has no collect module"));
  switch (module.__typename) {
    case 'LegacyAaveFeeCollectModuleSettings':
    case 'LegacyERC4626FeeCollectModuleSettings':
    case 'LegacyFeeCollectModuleSettings':
    case 'LegacyLimitedFeeCollectModuleSettings':
    case 'LegacyLimitedTimedFeeCollectModuleSettings':
    case 'LegacyMultirecipientFeeCollectModuleSettings':
    case 'LegacySimpleCollectModuleSettings':
    case 'LegacyTimedFeeCollectModuleSettings':
    case 'MultirecipientFeeCollectOpenActionSettings':
    case 'SimpleCollectOpenActionSettings':
      return {
        kind: entities.TransactionKind.APPROVE_MODULE,
        amount: erc20Amount({
          from: module.amount
        }),
        limit: limit,
        spender: module.contract.address
      };
    default:
      sharedKernel.never("Unsupported collect module type ".concat(module.__typename));
  }
}
function resolveTokenAllowanceRequestForFollow(profile, limit) {
  sharedKernel.invariant(profile.followModule, "Profile ".concat(profile.id, " has no follow module"));
  switch (profile.followModule.__typename) {
    case 'FeeFollowModuleSettings':
      return {
        kind: entities.TransactionKind.APPROVE_MODULE,
        amount: erc20Amount({
          from: profile.followModule.amount
        }),
        limit: limit,
        spender: profile.followModule.contract.address
      };
    default:
      sharedKernel.never("Unsupported follow module type ".concat(profile.followModule.__typename));
  }
}
function resolveTokenAllowanceRequest(item, limit) {
  switch (item.__typename) {
    case 'Mirror':
      return resolveTokenAllowanceRequestForCollect(item.mirrorOn, limit);
    case 'Comment':
    case 'Post':
    case 'Quote':
      return resolveTokenAllowanceRequestForCollect(item, limit);
    case 'Profile':
      return resolveTokenAllowanceRequestForFollow(item, limit);
    default:
      sharedKernel.assertNever(item);
  }
}

/**
 * @deprecated not longer in use - removal slated for stable 2.x release
 */

/**
 * Resolve API {@link FollowModule} to more user friendly {@link FollowPolicy}.
 *
 * @param args - The {@link Profile} to resolve {@link FollowPolicy} from
 * @returns {@link FollowPolicy}
 */
function resolveFollowPolicy(_ref) {
  var followModule = _ref.followModule;
  if (followModule === null) {
    return {
      type: profile.FollowPolicyType.ANYONE
    };
  }
  switch (followModule.__typename) {
    case 'FeeFollowModuleSettings':
      return {
        type: profile.FollowPolicyType.CHARGE,
        amount: erc20Amount({
          from: followModule.amount
        }),
        recipient: followModule.recipient,
        contractAddress: followModule.contract.address,
        chainId: followModule.contract.chainId
      };
    case 'RevertFollowModuleSettings':
      return {
        type: profile.FollowPolicyType.NO_ONE,
        contractAddress: followModule.contract.address,
        chainId: followModule.contract.chainId
      };
    case 'UnknownFollowModuleSettings':
      return {
        type: profile.FollowPolicyType.UNKNOWN,
        contractAddress: followModule.contract.address,
        chainId: followModule.contract.chainId
      };
  }
}

/**
 * @internal
 */
var ContentInsightType = /*#__PURE__*/function (ContentInsightType) {
  ContentInsightType["SNAPSHOT_POLL"] = "SNAPSHOT_POLL";
  ContentInsightType["UNDETERMINED"] = "UNDETERMINED";
  return ContentInsightType;
}({});

/**
 * Opaque data structure representing a Snapshot poll details.
 */

/**
 * Opaque data structure representing
 */

/**
 * Opaque data structure representing insights on the publication metadata textual content
 */

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = generated._unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var RequestsQueue = /*#__PURE__*/function () {
  function RequestsQueue() {
    generated._classCallCheck(this, RequestsQueue);
    generated._defineProperty(this, "requests", new Map());
  }
  generated._createClass(RequestsQueue, [{
    key: "enqueue",
    value: function enqueue(request) {
      this.requests.set(request.operation, request);
    }
  }, {
    key: "dequeue",
    value: function dequeue(operation) {
      this.requests["delete"](operation);
    }
  }, {
    key: "consume",
    value: function consume() {
      var _iterator = _createForOfIteratorHelper(this.requests.values()),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var request = _step.value;
          request.forward(request.operation).subscribe(request.observer);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
  return RequestsQueue;
}();
var RefreshTokensLink = /*#__PURE__*/function (_ApolloLink) {
  generated._inherits(RefreshTokensLink, _ApolloLink);
  var _super = generated._createSuper(RefreshTokensLink);
  function RefreshTokensLink(accessTokenStorage) {
    var _this;
    generated._classCallCheck(this, RefreshTokensLink);
    _this = _super.call(this);
    generated._defineProperty(generated._assertThisInitialized(_this), "refreshing", false);
    generated._defineProperty(generated._assertThisInitialized(_this), "queue", new RequestsQueue());
    _this.accessTokenStorage = accessTokenStorage;
    return _this;
  }
  generated._createClass(RefreshTokensLink, [{
    key: "request",
    value: function request(operation, forward) {
      var _this2 = this;
      sharedKernel.invariant(forward, "".concat(RefreshTokensLink.name, " is a non-terminating link and should not be the last in the composed chain"));
      return new utilities.Observable(function (observer) {
        // this if is extremely difficult to test with standard Apollo Client mocks
        if (_this2.refreshing) {
          _this2.queue.enqueue({
            operation: operation,
            forward: forward,
            observer: observer
          });
          return function () {
            _this2.queue.dequeue(operation);
          };
        }
        var subscription = forward(operation).subscribe({
          next: function () {
            var _next = generated._asyncToGenerator( /*#__PURE__*/generated._regeneratorRuntime().mark(function _callee(result) {
              var refresh;
              return generated._regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    if (!_this2.refreshing) {
                      _context.next = 3;
                      break;
                    }
                    _this2.queue.enqueue({
                      operation: operation,
                      forward: forward,
                      observer: observer
                    });
                    return _context.abrupt("return");
                  case 3:
                    if (!generated.graphQLResultHasUnauthenticatedError(result)) {
                      _context.next = 13;
                      break;
                    }
                    if (_this2.refreshing) {
                      _context.next = 12;
                      break;
                    }
                    _this2.refreshing = true;
                    _context.next = 8;
                    return _this2.accessTokenStorage.refreshToken();
                  case 8:
                    refresh = _context.sent;
                    _this2.refreshing = false;
                    if (refresh.isFailure()) {
                      observer.next(result);
                    } else {
                      forward(operation).subscribe(observer);
                    }
                    _this2.queue.consume();
                  case 12:
                    return _context.abrupt("return");
                  case 13:
                    observer.next(result);
                  case 14:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            function next(_x) {
              return _next.apply(this, arguments);
            }
            return next;
          }(),
          error: function error(_error) {
            observer.error(_error);
          },
          complete: function complete() {
            // if refreshing, do not close the observer
            if (_this2.refreshing) {
              return;
            }
            observer.complete();
          }
        });
        return function () {
          subscription.unsubscribe();
        };
      });
    }
  }]);
  return RefreshTokensLink;
}(Apollo.ApolloLink);
function createAuthLink(accessTokenStorage) {
  var tokenRefreshLink = new RefreshTokensLink(accessTokenStorage);
  var authHeaderLink = context.setContext(function (_, prevContext) {
    var token = accessTokenStorage.getAccessToken();
    if (token) {
      return generated._objectSpread2(generated._objectSpread2({}, prevContext), {}, {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        headers: generated._objectSpread2({
          authorization: "Bearer ".concat(token)
        }, 'headers' in prevContext && prevContext.headers)
      });
    }
    return prevContext;
  });
  return Apollo.from([tokenRefreshLink, authHeaderLink]);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || generated._unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

var backupFetch = utilities.maybe(function () {
  return fetch;
});
function wrapFetch(logger, supportedVersion, fetch) {
  return /*#__PURE__*/generated._asyncToGenerator( /*#__PURE__*/generated._regeneratorRuntime().mark(function _callee() {
    var response,
      apiVersion,
      _apiVersion$split,
      _apiVersion$split2,
      apiMajor,
      apiMinor,
      _supportedVersion$spl,
      _supportedVersion$spl2,
      clientMajor,
      clientMinor,
      _args = arguments;
    return generated._regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return fetch.apply(void 0, _args);
        case 2:
          response = _context.sent;
          if (!(response.status === 200)) {
            _context.next = 17;
            break;
          }
          apiVersion = response.headers.get('x-api-version');
          if (!apiVersion) {
            _context.next = 17;
            break;
          }
          if (!(apiVersion < supportedVersion)) {
            _context.next = 9;
            break;
          }
          logger.warn("The Lens API ".concat(apiVersion, " is outside of the Lens SDK support range ^").concat(supportedVersion));
          return _context.abrupt("return", response);
        case 9:
          _apiVersion$split = apiVersion.split('.'), _apiVersion$split2 = _slicedToArray(_apiVersion$split, 2), apiMajor = _apiVersion$split2[0], apiMinor = _apiVersion$split2[1];
          _supportedVersion$spl = supportedVersion.split('.'), _supportedVersion$spl2 = _slicedToArray(_supportedVersion$spl, 2), clientMajor = _supportedVersion$spl2[0], clientMinor = _supportedVersion$spl2[1];
          if (!(apiMajor && clientMajor && apiMajor > clientMajor)) {
            _context.next = 14;
            break;
          }
          logger.warn("The Lens API ".concat(apiVersion, " is NOT supported by the Lens SDK support range ^").concat(supportedVersion, ". Update your Lens SDK client to the latest version."));
          return _context.abrupt("return", response);
        case 14:
          if (!(apiMinor && clientMinor && apiMinor > clientMinor)) {
            _context.next = 17;
            break;
          }
          logger.info("The Lens API ".concat(apiVersion, " is ahead of the Lens SDK support range ^").concat(supportedVersion, ". Check for a new version of the Lens SDK client, if available."));
          return _context.abrupt("return", response);
        case 17:
          return _context.abrupt("return", response);
        case 18:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
}
function createLensLink(_ref2) {
  var _ref3, _ref4;
  var preferredFetch = _ref2.fetch,
    logger = _ref2.logger,
    supportedVersion = _ref2.supportedVersion,
    uri = _ref2.uri;
  // see https://github.com/apollographql/apollo-client/blob/4bf773f64b78f15419f07676f434fa33e058404e/src/link/http/createHttpLink.ts#L160-L165
  var currentFetch = (_ref3 = (_ref4 = preferredFetch !== null && preferredFetch !== void 0 ? preferredFetch : utilities.maybe(function () {
    return fetch;
  })) !== null && _ref4 !== void 0 ? _ref4 : backupFetch) !== null && _ref3 !== void 0 ? _ref3 : sharedKernel.never();
  return new Apollo.HttpLink({
    uri: uri,
    fetch: wrapFetch(logger, supportedVersion, currentFetch)
  });
}
function createSnapshotLink(_ref5) {
  var uri = _ref5.uri;
  return new Apollo.HttpLink({
    uri: uri
  });
}

var snapshotRegExp = /https:\/\/snapshot\.org\/#\/([^/]+)\/proposal\/(0x[a-fA-F0-9]+)/;
var snapshotDemoRegExp = /https:\/\/demo\.snapshot\.org\/#\/([^/]+)\/proposal\/(0x[a-fA-F0-9]+)/;
function snapshotUrlMatcher(pattern, url) {
  var _pattern$exec;
  var _ref = (_pattern$exec = pattern.exec(url)) !== null && _pattern$exec !== void 0 ? _pattern$exec : [],
    _ref2 = _slicedToArray(_ref, 3),
    spaceId = _ref2[1],
    proposalId = _ref2[2];
  if (spaceId && proposalId) {
    return {
      type: ContentInsightType.SNAPSHOT_POLL,
      spaceId: spaceId,
      proposalId: proposalId,
      url: url
    };
  }
  return null;
}
function snapshotPoll(url) {
  return snapshotUrlMatcher(snapshotRegExp, url);
}
function demoSnapshotPoll(url) {
  return snapshotUrlMatcher(snapshotDemoRegExp, url);
}

var sessionVar = Apollo.makeVar(null);
function getSessionData() {
  return sessionVar();
}
function useSessionDataVar() {
  return Apollo.useReactiveVar(sessionVar);
}
function resetSession() {
  sessionVar(null);
}
function updateSessionData(session) {
  sessionVar(session);
}

function createLensApolloClient(_ref) {
  var accessTokenStorage = _ref.accessTokenStorage,
    uri = _ref.uri,
    logger = _ref.logger,
    pollingInterval = _ref.pollingInterval,
    queryParams = _ref.queryParams;
  var authLink = createAuthLink(accessTokenStorage);
  var httpLink = createLensLink({
    uri: uri,
    logger: logger,
    supportedVersion: LENS_API_MINIMAL_SUPPORTED_VERSION
  });
  return new generated.SafeApolloClient({
    connectToDevTools: true,
    cache: generated.createLensCache(queryParams),
    link: Apollo.from([authLink, httpLink]),
    pollingInterval: pollingInterval,
    version: LENS_API_MINIMAL_SUPPORTED_VERSION
  });
}
function createAuthApolloClient(_ref2) {
  var uri = _ref2.uri,
    logger = _ref2.logger;
  return new generated.SafeApolloClient({
    cache: generated.createLensCache(),
    link: createLensLink({
      uri: uri,
      logger: logger,
      supportedVersion: LENS_API_MINIMAL_SUPPORTED_VERSION
    }),
    version: LENS_API_MINIMAL_SUPPORTED_VERSION
  });
}
function createSnapshotApolloClient(_ref3) {
  var uri = _ref3.uri;
  return new generated.SafeApolloClient({
    cache: generated.createSnapshotCache(),
    link: createSnapshotLink({
      uri: uri
    })
  });
}

/**
 * @experimental
 */
var SnapshotVotingSystem = /*#__PURE__*/function (SnapshotVotingSystem) {
  SnapshotVotingSystem["SINGLE_CHOICE"] = "single-choice";
  SnapshotVotingSystem["APPROVAL"] = "approval";
  SnapshotVotingSystem["QUADRATIC"] = "quadratic";
  SnapshotVotingSystem["RANKED_CHOICE"] = "ranked-choice";
  SnapshotVotingSystem["WEIGHTED"] = "weighted";
  SnapshotVotingSystem["BASIC"] = "basic";
  return SnapshotVotingSystem;
}({});

exports.ActOnOpenActionDocument = generated.ActOnOpenActionDocument;
exports.AddProfileInterestsDocument = generated.AddProfileInterestsDocument;
exports.AddPublicationBookmarkDocument = generated.AddPublicationBookmarkDocument;
exports.AddPublicationNotInterestedDocument = generated.AddPublicationNotInterestedDocument;
exports.AddReactionDocument = generated.AddReactionDocument;
exports.ApolloServerErrorCode = generated.ApolloServerErrorCode;
exports.ApprovedModuleAllowanceAmountDocument = generated.ApprovedModuleAllowanceAmountDocument;
exports.AuthAuthenticateDocument = generated.AuthAuthenticateDocument;
exports.AuthChallengeDocument = generated.AuthChallengeDocument;
exports.AuthRefreshDocument = generated.AuthRefreshDocument;
exports.AuthVerifyDocument = generated.AuthVerifyDocument;
exports.BlockDocument = generated.BlockDocument;
exports.BroadcastOnMomokaDocument = generated.BroadcastOnMomokaDocument;
exports.BroadcastOnchainDocument = generated.BroadcastOnchainDocument;
exports.ChangeProfileManagerActionType = generated.ChangeProfileManagerActionType;
exports.ClaimProfileStatusType = generated.ClaimProfileStatusType;
exports.ClaimProfileWithHandleDocument = generated.ClaimProfileWithHandleDocument;
exports.ClaimProfileWithHandleErrorReasonType = generated.ClaimProfileWithHandleErrorReasonType;
exports.ClaimableProfilesDocument = generated.ClaimableProfilesDocument;
exports.CollectOpenActionModuleType = generated.CollectOpenActionModuleType;
exports.CommentOnMomokaDocument = generated.CommentOnMomokaDocument;
exports.CommentOnchainDocument = generated.CommentOnchainDocument;
exports.CommentRankingFilterType = generated.CommentRankingFilterType;
exports.ComparisonOperatorConditionType = generated.ComparisonOperatorConditionType;
exports.CreateActOnOpenActionTypedDataDocument = generated.CreateActOnOpenActionTypedDataDocument;
exports.CreateBlockProfilesTypedDataDocument = generated.CreateBlockProfilesTypedDataDocument;
exports.CreateChangeProfileManagersTypedDataDocument = generated.CreateChangeProfileManagersTypedDataDocument;
exports.CreateFollowTypedDataDocument = generated.CreateFollowTypedDataDocument;
exports.CreateLegacyCollectTypedDataDocument = generated.CreateLegacyCollectTypedDataDocument;
exports.CreateLinkHandleToProfileTypedDataDocument = generated.CreateLinkHandleToProfileTypedDataDocument;
exports.CreateMomokaCommentTypedDataDocument = generated.CreateMomokaCommentTypedDataDocument;
exports.CreateMomokaMirrorTypedDataDocument = generated.CreateMomokaMirrorTypedDataDocument;
exports.CreateMomokaPostTypedDataDocument = generated.CreateMomokaPostTypedDataDocument;
exports.CreateMomokaQuoteTypedDataDocument = generated.CreateMomokaQuoteTypedDataDocument;
exports.CreateOnchainCommentTypedDataDocument = generated.CreateOnchainCommentTypedDataDocument;
exports.CreateOnchainMirrorTypedDataDocument = generated.CreateOnchainMirrorTypedDataDocument;
exports.CreateOnchainPostTypedDataDocument = generated.CreateOnchainPostTypedDataDocument;
exports.CreateOnchainQuoteTypedDataDocument = generated.CreateOnchainQuoteTypedDataDocument;
exports.CreateOnchainSetProfileMetadataTypedDataDocument = generated.CreateOnchainSetProfileMetadataTypedDataDocument;
exports.CreateProfileWithHandleErrorReasonType = generated.CreateProfileWithHandleErrorReasonType;
exports.CreateSetFollowModuleTypedDataDocument = generated.CreateSetFollowModuleTypedDataDocument;
exports.CreateUnblockProfilesTypedDataDocument = generated.CreateUnblockProfilesTypedDataDocument;
exports.CreateUnfollowTypedDataDocument = generated.CreateUnfollowTypedDataDocument;
exports.CreateUnlinkHandleFromProfileTypedDataDocument = generated.CreateUnlinkHandleFromProfileTypedDataDocument;
exports.CurrenciesDocument = generated.CurrenciesDocument;
exports.CustomFiltersType = generated.CustomFiltersType;
exports.DecryptFailReasonType = generated.DecryptFailReasonType;
exports.DismissRecommendedProfilesDocument = generated.DismissRecommendedProfilesDocument;
exports.ExploreProfilesDocument = generated.ExploreProfilesDocument;
exports.ExploreProfilesOrderByType = generated.ExploreProfilesOrderByType;
exports.ExplorePublicationType = generated.ExplorePublicationType;
exports.ExplorePublicationsDocument = generated.ExplorePublicationsDocument;
exports.ExplorePublicationsOrderByType = generated.ExplorePublicationsOrderByType;
exports.FeedDocument = generated.FeedDocument;
exports.FeedEventItemType = generated.FeedEventItemType;
exports.FeedHighlightsDocument = generated.FeedHighlightsDocument;
exports.FollowDocument = generated.FollowDocument;
exports.FollowModuleType = generated.FollowModuleType;
exports.FollowRevenuesDocument = generated.FollowRevenuesDocument;
exports.FollowersDocument = generated.FollowersDocument;
exports.FollowingDocument = generated.FollowingDocument;
exports.FragmentActedNotification = generated.FragmentActedNotification;
exports.FragmentAmount = generated.FragmentAmount;
exports.FragmentAndCondition = generated.FragmentAndCondition;
exports.FragmentApp = generated.FragmentApp;
exports.FragmentApprovedAllowanceAmountResult = generated.FragmentApprovedAllowanceAmountResult;
exports.FragmentArticleMetadataV3 = generated.FragmentArticleMetadataV3;
exports.FragmentAudio = generated.FragmentAudio;
exports.FragmentAudioMetadataV3 = generated.FragmentAudioMetadataV3;
exports.FragmentAuthChallengeResult = generated.FragmentAuthChallengeResult;
exports.FragmentCanDecryptResponse = generated.FragmentCanDecryptResponse;
exports.FragmentCheckingInMetadataV3 = generated.FragmentCheckingInMetadataV3;
exports.FragmentClaimProfileWithHandleErrorResult = generated.FragmentClaimProfileWithHandleErrorResult;
exports.FragmentClaimableProfilesResult = generated.FragmentClaimableProfilesResult;
exports.FragmentCollectCondition = generated.FragmentCollectCondition;
exports.FragmentComment = generated.FragmentComment;
exports.FragmentCommentFields = generated.FragmentCommentFields;
exports.FragmentCommentNotification = generated.FragmentCommentNotification;
exports.FragmentCreateActOnOpenActionBroadcastItemResult = generated.FragmentCreateActOnOpenActionBroadcastItemResult;
exports.FragmentCreateActOnOpenActionEip712TypedData = generated.FragmentCreateActOnOpenActionEip712TypedData;
exports.FragmentCreateBlockProfilesBroadcastItemResult = generated.FragmentCreateBlockProfilesBroadcastItemResult;
exports.FragmentCreateChangeProfileManagersBroadcastItemResult = generated.FragmentCreateChangeProfileManagersBroadcastItemResult;
exports.FragmentCreateFollowBroadcastItemResult = generated.FragmentCreateFollowBroadcastItemResult;
exports.FragmentCreateLegacyCollectBroadcastItemResult = generated.FragmentCreateLegacyCollectBroadcastItemResult;
exports.FragmentCreateLegacyCollectEip712TypedData = generated.FragmentCreateLegacyCollectEip712TypedData;
exports.FragmentCreateLinkHandleToProfileBroadcastItemResult = generated.FragmentCreateLinkHandleToProfileBroadcastItemResult;
exports.FragmentCreateMomokaCommentBroadcastItemResult = generated.FragmentCreateMomokaCommentBroadcastItemResult;
exports.FragmentCreateMomokaMirrorBroadcastItemResult = generated.FragmentCreateMomokaMirrorBroadcastItemResult;
exports.FragmentCreateMomokaPostBroadcastItemResult = generated.FragmentCreateMomokaPostBroadcastItemResult;
exports.FragmentCreateMomokaPublicationResult = generated.FragmentCreateMomokaPublicationResult;
exports.FragmentCreateMomokaQuoteBroadcastItemResult = generated.FragmentCreateMomokaQuoteBroadcastItemResult;
exports.FragmentCreateOnchainCommentBroadcastItemResult = generated.FragmentCreateOnchainCommentBroadcastItemResult;
exports.FragmentCreateOnchainMirrorBroadcastItemResult = generated.FragmentCreateOnchainMirrorBroadcastItemResult;
exports.FragmentCreateOnchainPostBroadcastItemResult = generated.FragmentCreateOnchainPostBroadcastItemResult;
exports.FragmentCreateOnchainQuoteBroadcastItemResult = generated.FragmentCreateOnchainQuoteBroadcastItemResult;
exports.FragmentCreateOnchainSetProfileMetadataBroadcastItemResult = generated.FragmentCreateOnchainSetProfileMetadataBroadcastItemResult;
exports.FragmentCreateProfileWithHandleErrorResult = generated.FragmentCreateProfileWithHandleErrorResult;
exports.FragmentCreateSetFollowModuleBroadcastItemResult = generated.FragmentCreateSetFollowModuleBroadcastItemResult;
exports.FragmentCreateUnblockProfilesBroadcastItemResult = generated.FragmentCreateUnblockProfilesBroadcastItemResult;
exports.FragmentCreateUnfollowBroadcastItemResult = generated.FragmentCreateUnfollowBroadcastItemResult;
exports.FragmentCreateUnlinkHandleFromProfileBroadcastItemResult = generated.FragmentCreateUnlinkHandleFromProfileBroadcastItemResult;
exports.FragmentDegreesOfSeparationReferenceModuleSettings = generated.FragmentDegreesOfSeparationReferenceModuleSettings;
exports.FragmentEip712TypedDataDomain = generated.FragmentEip712TypedDataDomain;
exports.FragmentEip712TypedDataField = generated.FragmentEip712TypedDataField;
exports.FragmentEmbedMetadataV3 = generated.FragmentEmbedMetadataV3;
exports.FragmentEncryptableAudio = generated.FragmentEncryptableAudio;
exports.FragmentEncryptableAudioSet = generated.FragmentEncryptableAudioSet;
exports.FragmentEncryptableImage = generated.FragmentEncryptableImage;
exports.FragmentEncryptableImageSet = generated.FragmentEncryptableImageSet;
exports.FragmentEncryptableVideo = generated.FragmentEncryptableVideo;
exports.FragmentEncryptableVideoSet = generated.FragmentEncryptableVideoSet;
exports.FragmentEoaOwnershipCondition = generated.FragmentEoaOwnershipCondition;
exports.FragmentErc20 = generated.FragmentErc20;
exports.FragmentErc20OwnershipCondition = generated.FragmentErc20OwnershipCondition;
exports.FragmentEventMetadataV3 = generated.FragmentEventMetadataV3;
exports.FragmentExplorePublication = generated.FragmentExplorePublication;
exports.FragmentFeeFollowModuleSettings = generated.FragmentFeeFollowModuleSettings;
exports.FragmentFeedHighlight = generated.FragmentFeedHighlight;
exports.FragmentFeedItem = generated.FragmentFeedItem;
exports.FragmentFiat = generated.FragmentFiat;
exports.FragmentFiatAmount = generated.FragmentFiatAmount;
exports.FragmentFollowCondition = generated.FragmentFollowCondition;
exports.FragmentFollowNotification = generated.FragmentFollowNotification;
exports.FragmentFollowOnlyReferenceModuleSettings = generated.FragmentFollowOnlyReferenceModuleSettings;
exports.FragmentGenerateModuleCurrencyApprovalResult = generated.FragmentGenerateModuleCurrencyApprovalResult;
exports.FragmentGeoLocation = generated.FragmentGeoLocation;
exports.FragmentHandleInfo = generated.FragmentHandleInfo;
exports.FragmentImage = generated.FragmentImage;
exports.FragmentImageMetadataV3 = generated.FragmentImageMetadataV3;
exports.FragmentImageSet = generated.FragmentImageSet;
exports.FragmentImageTransformParam = generated.FragmentImageTransformParam;
exports.FragmentInjectCommonQueryParams = generated.FragmentInjectCommonQueryParams;
exports.FragmentInvitedResult = generated.FragmentInvitedResult;
exports.FragmentKnownCollectOpenActionResult = generated.FragmentKnownCollectOpenActionResult;
exports.FragmentKnownSupportedModule = generated.FragmentKnownSupportedModule;
exports.FragmentLegacyAaveFeeCollectModuleSettings = generated.FragmentLegacyAaveFeeCollectModuleSettings;
exports.FragmentLegacyErc4626FeeCollectModuleSettings = generated.FragmentLegacyErc4626FeeCollectModuleSettings;
exports.FragmentLegacyFeeCollectModuleSettings = generated.FragmentLegacyFeeCollectModuleSettings;
exports.FragmentLegacyFreeCollectModuleSettings = generated.FragmentLegacyFreeCollectModuleSettings;
exports.FragmentLegacyLimitedFeeCollectModuleSettings = generated.FragmentLegacyLimitedFeeCollectModuleSettings;
exports.FragmentLegacyLimitedTimedFeeCollectModuleSettings = generated.FragmentLegacyLimitedTimedFeeCollectModuleSettings;
exports.FragmentLegacyMultirecipientFeeCollectModuleSettings = generated.FragmentLegacyMultirecipientFeeCollectModuleSettings;
exports.FragmentLegacyRevertCollectModuleSettings = generated.FragmentLegacyRevertCollectModuleSettings;
exports.FragmentLegacySimpleCollectModuleSettings = generated.FragmentLegacySimpleCollectModuleSettings;
exports.FragmentLegacyTimedFeeCollectModuleSettings = generated.FragmentLegacyTimedFeeCollectModuleSettings;
exports.FragmentLensProfileManagerRelayError = generated.FragmentLensProfileManagerRelayError;
exports.FragmentLensTransactionResult = generated.FragmentLensTransactionResult;
exports.FragmentLinkMetadataV3 = generated.FragmentLinkMetadataV3;
exports.FragmentLiveStreamMetadataV3 = generated.FragmentLiveStreamMetadataV3;
exports.FragmentMarketplaceMetadata = generated.FragmentMarketplaceMetadata;
exports.FragmentMentionNotification = generated.FragmentMentionNotification;
exports.FragmentMintMetadataV3 = generated.FragmentMintMetadataV3;
exports.FragmentMirror = generated.FragmentMirror;
exports.FragmentMirrorNotification = generated.FragmentMirrorNotification;
exports.FragmentModuleInfo = generated.FragmentModuleInfo;
exports.FragmentModuleMetadata = generated.FragmentModuleMetadata;
exports.FragmentModuleMetadataResult = generated.FragmentModuleMetadataResult;
exports.FragmentMomokaInfo = generated.FragmentMomokaInfo;
exports.FragmentMultirecipientFeeCollectOpenActionSettings = generated.FragmentMultirecipientFeeCollectOpenActionSettings;
exports.FragmentNetworkAddress = generated.FragmentNetworkAddress;
exports.FragmentNftImage = generated.FragmentNftImage;
exports.FragmentNftOwnershipCondition = generated.FragmentNftOwnershipCondition;
exports.FragmentNotification = generated.FragmentNotification;
exports.FragmentOpenActionProfileActed = generated.FragmentOpenActionProfileActed;
exports.FragmentOpenActionResult = generated.FragmentOpenActionResult;
exports.FragmentOptimisticStatusResult = generated.FragmentOptimisticStatusResult;
exports.FragmentOrCondition = generated.FragmentOrCondition;
exports.FragmentPaginatedResultInfo = generated.FragmentPaginatedResultInfo;
exports.FragmentPost = generated.FragmentPost;
exports.FragmentProfile = generated.FragmentProfile;
exports.FragmentProfileActionHistory = generated.FragmentProfileActionHistory;
exports.FragmentProfileCoverSet = generated.FragmentProfileCoverSet;
exports.FragmentProfileFields = generated.FragmentProfileFields;
exports.FragmentProfileGuardianResult = generated.FragmentProfileGuardianResult;
exports.FragmentProfileManager = generated.FragmentProfileManager;
exports.FragmentProfileMetadata = generated.FragmentProfileMetadata;
exports.FragmentProfileMirrorResult = generated.FragmentProfileMirrorResult;
exports.FragmentProfileOnchainIdentity = generated.FragmentProfileOnchainIdentity;
exports.FragmentProfileOperations = generated.FragmentProfileOperations;
exports.FragmentProfileOwnershipCondition = generated.FragmentProfileOwnershipCondition;
exports.FragmentProfilePicture = generated.FragmentProfilePicture;
exports.FragmentProfilePictureSet = generated.FragmentProfilePictureSet;
exports.FragmentProfileReactedResult = generated.FragmentProfileReactedResult;
exports.FragmentProfileReactionResult = generated.FragmentProfileReactionResult;
exports.FragmentProfileStats = generated.FragmentProfileStats;
exports.FragmentProfileWhoReactedResult = generated.FragmentProfileWhoReactedResult;
exports.FragmentPublicationMarketplaceMetadataAttribute = generated.FragmentPublicationMarketplaceMetadataAttribute;
exports.FragmentPublicationMetadataLitEncryption = generated.FragmentPublicationMetadataLitEncryption;
exports.FragmentPublicationMetadataMediaAudio = generated.FragmentPublicationMetadataMediaAudio;
exports.FragmentPublicationMetadataMediaImage = generated.FragmentPublicationMetadataMediaImage;
exports.FragmentPublicationMetadataMediaVideo = generated.FragmentPublicationMetadataMediaVideo;
exports.FragmentPublicationOperations = generated.FragmentPublicationOperations;
exports.FragmentPublicationRevenue = generated.FragmentPublicationRevenue;
exports.FragmentPublicationStats = generated.FragmentPublicationStats;
exports.FragmentPublicationValidateMetadataResult = generated.FragmentPublicationValidateMetadataResult;
exports.FragmentQuote = generated.FragmentQuote;
exports.FragmentQuoteFields = generated.FragmentQuoteFields;
exports.FragmentQuoteNotification = generated.FragmentQuoteNotification;
exports.FragmentReactedResult = generated.FragmentReactedResult;
exports.FragmentReactionEvent = generated.FragmentReactionEvent;
exports.FragmentReactionNotification = generated.FragmentReactionNotification;
exports.FragmentRecipient = generated.FragmentRecipient;
exports.FragmentRelayError = generated.FragmentRelayError;
exports.FragmentRelayQueueResult = generated.FragmentRelayQueueResult;
exports.FragmentRelaySuccess = generated.FragmentRelaySuccess;
exports.FragmentReservedClaimable = generated.FragmentReservedClaimable;
exports.FragmentRevenueAggregate = generated.FragmentRevenueAggregate;
exports.FragmentRevertFollowModuleSettings = generated.FragmentRevertFollowModuleSettings;
exports.FragmentRootCondition = generated.FragmentRootCondition;
exports.FragmentSimpleCollectOpenActionSettings = generated.FragmentSimpleCollectOpenActionSettings;
exports.FragmentSpaceMetadataV3 = generated.FragmentSpaceMetadataV3;
exports.FragmentStoryMetadataV3 = generated.FragmentStoryMetadataV3;
exports.FragmentTagResult = generated.FragmentTagResult;
exports.FragmentTextOnlyMetadataV3 = generated.FragmentTextOnlyMetadataV3;
exports.FragmentThreeDMetadataV3 = generated.FragmentThreeDMetadataV3;
exports.FragmentThreeDMetadataV3Asset = generated.FragmentThreeDMetadataV3Asset;
exports.FragmentTransactionMetadataV3 = generated.FragmentTransactionMetadataV3;
exports.FragmentUnknownFollowModuleSettings = generated.FragmentUnknownFollowModuleSettings;
exports.FragmentUnknownOpenActionModuleSettings = generated.FragmentUnknownOpenActionModuleSettings;
exports.FragmentUnknownOpenActionResult = generated.FragmentUnknownOpenActionResult;
exports.FragmentUnknownReferenceModuleSettings = generated.FragmentUnknownReferenceModuleSettings;
exports.FragmentUnknownSupportedModule = generated.FragmentUnknownSupportedModule;
exports.FragmentUserSigNonces = generated.FragmentUserSigNonces;
exports.FragmentVideo = generated.FragmentVideo;
exports.FragmentVideoMetadataV3 = generated.FragmentVideoMetadataV3;
exports.GenerateModuleCurrencyApprovalDataDocument = generated.GenerateModuleCurrencyApprovalDataDocument;
exports.GetSnapshotProposalDocument = generated.GetSnapshotProposalDocument;
exports.HandleToAddressDocument = generated.HandleToAddressDocument;
exports.HidePublicationDocument = generated.HidePublicationDocument;
exports.IdKitPhoneVerifyWebhookResultStatusType = generated.IdKitPhoneVerifyWebhookResultStatusType;
exports.InviteDocument = generated.InviteDocument;
exports.InvitedProfilesDocument = generated.InvitedProfilesDocument;
exports.LastLoggedInProfileDocument = generated.LastLoggedInProfileDocument;
exports.LegacyCollectDocument = generated.LegacyCollectDocument;
exports.LensProfileManagerRelayErrorReasonType = generated.LensProfileManagerRelayErrorReasonType;
exports.LensProtocolVersion = generated.LensProtocolVersion;
exports.LensTransactionFailureType = generated.LensTransactionFailureType;
exports.LensTransactionStatusDocument = generated.LensTransactionStatusDocument;
exports.LensTransactionStatusType = generated.LensTransactionStatusType;
exports.LimitType = generated.LimitType;
exports.LinkHandleToProfileDocument = generated.LinkHandleToProfileDocument;
exports.MarketplaceMetadataAttributeDisplayType = generated.MarketplaceMetadataAttributeDisplayType;
exports.MetadataAttributeType = generated.MetadataAttributeType;
exports.MirrorOnMomokaDocument = generated.MirrorOnMomokaDocument;
exports.MirrorOnchainDocument = generated.MirrorOnchainDocument;
exports.ModuleMetadataDocument = generated.ModuleMetadataDocument;
exports.ModuleType = generated.ModuleType;
exports.MomokaValidatorError = generated.MomokaValidatorError;
exports.MutualFollowersDocument = generated.MutualFollowersDocument;
exports.NftCollectionOwnersOrder = generated.NftCollectionOwnersOrder;
exports.NftContractType = generated.NftContractType;
exports.NotificationType = generated.NotificationType;
exports.NotificationsDocument = generated.NotificationsDocument;
exports.OpenActionCategoryType = generated.OpenActionCategoryType;
exports.OpenActionModuleType = generated.OpenActionModuleType;
exports.OwnedHandlesDocument = generated.OwnedHandlesDocument;
exports.PoapTokenLayerType = generated.PoapTokenLayerType;
exports.PopularNftCollectionsOrder = generated.PopularNftCollectionsOrder;
exports.PostOnMomokaDocument = generated.PostOnMomokaDocument;
exports.PostOnchainDocument = generated.PostOnchainDocument;
exports.ProfileActionHistoryDocument = generated.ProfileActionHistoryDocument;
exports.ProfileActionHistoryType = generated.ProfileActionHistoryType;
exports.ProfileAlreadyInvitedDocument = generated.ProfileAlreadyInvitedDocument;
exports.ProfileDocument = generated.ProfileDocument;
exports.ProfileInterestTypes = generated.ProfileInterestTypes;
exports.ProfileManagersDocument = generated.ProfileManagersDocument;
exports.ProfileRecommendationsDocument = generated.ProfileRecommendationsDocument;
exports.ProfileReportingFraudSubreason = generated.ProfileReportingFraudSubreason;
exports.ProfileReportingReason = generated.ProfileReportingReason;
exports.ProfileReportingSpamSubreason = generated.ProfileReportingSpamSubreason;
exports.ProfilesDocument = generated.ProfilesDocument;
exports.ProfilesManagedDocument = generated.ProfilesManagedDocument;
exports.PublicationBookmarksDocument = generated.PublicationBookmarksDocument;
exports.PublicationContentWarningType = generated.PublicationContentWarningType;
exports.PublicationDocument = generated.PublicationDocument;
exports.PublicationMetadataLicenseType = generated.PublicationMetadataLicenseType;
exports.PublicationMetadataMainFocusType = generated.PublicationMetadataMainFocusType;
exports.PublicationMetadataTransactionType = generated.PublicationMetadataTransactionType;
exports.PublicationReactionType = generated.PublicationReactionType;
exports.PublicationReportingFraudSubreason = generated.PublicationReportingFraudSubreason;
exports.PublicationReportingIllegalSubreason = generated.PublicationReportingIllegalSubreason;
exports.PublicationReportingReason = generated.PublicationReportingReason;
exports.PublicationReportingSensitiveSubreason = generated.PublicationReportingSensitiveSubreason;
exports.PublicationReportingSpamSubreason = generated.PublicationReportingSpamSubreason;
exports.PublicationType = generated.PublicationType;
exports.PublicationsDocument = generated.PublicationsDocument;
exports.PublicationsTagsDocument = generated.PublicationsTagsDocument;
exports.QuoteOnMomokaDocument = generated.QuoteOnMomokaDocument;
exports.QuoteOnchainDocument = generated.QuoteOnchainDocument;
exports.ReferenceModuleType = generated.ReferenceModuleType;
exports.RefreshPublicationMetadataDocument = generated.RefreshPublicationMetadataDocument;
exports.RefreshPublicationMetadataResultType = generated.RefreshPublicationMetadataResultType;
exports.RelayErrorReasonType = generated.RelayErrorReasonType;
exports.RelayQueuesDocument = generated.RelayQueuesDocument;
exports.RelayRoleKey = generated.RelayRoleKey;
exports.RemoveProfileInterestsDocument = generated.RemoveProfileInterestsDocument;
exports.RemovePublicationBookmarkDocument = generated.RemovePublicationBookmarkDocument;
exports.RemoveReactionDocument = generated.RemoveReactionDocument;
exports.ReportPublicationDocument = generated.ReportPublicationDocument;
exports.RevenueFromPublicationDocument = generated.RevenueFromPublicationDocument;
exports.RevenueFromPublicationsDocument = generated.RevenueFromPublicationsDocument;
exports.RevokeAuthenticationDocument = generated.RevokeAuthenticationDocument;
exports.SearchProfilesDocument = generated.SearchProfilesDocument;
exports.SearchPublicationType = generated.SearchPublicationType;
exports.SearchPublicationsDocument = generated.SearchPublicationsDocument;
exports.SetFollowModuleDocument = generated.SetFollowModuleDocument;
exports.SetProfileMetadataDocument = generated.SetProfileMetadataDocument;
exports.SupportedFiatType = generated.SupportedFiatType;
exports.SupportedFollowModulesDocument = generated.SupportedFollowModulesDocument;
exports.SupportedOpenActionCollectModulesDocument = generated.SupportedOpenActionCollectModulesDocument;
exports.SupportedOpenActionModulesDocument = generated.SupportedOpenActionModulesDocument;
exports.SupportedReferenceModulesDocument = generated.SupportedReferenceModulesDocument;
exports.TagSortCriteriaType = generated.TagSortCriteriaType;
exports.TriStateValue = generated.TriStateValue;
exports.TxIdToTxHashDocument = generated.TxIdToTxHashDocument;
exports.TxStatus = generated.TxStatus;
exports.UnblockDocument = generated.UnblockDocument;
exports.UndoPublicationNotInterestedDocument = generated.UndoPublicationNotInterestedDocument;
exports.UnfollowDocument = generated.UnfollowDocument;
exports.UnlinkHandleFromProfileDocument = generated.UnlinkHandleFromProfileDocument;
exports.UnspecifiedError = generated.UnspecifiedError;
exports.UserSigNoncesDocument = generated.UserSigNoncesDocument;
exports.ValidatePublicationMetadataDocument = generated.ValidatePublicationMetadataDocument;
exports.ValidationError = generated.ValidationError;
exports.WalletAuthenticationToProfileAuthenticationDocument = generated.WalletAuthenticationToProfileAuthenticationDocument;
exports.WhoActedOnPublicationDocument = generated.WhoActedOnPublicationDocument;
exports.WhoHaveBlockedDocument = generated.WhoHaveBlockedDocument;
exports.WhoReactedPublicationDocument = generated.WhoReactedPublicationDocument;
exports.WorldcoinPhoneVerifyType = generated.WorldcoinPhoneVerifyType;
exports.countAnyPendingCollect = generated.countAnyPendingCollect;
exports.countAnyPendingCollectFor = generated.countAnyPendingCollectFor;
exports.countPendingFollowFor = generated.countPendingFollowFor;
exports.countPendingUnfollowFor = generated.countPendingUnfollowFor;
exports.defaultQueryParams = generated.defaultQueryParams;
exports.getPendingLinkHandleTxFor = generated.getPendingLinkHandleTxFor;
exports.getPendingUnlinkHandleTxFor = generated.getPendingUnlinkHandleTxFor;
exports.graphQLResultHasUnauthenticatedError = generated.graphQLResultHasUnauthenticatedError;
exports.hasPendingBlockForProfile = generated.hasPendingBlockForProfile;
exports.hasPendingUnblockForProfile = generated.hasPendingUnblockForProfile;
exports.isCursor = generated.isCursor;
exports.isValidationApolloError = generated.isValidationApolloError;
exports.recentTransactionsVar = generated.recentTransactionsVar;
exports.useActOnOpenAction = generated.useActOnOpenAction;
exports.useAddProfileInterests = generated.useAddProfileInterests;
exports.useAddPublicationBookmark = generated.useAddPublicationBookmark;
exports.useAddPublicationNotInterested = generated.useAddPublicationNotInterested;
exports.useAddReaction = generated.useAddReaction;
exports.useApprovedModuleAllowanceAmount = generated.useApprovedModuleAllowanceAmount;
exports.useApprovedModuleAllowanceAmountLazyQuery = generated.useApprovedModuleAllowanceAmountLazyQuery;
exports.useAuthAuthenticate = generated.useAuthAuthenticate;
exports.useAuthChallenge = generated.useAuthChallenge;
exports.useAuthChallengeLazyQuery = generated.useAuthChallengeLazyQuery;
exports.useAuthRefresh = generated.useAuthRefresh;
exports.useAuthVerify = generated.useAuthVerify;
exports.useAuthVerifyLazyQuery = generated.useAuthVerifyLazyQuery;
exports.useBlock = generated.useBlock;
exports.useBroadcastOnMomoka = generated.useBroadcastOnMomoka;
exports.useBroadcastOnchain = generated.useBroadcastOnchain;
exports.useClaimProfileWithHandle = generated.useClaimProfileWithHandle;
exports.useClaimableProfiles = generated.useClaimableProfiles;
exports.useClaimableProfilesLazyQuery = generated.useClaimableProfilesLazyQuery;
exports.useCommentOnMomoka = generated.useCommentOnMomoka;
exports.useCommentOnchain = generated.useCommentOnchain;
exports.useCreateActOnOpenActionTypedData = generated.useCreateActOnOpenActionTypedData;
exports.useCreateBlockProfilesTypedData = generated.useCreateBlockProfilesTypedData;
exports.useCreateChangeProfileManagersTypedData = generated.useCreateChangeProfileManagersTypedData;
exports.useCreateFollowTypedData = generated.useCreateFollowTypedData;
exports.useCreateLegacyCollectTypedData = generated.useCreateLegacyCollectTypedData;
exports.useCreateLinkHandleToProfileTypedData = generated.useCreateLinkHandleToProfileTypedData;
exports.useCreateMomokaCommentTypedData = generated.useCreateMomokaCommentTypedData;
exports.useCreateMomokaMirrorTypedData = generated.useCreateMomokaMirrorTypedData;
exports.useCreateMomokaPostTypedData = generated.useCreateMomokaPostTypedData;
exports.useCreateMomokaQuoteTypedData = generated.useCreateMomokaQuoteTypedData;
exports.useCreateOnchainCommentTypedData = generated.useCreateOnchainCommentTypedData;
exports.useCreateOnchainMirrorTypedData = generated.useCreateOnchainMirrorTypedData;
exports.useCreateOnchainPostTypedData = generated.useCreateOnchainPostTypedData;
exports.useCreateOnchainQuoteTypedData = generated.useCreateOnchainQuoteTypedData;
exports.useCreateOnchainSetProfileMetadataTypedData = generated.useCreateOnchainSetProfileMetadataTypedData;
exports.useCreateSetFollowModuleTypedData = generated.useCreateSetFollowModuleTypedData;
exports.useCreateUnblockProfilesTypedData = generated.useCreateUnblockProfilesTypedData;
exports.useCreateUnfollowTypedData = generated.useCreateUnfollowTypedData;
exports.useCreateUnlinkHandleFromProfileTypedData = generated.useCreateUnlinkHandleFromProfileTypedData;
exports.useCurrencies = generated.useCurrencies;
exports.useCurrenciesLazyQuery = generated.useCurrenciesLazyQuery;
exports.useDismissRecommendedProfiles = generated.useDismissRecommendedProfiles;
exports.useExploreProfiles = generated.useExploreProfiles;
exports.useExploreProfilesLazyQuery = generated.useExploreProfilesLazyQuery;
exports.useExplorePublications = generated.useExplorePublications;
exports.useExplorePublicationsLazyQuery = generated.useExplorePublicationsLazyQuery;
exports.useFeed = generated.useFeed;
exports.useFeedHighlights = generated.useFeedHighlights;
exports.useFeedHighlightsLazyQuery = generated.useFeedHighlightsLazyQuery;
exports.useFeedLazyQuery = generated.useFeedLazyQuery;
exports.useFollow = generated.useFollow;
exports.useFollowRevenues = generated.useFollowRevenues;
exports.useFollowRevenuesLazyQuery = generated.useFollowRevenuesLazyQuery;
exports.useFollowers = generated.useFollowers;
exports.useFollowersLazyQuery = generated.useFollowersLazyQuery;
exports.useFollowing = generated.useFollowing;
exports.useFollowingLazyQuery = generated.useFollowingLazyQuery;
exports.useGenerateModuleCurrencyApprovalData = generated.useGenerateModuleCurrencyApprovalData;
exports.useGenerateModuleCurrencyApprovalDataLazyQuery = generated.useGenerateModuleCurrencyApprovalDataLazyQuery;
exports.useGetSnapshotProposal = generated.useGetSnapshotProposal;
exports.useHandleToAddress = generated.useHandleToAddress;
exports.useHandleToAddressLazyQuery = generated.useHandleToAddressLazyQuery;
exports.useHidePublication = generated.useHidePublication;
exports.useInvite = generated.useInvite;
exports.useInvitedProfiles = generated.useInvitedProfiles;
exports.useInvitedProfilesLazyQuery = generated.useInvitedProfilesLazyQuery;
exports.useLastLoggedInProfile = generated.useLastLoggedInProfile;
exports.useLastLoggedInProfileLazyQuery = generated.useLastLoggedInProfileLazyQuery;
exports.useLegacyCollect = generated.useLegacyCollect;
exports.useLensTransactionStatus = generated.useLensTransactionStatus;
exports.useLensTransactionStatusLazyQuery = generated.useLensTransactionStatusLazyQuery;
exports.useLinkHandleToProfile = generated.useLinkHandleToProfile;
exports.useMirrorOnMomoka = generated.useMirrorOnMomoka;
exports.useMirrorOnchain = generated.useMirrorOnchain;
exports.useModuleMetadata = generated.useModuleMetadata;
exports.useModuleMetadataLazyQuery = generated.useModuleMetadataLazyQuery;
exports.useMutualFollowers = generated.useMutualFollowers;
exports.useMutualFollowersLazyQuery = generated.useMutualFollowersLazyQuery;
exports.useNotifications = generated.useNotifications;
exports.useNotificationsLazyQuery = generated.useNotificationsLazyQuery;
exports.useOwnedHandles = generated.useOwnedHandles;
exports.useOwnedHandlesLazyQuery = generated.useOwnedHandlesLazyQuery;
exports.usePostOnMomoka = generated.usePostOnMomoka;
exports.usePostOnchain = generated.usePostOnchain;
exports.useProfile = generated.useProfile;
exports.useProfileActionHistory = generated.useProfileActionHistory;
exports.useProfileActionHistoryLazyQuery = generated.useProfileActionHistoryLazyQuery;
exports.useProfileAlreadyInvited = generated.useProfileAlreadyInvited;
exports.useProfileAlreadyInvitedLazyQuery = generated.useProfileAlreadyInvitedLazyQuery;
exports.useProfileLazyQuery = generated.useProfileLazyQuery;
exports.useProfileManagers = generated.useProfileManagers;
exports.useProfileManagersLazyQuery = generated.useProfileManagersLazyQuery;
exports.useProfileRecommendations = generated.useProfileRecommendations;
exports.useProfileRecommendationsLazyQuery = generated.useProfileRecommendationsLazyQuery;
exports.useProfiles = generated.useProfiles;
exports.useProfilesLazyQuery = generated.useProfilesLazyQuery;
exports.useProfilesManaged = generated.useProfilesManaged;
exports.useProfilesManagedLazyQuery = generated.useProfilesManagedLazyQuery;
exports.usePublication = generated.usePublication;
exports.usePublicationBookmarks = generated.usePublicationBookmarks;
exports.usePublicationBookmarksLazyQuery = generated.usePublicationBookmarksLazyQuery;
exports.usePublicationLazyQuery = generated.usePublicationLazyQuery;
exports.usePublications = generated.usePublications;
exports.usePublicationsLazyQuery = generated.usePublicationsLazyQuery;
exports.usePublicationsTags = generated.usePublicationsTags;
exports.usePublicationsTagsLazyQuery = generated.usePublicationsTagsLazyQuery;
exports.useQuoteOnMomoka = generated.useQuoteOnMomoka;
exports.useQuoteOnchain = generated.useQuoteOnchain;
exports.useRecentTransactionsVar = generated.useRecentTransactionsVar;
exports.useRefreshPublicationMetadata = generated.useRefreshPublicationMetadata;
exports.useRelayQueues = generated.useRelayQueues;
exports.useRelayQueuesLazyQuery = generated.useRelayQueuesLazyQuery;
exports.useRemoveProfileInterests = generated.useRemoveProfileInterests;
exports.useRemovePublicationBookmark = generated.useRemovePublicationBookmark;
exports.useRemoveReaction = generated.useRemoveReaction;
exports.useReportPublication = generated.useReportPublication;
exports.useRevenueFromPublication = generated.useRevenueFromPublication;
exports.useRevenueFromPublicationLazyQuery = generated.useRevenueFromPublicationLazyQuery;
exports.useRevenueFromPublications = generated.useRevenueFromPublications;
exports.useRevenueFromPublicationsLazyQuery = generated.useRevenueFromPublicationsLazyQuery;
exports.useRevokeAuthentication = generated.useRevokeAuthentication;
exports.useSearchProfiles = generated.useSearchProfiles;
exports.useSearchProfilesLazyQuery = generated.useSearchProfilesLazyQuery;
exports.useSearchPublications = generated.useSearchPublications;
exports.useSearchPublicationsLazyQuery = generated.useSearchPublicationsLazyQuery;
exports.useSetFollowModule = generated.useSetFollowModule;
exports.useSetProfileMetadata = generated.useSetProfileMetadata;
exports.useSupportedFollowModules = generated.useSupportedFollowModules;
exports.useSupportedFollowModulesLazyQuery = generated.useSupportedFollowModulesLazyQuery;
exports.useSupportedOpenActionCollectModules = generated.useSupportedOpenActionCollectModules;
exports.useSupportedOpenActionCollectModulesLazyQuery = generated.useSupportedOpenActionCollectModulesLazyQuery;
exports.useSupportedOpenActionModules = generated.useSupportedOpenActionModules;
exports.useSupportedOpenActionModulesLazyQuery = generated.useSupportedOpenActionModulesLazyQuery;
exports.useSupportedReferenceModules = generated.useSupportedReferenceModules;
exports.useSupportedReferenceModulesLazyQuery = generated.useSupportedReferenceModulesLazyQuery;
exports.useTxIdToTxHash = generated.useTxIdToTxHash;
exports.useTxIdToTxHashLazyQuery = generated.useTxIdToTxHashLazyQuery;
exports.useUnblock = generated.useUnblock;
exports.useUndoPublicationNotInterested = generated.useUndoPublicationNotInterested;
exports.useUnfollow = generated.useUnfollow;
exports.useUnlinkHandleFromProfile = generated.useUnlinkHandleFromProfile;
exports.useUserSigNonces = generated.useUserSigNonces;
exports.useUserSigNoncesLazyQuery = generated.useUserSigNoncesLazyQuery;
exports.useValidatePublicationMetadata = generated.useValidatePublicationMetadata;
exports.useValidatePublicationMetadataLazyQuery = generated.useValidatePublicationMetadataLazyQuery;
exports.useWalletAuthenticationToProfileAuthentication = generated.useWalletAuthenticationToProfileAuthentication;
exports.useWhoActedOnPublication = generated.useWhoActedOnPublication;
exports.useWhoActedOnPublicationLazyQuery = generated.useWhoActedOnPublicationLazyQuery;
exports.useWhoHaveBlocked = generated.useWhoHaveBlocked;
exports.useWhoHaveBlockedLazyQuery = generated.useWhoHaveBlockedLazyQuery;
exports.useWhoReactedPublication = generated.useWhoReactedPublication;
exports.useWhoReactedPublicationLazyQuery = generated.useWhoReactedPublicationLazyQuery;
exports.ContentInsightType = ContentInsightType;
exports.OpenActionKind = OpenActionKind;
exports.SnapshotVotingSystem = SnapshotVotingSystem;
exports.chainType = chainType;
exports.createAuthApolloClient = createAuthApolloClient;
exports.createLensApolloClient = createLensApolloClient;
exports.createSnapshotApolloClient = createSnapshotApolloClient;
exports.demoSnapshotPoll = demoSnapshotPoll;
exports.erc20Amount = erc20Amount;
exports.getSessionData = getSessionData;
exports.isCommentPublication = isCommentPublication;
exports.isMirrorPublication = isMirrorPublication;
exports.isPostPublication = isPostPublication;
exports.isPrimaryPublication = isPrimaryPublication;
exports.isPublicationId = isPublicationId;
exports.isQuotePublication = isQuotePublication;
exports.isValidHandle = isValidHandle;
exports.omitTypename = omitTypename;
exports.resetSession = resetSession;
exports.resolveFollowPolicy = resolveFollowPolicy;
exports.resolveOpenActionRequestFor = resolveOpenActionRequestFor;
exports.resolveTokenAllowanceRequest = resolveTokenAllowanceRequest;
exports.resolveTokenAllowanceRequestForCollect = resolveTokenAllowanceRequestForCollect;
exports.resolveTokenAllowanceRequestForFollow = resolveTokenAllowanceRequestForFollow;
exports.snapshotPoll = snapshotPoll;
exports.updateSessionData = updateSessionData;
exports.useSessionDataVar = useSessionDataVar;
