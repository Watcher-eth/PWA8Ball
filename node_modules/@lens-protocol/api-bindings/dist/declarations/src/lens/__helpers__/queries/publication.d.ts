import { PaginatedResultInfo, PublicationBookmarksVariables, PublicationVariables, PublicationsVariables, SearchPublicationsVariables } from "../../graphql/generated.js";
import { AnyPublication, PrimaryPublication } from "../../publication.js";
export declare function mockPublicationResponse({ variables, result, }: {
    variables: Pick<PublicationVariables, 'request'>;
    result: AnyPublication | null;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockPublicationsResponse({ variables, items, info, }: {
    variables: Pick<PublicationsVariables, 'cursor' | 'limit' | 'where'>;
    items: Array<AnyPublication>;
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockSearchPublicationsResponse({ variables, items, info, }: {
    variables: Pick<SearchPublicationsVariables, 'cursor' | 'limit' | 'query' | 'where'>;
    items: Array<PrimaryPublication>;
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockProfileBookmarksResponse({ variables, items, info, }: {
    variables: Pick<PublicationBookmarksVariables, 'request'>;
    items: AnyPublication[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
