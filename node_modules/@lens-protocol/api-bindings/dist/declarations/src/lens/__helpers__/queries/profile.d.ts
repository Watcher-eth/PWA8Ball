import { FollowingVariables, MutualFollowersVariables, PaginatedResultInfo, Profile, ProfileActionHistory, ProfileActionHistoryVariables, ProfileRecommendationsVariables, ProfileWhoReactedResult, ProfilesVariables, ProfileVariables, SearchProfilesVariables, WhoActedOnPublicationVariables, WhoReactedPublicationVariables, FollowersVariables } from "../../graphql/generated.js";
export declare function mockProfileResponse({ variables, result, }: {
    variables: Pick<ProfileVariables, 'request'>;
    result: Profile | null;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockProfilesResponse({ variables, items, info, }: {
    variables: Pick<ProfilesVariables, 'where' | 'cursor'>;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockMutualFollowersResponse({ variables, items, info, }: {
    variables: Pick<MutualFollowersVariables, 'observer' | 'viewing'>;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockFollowersResponse({ variables, items, info, }: {
    variables: Pick<FollowersVariables, 'of'>;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockFollowingResponse({ variables, items, info, }: {
    variables: Pick<FollowingVariables, 'for'>;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockSearchProfilesResponse({ variables, items, info, }: {
    variables: Pick<SearchProfilesVariables, 'limit' | 'query' | 'where'>;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockProfileRecommendationsResponse({ variables, items, info, }: {
    variables: Pick<ProfileRecommendationsVariables, 'for'>;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockWhoActedOnPublicationResponse({ variables, items, info, }: {
    variables: Pick<WhoActedOnPublicationVariables, 'on' | 'where'>;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockProfileActionHistoryResponse({ variables, items, info, }: {
    variables: ProfileActionHistoryVariables;
    items: ProfileActionHistory[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
        }>;
    };
    result: {
        data: {
            result: {
                items: ProfileActionHistory[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockWhoReactedToPublicationResponse({ variables, items, info, }: {
    variables: Pick<WhoReactedPublicationVariables, 'for' | 'limit' | 'where'>;
    items: ProfileWhoReactedResult[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
