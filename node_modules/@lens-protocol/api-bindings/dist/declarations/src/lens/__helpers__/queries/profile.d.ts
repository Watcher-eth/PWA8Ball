import { FollowersVariables, FollowingVariables, MutualFollowersVariables, PaginatedResultInfo, Profile, ProfileActionHistory, ProfileActionHistoryVariables, ProfileRecommendationsVariables, ProfileWhoReactedResult, ProfilesVariables, ProfileVariables, SearchProfilesVariables, WhoActedOnPublicationVariables, WhoReactedPublicationVariables } from "../../graphql/generated.js";
export declare function mockProfileResponse({ variables, result, }: {
    variables: ProfileVariables;
    result: Profile | null;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>> | undefined;
};
export declare function mockProfilesResponse({ variables, items, info, }: {
    variables: ProfilesVariables;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            where: import("../../graphql/generated.js").ProfilesRequestWhere;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: Profile[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockMutualFollowersResponse({ variables, items, info, }: {
    variables: MutualFollowersVariables;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            observer: import("@lens-protocol/domain/entities").ProfileId;
            viewing: import("@lens-protocol/domain/entities").ProfileId;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: Profile[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockFollowersResponse({ variables, items, info, }: {
    variables: FollowersVariables;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            of: import("@lens-protocol/domain/entities").ProfileId;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: Profile[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockFollowingResponse({ variables, items, info, }: {
    variables: FollowingVariables;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            for: import("@lens-protocol/domain/entities").ProfileId;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: Profile[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockSearchProfilesResponse({ variables, items, info, }: {
    variables: SearchProfilesVariables;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            query: string;
            where?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ProfileSearchWhere> | undefined;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: Profile[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockProfileRecommendationsResponse({ variables, items, info, }: {
    variables: ProfileRecommendationsVariables;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            for: import("@lens-protocol/domain/entities").ProfileId;
            disableML?: import("../../graphql/generated.js").InputMaybe<boolean> | undefined;
            shuffle?: import("../../graphql/generated.js").InputMaybe<boolean> | undefined;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: Profile[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockWhoActedOnPublicationResponse({ variables, items, info, }: {
    variables: WhoActedOnPublicationVariables;
    items: Profile[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            on: import("@lens-protocol/domain/entities").PublicationId;
            where?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").WhoActedOnPublicationWhere> | undefined;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: Profile[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockProfileActionHistoryResponse({ variables, items, info, }: {
    variables: ProfileActionHistoryVariables;
    items: ProfileActionHistory[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
        }>;
    };
    result: {
        data: {
            result: {
                items: ProfileActionHistory[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
export declare function mockWhoReactedToPublicationResponse({ variables, items, info, }: {
    variables: WhoReactedPublicationVariables;
    items: ProfileWhoReactedResult[];
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
        variables: import("../../graphql/generated.js").Exact<{
            for: import("@lens-protocol/domain/entities").PublicationId;
            where?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").WhoReactedPublicationWhere> | undefined;
            limit?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").LimitType> | undefined;
            cursor?: import("../../graphql/generated.js").InputMaybe<import("../../index.js").Cursor> | undefined;
            profileCoverSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            profilePictureSize?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").ImageTransform> | undefined;
            activityOn?: import("../../graphql/generated.js").InputMaybe<import("@lens-protocol/domain/entities").AppId | import("@lens-protocol/domain/entities").AppId[]> | undefined;
            fxRateFor?: import("../../graphql/generated.js").InputMaybe<import("../../graphql/generated.js").SupportedFiatType> | undefined;
        }> & {
            fxRateFor: import("../../graphql/generated.js").SupportedFiatType;
            imageMediumSize: {};
            imageSmallSize: {};
            profileCoverSize: {};
            profilePictureSize: {};
        };
    };
    result: {
        data: {
            result: {
                items: ProfileWhoReactedResult[];
                pageInfo: PaginatedResultInfo;
            };
        };
    };
};
