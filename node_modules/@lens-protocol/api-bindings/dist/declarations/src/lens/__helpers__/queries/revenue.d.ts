import { FollowRevenuesVariables, PaginatedResultInfo, PublicationRevenue, RevenueAggregate, RevenueFromPublicationVariables, RevenueFromPublicationsVariables } from "../../graphql/generated.js";
export declare function mockFollowRevenuesResponse({ variables, result, }: {
    variables: Pick<FollowRevenuesVariables, 'request'>;
    result: RevenueAggregate[];
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockRevenueFromPublicationResponse({ variables, result, }: {
    variables: Pick<RevenueFromPublicationVariables, 'request'>;
    result: PublicationRevenue | null;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
export declare function mockRevenueFromPublicationsResponse({ variables, items, info, }: {
    variables: Pick<RevenueFromPublicationsVariables, 'cursor' | 'for' | 'limit' | 'publishedOn'>;
    items: Array<PublicationRevenue>;
    info?: PaginatedResultInfo;
}): {
    request: {
        query: import("graphql").DocumentNode;
    };
    variableMatcher: (variables: import("@apollo/client").OperationVariables) => boolean;
    result: import("@apollo/client").FetchResult<Record<string, any>> | import("@apollo/client/testing").ResultFunction<import("@apollo/client").FetchResult<Record<string, any>>, Record<string, any>> | undefined;
};
