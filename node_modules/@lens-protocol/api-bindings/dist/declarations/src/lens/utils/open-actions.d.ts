import { ProfileId, PublicationId } from '@lens-protocol/domain/entities';
import { OpenActionRequest } from '@lens-protocol/domain/use-cases/publications';
import { Data, EvmAddress } from '@lens-protocol/shared-kernel';
import { AnyPublication } from "../publication.js";
/**
 * The category of Open Actions to perform on a given publication.
 */
export declare enum OpenActionKind {
    COLLECT = "COLLECT",
    UNKNOWN = "UNKNOWN"
}
/**
 * Execute the specified Unknown Open Action.
 */
export type UnknownActionParams = {
    kind: OpenActionKind.UNKNOWN;
    /**
     * The address of the unknown open action to perform.
     *
     * MUST be within the publications' `openActionModules` list.
     */
    address: EvmAddress;
    /**
     * The data required by the unknown Open Action contract address to operate.
     *
     * It's consumer responsibility to encode it correctly.
     */
    data: Data;
};
/**
 * Execute the Collect Open Action defined by the publication.
 */
export type CollectParams = {
    kind: OpenActionKind.COLLECT;
    /**
     * The referrers list. It can be a list of Publication IDs or Profile IDs.
     *
     * The referrers will be rewarded with a percentage of the referral reward fee.
     * In case there are multiple referrers, they will split the referral reward fee equally.
     *
     * This field is ignored for legacy publications (pre-v2).
     *
     * @defaultValue if the publication is a Mirror the Mirror ID, empty otherwise.
     */
    referrers?: ReadonlyArray<PublicationId | ProfileId>;
};
/**
 * The Open Action to perform.
 */
export type OpenActionParams = CollectParams | UnknownActionParams;
export type OpenActionContext<TAction extends OpenActionParams = OpenActionParams> = {
    action: TAction;
    public: boolean;
    signless: boolean;
    sponsored: boolean;
};
export declare function resolveOpenActionRequestFor(publication: AnyPublication, context: OpenActionContext): OpenActionRequest;
