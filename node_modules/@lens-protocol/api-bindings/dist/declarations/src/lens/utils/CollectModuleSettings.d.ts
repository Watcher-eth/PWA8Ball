import { Erc20Amount, EvmAddress, FiatAmount } from '@lens-protocol/shared-kernel';
import * as gql from "../graphql/generated.js";
import { OpenActionModuleSettings, PrimaryPublication } from "../publication.js";
export type CollectModuleSettings = gql.LegacyAaveFeeCollectModuleSettings | gql.LegacyErc4626FeeCollectModuleSettings | gql.LegacyFeeCollectModuleSettings | gql.LegacyLimitedFeeCollectModuleSettings | gql.LegacyLimitedTimedFeeCollectModuleSettings | gql.LegacyMultirecipientFeeCollectModuleSettings | gql.LegacyTimedFeeCollectModuleSettings | gql.LegacySimpleCollectModuleSettings | gql.LegacyFreeCollectModuleSettings | gql.MultirecipientFeeCollectOpenActionSettings | gql.SimpleCollectOpenActionSettings;
/**
 * Given an open action module settings, determine if it is a collect module
 *
 * @experimental This function is not yet stable and may be removed in a future release
 */
export declare function isCollectModuleSettings(settings: OpenActionModuleSettings): settings is CollectModuleSettings;
/**
 * Given a publication, find the collect module settings if any
 *
 * @experimental This function is not yet stable and may be removed in a future release
 */
export declare function findCollectModuleSettings(collectable: PrimaryPublication): CollectModuleSettings | null;
export type CollectFee = {
    amount: Erc20Amount;
    rate?: FiatAmount;
    referralFee: number;
    recipient: EvmAddress;
};
export type MultirecipientCollectFee = {
    amount: Erc20Amount;
    rate?: FiatAmount;
    referralFee: number;
    recipients: gql.Recipient[];
};
export declare function isMultirecipientCollectFee(fee: CollectFee | MultirecipientCollectFee): fee is MultirecipientCollectFee;
export type CollectPolicy = {
    collectNft: EvmAddress | null;
    followerOnly: boolean;
    collectLimit: string | null;
    endsAt: string | null;
    contract: gql.NetworkAddress;
    fee?: CollectFee | MultirecipientCollectFee;
};
/**
 * Resolve API's {@link OpenActionModuleSettings} to more user friendly {@link CollectPolicy}.
 *
 * @param collectable - The {@link PrimaryPublication} to resolve {@link CollectPolicy} from
 * @returns {@link CollectPolicy}
 */
export declare function resolveCollectPolicy(collectable: PrimaryPublication): CollectPolicy | null;
