import { from, ApolloLink, HttpLink, makeVar, useReactiveVar } from '@apollo/client';
import { _ as _objectSpread2, a as _unsupportedIterableToArray, b as _inherits, c as _createSuper, d as _classCallCheck, e as _defineProperty, f as _assertThisInitialized, g as _createClass, h as _asyncToGenerator, i as _regeneratorRuntime, j as isUnauthorizedServerError, S as SafeApolloClient, k as createLensCache } from './unsupportedIterableToArray-56a65d61.esm.js';
export { dg as ActOnOpenActionDocument, eK as AddProfileInterestsDocument, gl as AddPublicationBookmarkDocument, gp as AddPublicationNotInterestedDocument, gx as AddReactionDocument, A as ApolloServerErrorCode, dr as AuthAuthenticateDocument, dk as AuthChallengeDocument, dt as AuthRefreshDocument, dn as AuthVerifyDocument, eQ as BlockDocument, h2 as BroadcastOnMomokaDocument, h0 as BroadcastOnchainDocument, C as ChangeProfileManagerActionType, D as ClaimProfileStatusType, eI as ClaimProfileWithHandleDocument, E as ClaimProfileWithHandleErrorReasonType, eF as ClaimableProfilesDocument, F as ClaimableTokenType, G as CollectOpenActionModuleType, g5 as CommentOnMomokaDocument, fZ as CommentOnchainDocument, H as CommentRankingFilterType, I as ComparisonOperatorConditionType, di as CreateActOnOpenActionTypedDataDocument, f2 as CreateBlockProfilesTypedDataDocument, f0 as CreateChangeProfileManagersTypedDataDocument, f6 as CreateFollowTypedDataDocument, dO as CreateFrameTypedDataDocument, gh as CreateLegacyCollectTypedDataDocument, fi as CreateLinkHandleToProfileTypedDataDocument, fR as CreateMomokaCommentTypedDataDocument, fT as CreateMomokaMirrorTypedDataDocument, fP as CreateMomokaPostTypedDataDocument, fV as CreateMomokaQuoteTypedDataDocument, fJ as CreateOnchainCommentTypedDataDocument, fL as CreateOnchainMirrorTypedDataDocument, fH as CreateOnchainPostTypedDataDocument, fN as CreateOnchainQuoteTypedDataDocument, e_ as CreateOnchainSetProfileMetadataTypedDataDocument, J as CreateProfileWithHandleErrorReasonType, fc as CreateSetFollowModuleTypedDataDocument, f4 as CreateUnblockProfilesTypedDataDocument, f8 as CreateUnfollowTypedDataDocument, fk as CreateUnlinkHandleFromProfileTypedDataDocument, e2 as CurrenciesDocument, K as CustomFiltersType, L as DecryptFailReasonType, eY as DismissRecommendedProfilesDocument, dC as ExploreProfilesDocument, M as ExploreProfilesOrderByType, N as ExplorePublicationType, dz as ExplorePublicationsDocument, O as ExplorePublicationsOrderByType, dF as FeedDocument, P as FeedEventItemType, dI as FeedHighlightsDocument, eU as FollowDocument, Q as FollowModuleType, gK as FollowRevenuesDocument, eq as FollowersDocument, en as FollowingDocument, cE as FragmentActedNotification, aT as FragmentAmount, bh as FragmentAndCondition, cj as FragmentAnyPublicationInternal, aJ as FragmentApp, bz as FragmentArticleMetadataV3, bm as FragmentAudio, bw as FragmentAudioMetadataV3, aI as FragmentAuthChallengeResult, b6 as FragmentCanDecryptResponse, bE as FragmentCheckingInMetadataV3, cJ as FragmentClaimProfileWithHandleErrorResult, cW as FragmentClaimableProfilesResult, bg as FragmentCollectCondition, ca as FragmentComment, c7 as FragmentCommentFields, cw as FragmentCommentNotification, aH as FragmentCreateActOnOpenActionBroadcastItemResult, aG as FragmentCreateActOnOpenActionEip712TypedData, cN as FragmentCreateBlockProfilesBroadcastItemResult, cM as FragmentCreateChangeProfileManagersBroadcastItemResult, cP as FragmentCreateFollowBroadcastItemResult, co as FragmentCreateFrameEip712TypedData, d6 as FragmentCreateLegacyCollectBroadcastItemResult, d5 as FragmentCreateLegacyCollectEip712TypedData, cS as FragmentCreateLinkHandleToProfileBroadcastItemResult, d2 as FragmentCreateMomokaCommentBroadcastItemResult, d3 as FragmentCreateMomokaMirrorBroadcastItemResult, d1 as FragmentCreateMomokaPostBroadcastItemResult, cn as FragmentCreateMomokaPublicationResult, d4 as FragmentCreateMomokaQuoteBroadcastItemResult, c_ as FragmentCreateOnchainCommentBroadcastItemResult, c$ as FragmentCreateOnchainMirrorBroadcastItemResult, cZ as FragmentCreateOnchainPostBroadcastItemResult, d0 as FragmentCreateOnchainQuoteBroadcastItemResult, cL as FragmentCreateOnchainSetProfileMetadataBroadcastItemResult, cK as FragmentCreateProfileWithHandleErrorResult, cR as FragmentCreateSetFollowModuleBroadcastItemResult, cO as FragmentCreateUnblockProfilesBroadcastItemResult, cQ as FragmentCreateUnfollowBroadcastItemResult, cT as FragmentCreateUnlinkHandleFromProfileBroadcastItemResult, c1 as FragmentDegreesOfSeparationReferenceModuleSettings, aF as FragmentEip712TypedDataDomain, aE as FragmentEip712TypedDataField, bD as FragmentEmbedMetadataV3, bl as FragmentEncryptableAudio, bn as FragmentEncryptableAudioSet, bo as FragmentEncryptableImage, bp as FragmentEncryptableImageSet, br as FragmentEncryptableVideo, bt as FragmentEncryptableVideoSet, bd as FragmentEoaOwnershipCondition, aQ as FragmentErc20, bc as FragmentErc20OwnershipCondition, bB as FragmentEventMetadataV3, c9 as FragmentExplorePublication, aU as FragmentFeeFollowModuleSettings, ce as FragmentFeedHighlight, cd as FragmentFeedItem, aR as FragmentFiat, aS as FragmentFiatAmount, bf as FragmentFollowCondition, cF as FragmentFollowNotification, b$ as FragmentFollowOnlyReferenceModuleSettings, cg as FragmentFollowPaidAction, cp as FragmentFrameLensManagerSignatureResult, bA as FragmentGeoLocation, b1 as FragmentHandleInfo, aX as FragmentImage, by as FragmentImageMetadataV3, b9 as FragmentImageSet, cq as FragmentInvitedResult, cA as FragmentKnownCollectOpenActionResult, cf as FragmentLatestActed, bX as FragmentLegacyAaveFeeCollectModuleSettings, c2 as FragmentLegacyDegreesOfSeparationReferenceModuleSettings, bW as FragmentLegacyErc4626FeeCollectModuleSettings, bO as FragmentLegacyFeeCollectModuleSettings, c0 as FragmentLegacyFollowOnlyReferenceModuleSettings, bN as FragmentLegacyFreeCollectModuleSettings, bP as FragmentLegacyLimitedFeeCollectModuleSettings, bQ as FragmentLegacyLimitedTimedFeeCollectModuleSettings, bU as FragmentLegacyMultirecipientFeeCollectModuleSettings, bR as FragmentLegacyRevertCollectModuleSettings, bV as FragmentLegacySimpleCollectModuleSettings, bS as FragmentLegacyTimedFeeCollectModuleSettings, cm as FragmentLensProfileManagerRelayError, db as FragmentLensTransactionResult, bC as FragmentLinkMetadataV3, bM as FragmentLiveStreamMetadataV3, ba as FragmentMarketplaceMetadata, cG as FragmentMentionNotification, bK as FragmentMintMetadataV3, cb as FragmentMirror, cy as FragmentMirrorNotification, cr as FragmentModuleMetadata, cs as FragmentModuleMetadataResult, aK as FragmentMomokaInfo, bY as FragmentMultirecipientFeeCollectOpenActionSettings, aL as FragmentNetworkAddress, aZ as FragmentNftImage, bb as FragmentNftOwnershipCondition, cH as FragmentNotification, ch as FragmentOpenActionPaidAction, cD as FragmentOpenActionProfileActed, cC as FragmentOpenActionResult, aM as FragmentOptimisticStatusResult, bi as FragmentOrCondition, ci as FragmentPaginatedResultInfo, c5 as FragmentPost, b4 as FragmentProfile, cU as FragmentProfileActionHistory, a$ as FragmentProfileCoverSet, b3 as FragmentProfileFields, aO as FragmentProfileGuardianResult, cI as FragmentProfileManager, c4 as FragmentProfileMentioned, b0 as FragmentProfileMetadata, cx as FragmentProfileMirrorResult, aP as FragmentProfileOnchainIdentity, aN as FragmentProfileOperations, be as FragmentProfileOwnershipCondition, a_ as FragmentProfilePicture, aY as FragmentProfilePictureSet, cu as FragmentProfileReactedResult, d7 as FragmentProfileReactionResult, b2 as FragmentProfileStats, d8 as FragmentProfileWhoReactedResult, b8 as FragmentPublicationMarketplaceMetadataAttribute, bk as FragmentPublicationMetadataLitEncryption, bq as FragmentPublicationMetadataMediaAudio, bv as FragmentPublicationMetadataMediaImage, bu as FragmentPublicationMetadataMediaVideo, b7 as FragmentPublicationOperations, da as FragmentPublicationRevenue, b5 as FragmentPublicationStats, cY as FragmentPublicationValidateMetadataResult, c8 as FragmentQuote, c6 as FragmentQuoteFields, cz as FragmentQuoteNotification, ct as FragmentReactedResult, cc as FragmentReactionEvent, cv as FragmentReactionNotification, bT as FragmentRecipient, cl as FragmentRelayError, dc as FragmentRelayQueueResult, ck as FragmentRelaySuccess, cV as FragmentReservedClaimable, d9 as FragmentRevenueAggregate, aV as FragmentRevertFollowModuleSettings, bj as FragmentRootCondition, bZ as FragmentSimpleCollectOpenActionSettings, bL as FragmentSpaceMetadataV3, bI as FragmentStoryMetadataV3, cX as FragmentTagResult, bF as FragmentTextOnlyMetadataV3, bH as FragmentThreeDMetadataV3, bG as FragmentThreeDMetadataV3Asset, bJ as FragmentTransactionMetadataV3, aW as FragmentUnknownFollowModuleSettings, b_ as FragmentUnknownOpenActionModuleSettings, cB as FragmentUnknownOpenActionResult, c3 as FragmentUnknownReferenceModuleSettings, de as FragmentUserCurrentRateLimit, df as FragmentUserCurrentRateLimitResult, dd as FragmentUserSigNonces, bs as FragmentVideo, bx as FragmentVideoMetadataV3, R as FrameVerifySignatureResult, h4 as GenerateLensApiRelayAddressDocument, dT as HandleToAddressDocument, W as HiddenCommentsType, gt as HideCommentDocument, gb as HidePublicationDocument, X as IdKitPhoneVerifyWebhookResultStatusType, e0 as InviteDocument, dW as InvitedProfilesDocument, hg as LastLoggedInProfileDocument, dL as LatestPaidActionsDocument, gf as LegacyCollectDocument, Y as LensProfileManagerRelayErrorReasonType, Z as LensTransactionFailureType, gZ as LensTransactionStatusDocument, $ as LensTransactionStatusType, a0 as LimitType, fe as LinkHandleToProfileDocument, a1 as ManagedProfileVisibility, a2 as MarketplaceMetadataAttributeDisplayType, a3 as MetadataAttributeType, g7 as MirrorOnMomokaDocument, f$ as MirrorOnchainDocument, a4 as ModExplorePublicationType, e5 as ModuleMetadataDocument, a5 as ModuleType, a6 as MomokaValidatorError, et as MutualFollowersDocument, a7 as NftCollectionOwnersOrder, a8 as NftContractType, a9 as NotificationType, e8 as NotificationsDocument, aa as OpenActionCategoryType, ab as OpenActionModuleType, h7 as OwnedHandlesDocument, fo as PeerToPeerRecommendDocument, fq as PeerToPeerUnrecommendDocument, ac as PoapTokenLayerType, ad as PopularNftCollectionsOrder, g3 as PostOnMomokaDocument, fX as PostOnchainDocument, eC as ProfileActionHistoryDocument, ae as ProfileActionHistoryType, dZ as ProfileAlreadyInvitedDocument, eb as ProfileDocument, af as ProfileInterestTypes, eh as ProfileManagersDocument, ek as ProfileRecommendationsDocument, ag as ProfileReportingFraudSubreason, ah as ProfileReportingReason, ai as ProfileReportingSpamSubreason, ee as ProfilesDocument, ha as ProfilesManagedDocument, aj as ProfilesOrderBy, fE as PublicationBookmarksDocument, ak as PublicationContentWarningType, fs as PublicationDocument, al as PublicationMetadataLicenseType, am as PublicationMetadataMainFocusType, an as PublicationMetadataTransactionType, ao as PublicationReactionType, ap as PublicationReportingFraudSubreason, aq as PublicationReportingIllegalSubreason, ar as PublicationReportingReason, as as PublicationReportingSensitiveSubreason, at as PublicationReportingSpamSubreason, au as PublicationType, fv as PublicationsDocument, fy as PublicationsTagsDocument, g9 as QuoteOnMomokaDocument, g1 as QuoteOnchainDocument, av as ReferenceModuleType, gj as RefreshPublicationMetadataDocument, aw as RefreshPublicationMetadataResultType, ax as RelayErrorReasonType, gW as RelayQueuesDocument, ay as RelayRoleKey, eM as RemoveProfileInterestsDocument, gn as RemovePublicationBookmarkDocument, gz as RemoveReactionDocument, fm as ReportProfileDocument, gd as ReportPublicationDocument, gH as RevenueFromPublicationDocument, gE as RevenueFromPublicationsDocument, dx as RevokeAuthenticationDocument, gQ as SearchProfilesDocument, az as SearchPublicationType, gN as SearchPublicationsDocument, fa as SetFollowModuleDocument, eO as SetProfileMetadataDocument, dR as SignFrameActionDocument, aA as SupportedFiatType, aB as TagSortCriteriaType, aC as TriStateValue, gT as TxIdToTxHashDocument, T as TxStatus, eS as UnblockDocument, gr as UndoPublicationNotInterestedDocument, eW as UnfollowDocument, gv as UnhideCommentDocument, fg as UnlinkHandleFromProfileDocument, U as UnspecifiedError, hj as UserRateLimitDocument, hd as UserSigNoncesDocument, fB as ValidatePublicationMetadataDocument, V as ValidationError, dv as WalletAuthenticationToProfileAuthenticationDocument, ew as WhoActedOnPublicationDocument, ez as WhoHaveBlockedDocument, gB as WhoReactedPublicationDocument, aD as WorldcoinPhoneVerifyType, m as countAnyPendingCollect, l as countAnyPendingCollectFor, n as countAnyPendingCreateCommentFor, o as countAnyPendingCreateMirrorFor, p as countAnyPendingCreateQuoteFor, t as countPendingFollowFor, v as countPendingUnfollowFor, w as getPendingLinkHandleTxFor, x as getPendingUnlinkHandleTxFor, z as graphQLResultHasUnauthenticatedError, s as hasPendingBlockForProfile, q as hasPendingUnblockForProfile, hm as isCursor, B as isServerError, j as isUnauthorizedServerError, y as isValidationApolloError, r as recentTransactionsVar, dh as useActOnOpenAction, eL as useAddProfileInterests, gm as useAddPublicationBookmark, gq as useAddPublicationNotInterested, gy as useAddReaction, ds as useAuthAuthenticate, dl as useAuthChallenge, dm as useAuthChallengeLazyQuery, du as useAuthRefresh, dp as useAuthVerify, dq as useAuthVerifyLazyQuery, eR as useBlock, h3 as useBroadcastOnMomoka, h1 as useBroadcastOnchain, eJ as useClaimProfileWithHandle, eG as useClaimableProfiles, eH as useClaimableProfilesLazyQuery, g6 as useCommentOnMomoka, f_ as useCommentOnchain, dj as useCreateActOnOpenActionTypedData, f3 as useCreateBlockProfilesTypedData, f1 as useCreateChangeProfileManagersTypedData, f7 as useCreateFollowTypedData, dP as useCreateFrameTypedData, dQ as useCreateFrameTypedDataLazyQuery, gi as useCreateLegacyCollectTypedData, fj as useCreateLinkHandleToProfileTypedData, fS as useCreateMomokaCommentTypedData, fU as useCreateMomokaMirrorTypedData, fQ as useCreateMomokaPostTypedData, fW as useCreateMomokaQuoteTypedData, fK as useCreateOnchainCommentTypedData, fM as useCreateOnchainMirrorTypedData, fI as useCreateOnchainPostTypedData, fO as useCreateOnchainQuoteTypedData, e$ as useCreateOnchainSetProfileMetadataTypedData, fd as useCreateSetFollowModuleTypedData, f5 as useCreateUnblockProfilesTypedData, f9 as useCreateUnfollowTypedData, fl as useCreateUnlinkHandleFromProfileTypedData, e3 as useCurrencies, e4 as useCurrenciesLazyQuery, eZ as useDismissRecommendedProfiles, dD as useExploreProfiles, dE as useExploreProfilesLazyQuery, dA as useExplorePublications, dB as useExplorePublicationsLazyQuery, dG as useFeed, dJ as useFeedHighlights, dK as useFeedHighlightsLazyQuery, dH as useFeedLazyQuery, eV as useFollow, gL as useFollowRevenues, gM as useFollowRevenuesLazyQuery, er as useFollowers, es as useFollowersLazyQuery, eo as useFollowing, ep as useFollowingLazyQuery, h5 as useGenerateLensApiRelayAddress, h6 as useGenerateLensApiRelayAddressLazyQuery, dU as useHandleToAddress, dV as useHandleToAddressLazyQuery, gu as useHideComment, gc as useHidePublication, e1 as useInvite, dX as useInvitedProfiles, dY as useInvitedProfilesLazyQuery, hh as useLastLoggedInProfile, hi as useLastLoggedInProfileLazyQuery, dM as useLatestPaidActions, dN as useLatestPaidActionsLazyQuery, gg as useLegacyCollect, g_ as useLensTransactionStatus, g$ as useLensTransactionStatusLazyQuery, ff as useLinkHandleToProfile, g8 as useMirrorOnMomoka, g0 as useMirrorOnchain, e6 as useModuleMetadata, e7 as useModuleMetadataLazyQuery, eu as useMutualFollowers, ev as useMutualFollowersLazyQuery, e9 as useNotifications, ea as useNotificationsLazyQuery, h8 as useOwnedHandles, h9 as useOwnedHandlesLazyQuery, fp as usePeerToPeerRecommend, fr as usePeerToPeerUnrecommend, g4 as usePostOnMomoka, fY as usePostOnchain, ec as useProfile, eD as useProfileActionHistory, eE as useProfileActionHistoryLazyQuery, d_ as useProfileAlreadyInvited, d$ as useProfileAlreadyInvitedLazyQuery, ed as useProfileLazyQuery, ei as useProfileManagers, ej as useProfileManagersLazyQuery, el as useProfileRecommendations, em as useProfileRecommendationsLazyQuery, ef as useProfiles, eg as useProfilesLazyQuery, hb as useProfilesManaged, hc as useProfilesManagedLazyQuery, ft as usePublication, fF as usePublicationBookmarks, fG as usePublicationBookmarksLazyQuery, fu as usePublicationLazyQuery, fw as usePublications, fx as usePublicationsLazyQuery, fz as usePublicationsTags, fA as usePublicationsTagsLazyQuery, ga as useQuoteOnMomoka, g2 as useQuoteOnchain, u as useRecentTransactionsVar, gk as useRefreshPublicationMetadata, gX as useRelayQueues, gY as useRelayQueuesLazyQuery, eN as useRemoveProfileInterests, go as useRemovePublicationBookmark, gA as useRemoveReaction, fn as useReportProfile, ge as useReportPublication, gI as useRevenueFromPublication, gJ as useRevenueFromPublicationLazyQuery, gF as useRevenueFromPublications, gG as useRevenueFromPublicationsLazyQuery, dy as useRevokeAuthentication, gR as useSearchProfiles, gS as useSearchProfilesLazyQuery, gO as useSearchPublications, gP as useSearchPublicationsLazyQuery, fb as useSetFollowModule, eP as useSetProfileMetadata, dS as useSignFrameAction, gU as useTxIdToTxHash, gV as useTxIdToTxHashLazyQuery, eT as useUnblock, gs as useUndoPublicationNotInterested, eX as useUnfollow, gw as useUnhideComment, fh as useUnlinkHandleFromProfile, hk as useUserRateLimit, hl as useUserRateLimitLazyQuery, he as useUserSigNonces, hf as useUserSigNoncesLazyQuery, fC as useValidatePublicationMetadata, fD as useValidatePublicationMetadataLazyQuery, dw as useWalletAuthenticationToProfileAuthentication, ex as useWhoActedOnPublication, ey as useWhoActedOnPublicationLazyQuery, eA as useWhoHaveBlocked, eB as useWhoHaveBlockedLazyQuery, gC as useWhoReactedPublication, gD as useWhoReactedPublicationLazyQuery } from './unsupportedIterableToArray-56a65d61.esm.js';
import { setContext } from '@apollo/client/link/context';
import { Observable, maybe } from '@apollo/client/utilities';
import { ChainType, erc20, Amount, fiat, omitDeep, assertNever, invariant, never } from '@lens-protocol/shared-kernel';
import { TransactionKind } from '@lens-protocol/domain/entities';
import { FollowPolicyType } from '@lens-protocol/domain/use-cases/profile';
import { ReferencePolicyType } from '@lens-protocol/domain/use-cases/publications';

function semVer(value) {
  // for now just asserts the type, in future it will enforce a format
  return value;
}

var LENS_API_MINIMAL_SUPPORTED_VERSION = semVer('2.0.0');

function chainType(chainId) {
  switch (chainId) {
    case 1:
    case 5:
      return ChainType.ETHEREUM;
    case 137:
    case 80001:
    case 80002:
      return ChainType.POLYGON;
    default:
      throw new Error("Not supported chainId: ".concat(chainId));
  }
}

/**
 * Convert an Amount returned from the Lens API to an Erc20Amount
 *
 * @param from - Amount returned from the Lens API
 * @returns Erc20Amount instance
 */
function erc20Amount(from) {
  var asset = from.asset,
    value = from.value;
  var erc20Asset = erc20({
    name: asset.name,
    decimals: asset.decimals,
    symbol: asset.symbol,
    address: asset.contract.address,
    chainType: chainType(asset.contract.chainId)
  });
  return Amount.erc20(erc20Asset, value);
}

/**
 * Convert a FiatAmount returned from the Lens API to a FiatAmount
 *
 * @param from - FiatAmount returned from the Lens API
 * @returns FiatAmount instance
 */
function fiatAmount(from) {
  var asset = from.asset,
    value = from.value;
  var fiatAsset = fiat({
    name: asset.name,
    symbol: asset.symbol
  });
  return Amount.fiat(fiatAsset, value);
}

var ModulesWithKnownCollectCapability = {
  LegacyAaveFeeCollectModuleSettings: true,
  LegacyERC4626FeeCollectModuleSettings: true,
  LegacyFeeCollectModuleSettings: true,
  LegacyLimitedFeeCollectModuleSettings: true,
  LegacyLimitedTimedFeeCollectModuleSettings: true,
  LegacyMultirecipientFeeCollectModuleSettings: true,
  LegacyTimedFeeCollectModuleSettings: true,
  LegacySimpleCollectModuleSettings: true,
  LegacyFreeCollectModuleSettings: true,
  MultirecipientFeeCollectOpenActionSettings: true,
  SimpleCollectOpenActionSettings: true,
  LegacyRevertCollectModuleSettings: false,
  UnknownOpenActionModuleSettings: false
};

/**
 * Given an open action module settings, determine if it is a collect module
 *
 * @experimental This function is not yet stable and may be removed in a future release
 */
function isCollectModuleSettings(settings) {
  var _ModulesWithKnownColl;
  return (_ModulesWithKnownColl = ModulesWithKnownCollectCapability[settings.__typename]) !== null && _ModulesWithKnownColl !== void 0 ? _ModulesWithKnownColl : false;
}

/**
 * Given a publication, find the collect module settings if any
 *
 * @experimental This function is not yet stable and may be removed in a future release
 */
function findCollectModuleSettings(collectable) {
  var _collectable$openActi, _collectable$openActi2;
  return (_collectable$openActi = (_collectable$openActi2 = collectable.openActionModules) === null || _collectable$openActi2 === void 0 ? void 0 : _collectable$openActi2.find(isCollectModuleSettings)) !== null && _collectable$openActi !== void 0 ? _collectable$openActi : null;
}
function isMultirecipientCollectFee(fee) {
  return 'recipients' in fee;
}
function isFreeCollectModuleSettings(module) {
  return module.__typename === 'LegacyFreeCollectModuleSettings';
}
function isMultirecipientCollectModuleSettings(module) {
  return module.__typename === 'MultirecipientFeeCollectOpenActionSettings' || module.__typename === 'LegacyMultirecipientFeeCollectModuleSettings';
}
function buildCollectFee(module) {
  if (isFreeCollectModuleSettings(module)) return undefined;
  var erc20 = erc20Amount(module.amount);
  if (erc20.isZero()) return undefined;
  var shared = {
    amount: erc20,
    rate: module.amount.rate ? fiatAmount(module.amount.rate) : undefined,
    referralFee: module.referralFee
  };
  if (isMultirecipientCollectModuleSettings(module)) {
    return _objectSpread2(_objectSpread2({}, shared), {}, {
      recipients: module.recipients
    });
  }
  return _objectSpread2(_objectSpread2({}, shared), {}, {
    recipient: module.recipient
  });
}

/**
 * Resolve API's {@link OpenActionModuleSettings} to more user friendly {@link CollectPolicy}.
 *
 * @param collectable - The {@link PrimaryPublication} to resolve {@link CollectPolicy} from
 * @returns {@link CollectPolicy}
 */
function resolveCollectPolicy(collectable) {
  var module = findCollectModuleSettings(collectable);
  if (!module) return null;
  var fee = buildCollectFee(module);
  var shared = {
    followerOnly: module.followerOnly,
    contract: module.contract
  };
  switch (module.__typename) {
    case 'LegacyAaveFeeCollectModuleSettings':
    case 'LegacyERC4626FeeCollectModuleSettings':
      {
        return _objectSpread2(_objectSpread2({}, shared), {}, {
          collectNft: null,
          collectLimit: module.collectLimit,
          endsAt: module.endsAt,
          fee: fee
        });
      }
    case 'LegacyLimitedFeeCollectModuleSettings':
    case 'LegacyLimitedTimedFeeCollectModuleSettings':
      {
        return _objectSpread2(_objectSpread2({}, shared), {}, {
          collectNft: module.collectNft,
          collectLimit: module.collectLimit,
          endsAt: null,
          fee: fee
        });
      }
    case 'LegacyFeeCollectModuleSettings':
    case 'LegacyTimedFeeCollectModuleSettings':
      {
        return _objectSpread2(_objectSpread2({}, shared), {}, {
          collectNft: module.collectNft,
          collectLimit: null,
          endsAt: null,
          fee: fee
        });
      }
    case 'LegacyFreeCollectModuleSettings':
      return _objectSpread2(_objectSpread2({}, shared), {}, {
        collectNft: module.collectNft,
        collectLimit: null,
        endsAt: null
      });
    case 'LegacyMultirecipientFeeCollectModuleSettings':
    case 'MultirecipientFeeCollectOpenActionSettings':
    case 'LegacySimpleCollectModuleSettings':
    case 'SimpleCollectOpenActionSettings':
      {
        return _objectSpread2(_objectSpread2({}, shared), {}, {
          collectNft: module.collectNft,
          collectLimit: module.collectLimit,
          endsAt: module.endsAt,
          fee: fee
        });
      }
    default:
      return null;
  }
}

function omitTypename(target) {
  return omitDeep(target, '__typename');
}

var publicationIdRegExp = /^0x[a-f0-9]{2,}-0x[a-f0-9]{2,}/i;

/**
 * @group Helpers
 */
function isPublicationId(value) {
  return publicationIdRegExp.test(value);
}

/**
 * @group Helpers
 */
function isPostPublication(publication) {
  return publication.__typename === 'Post';
}

/**
 * @group Helpers
 */
function isCommentPublication(publication) {
  return publication.__typename === 'Comment';
}

/**
 * @group Helpers
 */
function isMirrorPublication(publication) {
  return publication.__typename === 'Mirror';
}

/**
 * @group Helpers
 */
function isQuotePublication(publication) {
  return publication.__typename === 'Quote';
}

/**
 * @group Helpers
 */
function isPrimaryPublication(publication) {
  return isCommentPublication(publication) || isPostPublication(publication) || isQuotePublication(publication);
}

function resolveTokenAllowanceRequestForCollect(publication, limit) {
  var module = findCollectModuleSettings(publication);
  invariant(module, "Publication ".concat(publication.id, " has no collect module"));
  switch (module.__typename) {
    case 'LegacyAaveFeeCollectModuleSettings':
    case 'LegacyERC4626FeeCollectModuleSettings':
    case 'LegacyFeeCollectModuleSettings':
    case 'LegacyLimitedFeeCollectModuleSettings':
    case 'LegacyLimitedTimedFeeCollectModuleSettings':
    case 'LegacyMultirecipientFeeCollectModuleSettings':
    case 'LegacySimpleCollectModuleSettings':
    case 'LegacyTimedFeeCollectModuleSettings':
    case 'MultirecipientFeeCollectOpenActionSettings':
    case 'SimpleCollectOpenActionSettings':
      return {
        kind: TransactionKind.APPROVE_MODULE,
        amount: erc20Amount(module.amount),
        limit: limit,
        spender: module.contract.address
      };
    default:
      never("Unsupported collect module type ".concat(module.__typename));
  }
}
function resolveTokenAllowanceRequestForFollow(profile, limit) {
  invariant(profile.followModule, "Profile ".concat(profile.id, " has no follow module"));
  switch (profile.followModule.__typename) {
    case 'FeeFollowModuleSettings':
      return {
        kind: TransactionKind.APPROVE_MODULE,
        amount: erc20Amount(profile.followModule.amount),
        limit: limit,
        spender: profile.followModule.contract.address
      };
    default:
      never("Unsupported follow module type ".concat(profile.followModule.__typename));
  }
}
function resolveTokenAllowanceRequest(item, limit) {
  switch (item.__typename) {
    case 'Mirror':
      return resolveTokenAllowanceRequestForCollect(item.mirrorOn, limit);
    case 'Comment':
    case 'Post':
    case 'Quote':
      return resolveTokenAllowanceRequestForCollect(item, limit);
    case 'Profile':
      return resolveTokenAllowanceRequestForFollow(item, limit);
    default:
      assertNever(item);
  }
}

/**
 * Resolve API {@link FollowModule} to more user friendly {@link FollowPolicy}.
 *
 * @param args - The {@link Profile} to resolve {@link FollowPolicy} from
 * @returns {@link FollowPolicy}
 */
function resolveFollowPolicy(_ref) {
  var _ref2;
  var followModule = _ref.followModule;
  if (followModule === null) {
    return {
      type: FollowPolicyType.ANYONE
    };
  }
  switch (followModule.__typename) {
    case 'FeeFollowModuleSettings':
      return {
        type: FollowPolicyType.CHARGE,
        amount: erc20Amount(followModule.amount),
        rate: followModule.amount.rate ? fiatAmount(followModule.amount.rate) : null,
        recipient: followModule.recipient,
        contractAddress: followModule.contract.address,
        chainId: followModule.contract.chainId
      };
    case 'RevertFollowModuleSettings':
      return {
        type: FollowPolicyType.NO_ONE,
        contractAddress: followModule.contract.address,
        chainId: followModule.contract.chainId
      };
    case 'UnknownFollowModuleSettings':
      return {
        type: FollowPolicyType.UNKNOWN,
        contractAddress: followModule.contract.address,
        chainId: followModule.contract.chainId,
        initializeCalldata: followModule.initializeCalldata,
        initializeResultData: (_ref2 = followModule.initializeResultData) !== null && _ref2 !== void 0 ? _ref2 : undefined,
        signlessApproved: followModule.signlessApproved,
        sponsoredApproved: followModule.sponsoredApproved,
        verified: followModule.verified
      };
  }
}

/**
 * Given a {@link FollowPolicyConfig} resolve it to a {@link FollowModuleInput} to be used by the API.
 *
 * @internal
 */
function resolveFollowModuleInput(policy) {
  switch (policy.type) {
    case FollowPolicyType.CHARGE:
      return {
        feeFollowModule: {
          amount: {
            currency: policy.amount.asset.address,
            value: policy.amount.toSignificantDigits()
          },
          recipient: policy.recipient
        }
      };
    case FollowPolicyType.ANYONE:
      return {
        freeFollowModule: true
      };
    case FollowPolicyType.NO_ONE:
      return {
        revertFollowModule: true
      };
    case FollowPolicyType.UNKNOWN:
      return {
        unknownFollowModule: {
          address: policy.address,
          data: policy.data
        }
      };
  }
}

/**
 * Resolve API {@link ReferenceModule} to more user friendly {@link ReferencePolicy}.
 *
 * @example
 * ```ts
 * const policy = resolveReferencePolicy(publication);
 *
 * switch (policy.type) {
 *   case ReferencePolicyType.ANYONE:
 *     // ...
 *   case ReferencePolicyType.DEGREES_OF_SEPARATION:
 *     // ...
 *   case ReferencePolicyType.FOLLOWERS_ONLY:
 *     // ...
 *   case ReferencePolicyType.NO_ONE:
 *     // ...
 *   case ReferencePolicyType.UNKNOWN:
 *     // ...
 * }
 * ```
 *
 * @param publication - The {@link AnyPublication} to resolve {@link ReferencePolicy} from
 * @returns {@link ReferencePolicy}
 */
function resolveReferencePolicy(publication) {
  var _target$referenceModu;
  var target = publication.__typename === 'Mirror' ? publication.mirrorOn : publication;
  if (target.momoka !== null || target.referenceModule === null) {
    return {
      type: ReferencePolicyType.ANYONE
    };
  }
  switch ((_target$referenceModu = target.referenceModule) === null || _target$referenceModu === void 0 ? void 0 : _target$referenceModu.__typename) {
    case 'DegreesOfSeparationReferenceModuleSettings':
    case 'LegacyDegreesOfSeparationReferenceModuleSettings':
      if (target.referenceModule.degreesOfSeparation === 0) {
        return {
          type: ReferencePolicyType.NO_ONE
        };
      }
      return {
        type: ReferencePolicyType.DEGREES_OF_SEPARATION,
        degreesOfSeparation: target.referenceModule.degreesOfSeparation,
        commentsRestricted: target.referenceModule.commentsRestricted,
        mirrorsRestricted: target.referenceModule.mirrorsRestricted,
        quotesRestricted: target.referenceModule.__typename === 'DegreesOfSeparationReferenceModuleSettings' ? target.referenceModule.quotesRestricted : false,
        sourceProfileId: target.referenceModule.__typename === 'DegreesOfSeparationReferenceModuleSettings' ? target.referenceModule.sourceProfileId : publication.by.id
      };
    case 'FollowOnlyReferenceModuleSettings':
    case 'LegacyFollowOnlyReferenceModuleSettings':
      return {
        type: ReferencePolicyType.FOLLOWERS_ONLY
      };
    case 'UnknownReferenceModuleSettings':
      return {
        type: ReferencePolicyType.UNKNOWN,
        contractAddress: target.referenceModule.contract.address,
        chainId: target.referenceModule.contract.chainId,
        initializeCalldata: target.referenceModule.initializeCalldata,
        initializeResultData: target.referenceModule.initializeResultData,
        signlessApproved: target.referenceModule.signlessApproved,
        sponsoredApproved: target.referenceModule.sponsoredApproved,
        verified: target.referenceModule.verified
      };
  }
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var RequestsQueue = /*#__PURE__*/function () {
  function RequestsQueue() {
    _classCallCheck(this, RequestsQueue);
    _defineProperty(this, "requests", new Map());
  }
  _createClass(RequestsQueue, [{
    key: "enqueue",
    value: function enqueue(request) {
      this.requests.set(request.operation, request);
    }
  }, {
    key: "dequeue",
    value: function dequeue(operation) {
      this.requests["delete"](operation);
    }
  }, {
    key: "retryAll",
    value: function retryAll() {
      var _iterator = _createForOfIteratorHelper(this.requests.values()),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var request = _step.value;
          request.forward(request.operation).subscribe(request.observer);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "failWith",
    value: function failWith(result) {
      var _iterator2 = _createForOfIteratorHelper(this.requests.values()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _request$observer$nex, _request$observer;
          var request = _step2.value;
          (_request$observer$nex = (_request$observer = request.observer).next) === null || _request$observer$nex === void 0 || _request$observer$nex.call(_request$observer, result);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }]);
  return RequestsQueue;
}();
var RefreshTokensLink = /*#__PURE__*/function (_ApolloLink) {
  _inherits(RefreshTokensLink, _ApolloLink);
  var _super = _createSuper(RefreshTokensLink);
  function RefreshTokensLink(accessTokenStorage) {
    var _this;
    _classCallCheck(this, RefreshTokensLink);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "refreshing", false);
    _defineProperty(_assertThisInitialized(_this), "queue", new RequestsQueue());
    _this.accessTokenStorage = accessTokenStorage;
    return _this;
  }
  _createClass(RefreshTokensLink, [{
    key: "request",
    value: function request(operation, forward) {
      var _this2 = this;
      invariant(forward, "".concat(RefreshTokensLink.name, " is a non-terminating link and should not be the last in the composed chain"));
      return new Observable(function (observer) {
        // this if is extremely difficult to test with standard Apollo Client mocks
        if (_this2.refreshing) {
          _this2.queue.enqueue({
            operation: operation,
            forward: forward,
            observer: observer
          });
          return function () {
            _this2.queue.dequeue(operation);
          };
        }
        var subscription = forward(operation).subscribe({
          next: function () {
            var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(result) {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    if (!_this2.refreshing) {
                      _context.next = 3;
                      break;
                    }
                    _this2.queue.enqueue({
                      operation: operation,
                      forward: forward,
                      observer: observer
                    });
                    return _context.abrupt("return");
                  case 3:
                    observer.next(result);
                  case 4:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            function next(_x) {
              return _next.apply(this, arguments);
            }
            return next;
          }(),
          error: function () {
            var _error2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_error) {
              var refresh;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    if (!isUnauthorizedServerError(_error)) {
                      _context2.next = 14;
                      break;
                    }
                    _this2.queue.enqueue({
                      operation: operation,
                      forward: forward,
                      observer: observer
                    });
                    if (!_this2.refreshing) {
                      _context2.next = 4;
                      break;
                    }
                    return _context2.abrupt("return");
                  case 4:
                    _this2.refreshing = true;
                    _context2.next = 7;
                    return _this2.accessTokenStorage.refreshToken();
                  case 7:
                    refresh = _context2.sent;
                    _this2.refreshing = false;
                    if (!refresh.isSuccess()) {
                      _context2.next = 12;
                      break;
                    }
                    _this2.queue.retryAll();
                    return _context2.abrupt("return");
                  case 12:
                    _this2.queue.failWith(_error.result);
                    return _context2.abrupt("return");
                  case 14:
                    observer.error(_error);
                  case 15:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }));
            function error(_x2) {
              return _error2.apply(this, arguments);
            }
            return error;
          }(),
          complete: function complete() {
            // if refreshing, do not close the observer
            if (_this2.refreshing) {
              return;
            }
            observer.complete();
          }
        });
        return function () {
          subscription.unsubscribe();
        };
      });
    }
  }]);
  return RefreshTokensLink;
}(ApolloLink);
function createAuthLink(_ref) {
  var accessTokenStorage = _ref.accessTokenStorage;
  var tokenRefreshLink = new RefreshTokensLink(accessTokenStorage);
  var authHeaderLink = setContext(function (_, prevContext) {
    var token = accessTokenStorage.getAccessToken();
    return _objectSpread2(_objectSpread2({}, prevContext), {}, {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      headers: _objectSpread2(_objectSpread2({}, 'headers' in prevContext && prevContext.headers), token && {
        Authorization: "Bearer ".concat(token)
      })
    });
  });
  return from([tokenRefreshLink, authHeaderLink]);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

var backupFetch = maybe(function () {
  return fetch;
});
function wrapFetch(logger, supportedVersion, fetch) {
  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var response,
      apiVersion,
      _apiVersion$split,
      _apiVersion$split2,
      apiMajor,
      apiMinor,
      _supportedVersion$spl,
      _supportedVersion$spl2,
      clientMajor,
      clientMinor,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return fetch.apply(void 0, _args);
        case 2:
          response = _context.sent;
          if (!(response.status === 200)) {
            _context.next = 17;
            break;
          }
          apiVersion = response.headers.get('x-api-version');
          if (!apiVersion) {
            _context.next = 17;
            break;
          }
          if (!(apiVersion < supportedVersion)) {
            _context.next = 9;
            break;
          }
          logger.warn("The Lens API ".concat(apiVersion, " is outside of the Lens SDK support range ^").concat(supportedVersion));
          return _context.abrupt("return", response);
        case 9:
          _apiVersion$split = apiVersion.split('.'), _apiVersion$split2 = _slicedToArray(_apiVersion$split, 2), apiMajor = _apiVersion$split2[0], apiMinor = _apiVersion$split2[1];
          _supportedVersion$spl = supportedVersion.split('.'), _supportedVersion$spl2 = _slicedToArray(_supportedVersion$spl, 2), clientMajor = _supportedVersion$spl2[0], clientMinor = _supportedVersion$spl2[1];
          if (!(apiMajor && clientMajor && apiMajor > clientMajor)) {
            _context.next = 14;
            break;
          }
          logger.warn("The Lens API ".concat(apiVersion, " is NOT supported by the Lens SDK support range ^").concat(supportedVersion, ". Update your Lens SDK client to the latest version."));
          return _context.abrupt("return", response);
        case 14:
          if (!(apiMinor && clientMinor && apiMinor > clientMinor)) {
            _context.next = 17;
            break;
          }
          logger.info("The Lens API ".concat(apiVersion, " is ahead of the Lens SDK support range ^").concat(supportedVersion, ". Check for a new version of the Lens SDK client, if available."));
          return _context.abrupt("return", response);
        case 17:
          return _context.abrupt("return", response);
        case 18:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
}
function createLensLink(_ref2) {
  var _ref3, _ref4;
  var preferredFetch = _ref2.fetch,
    logger = _ref2.logger,
    origin = _ref2.origin,
    supportedVersion = _ref2.supportedVersion,
    uri = _ref2.uri;
  // see https://github.com/apollographql/apollo-client/blob/4bf773f64b78f15419f07676f434fa33e058404e/src/link/http/createHttpLink.ts#L160-L165
  var currentFetch = (_ref3 = (_ref4 = preferredFetch !== null && preferredFetch !== void 0 ? preferredFetch : maybe(function () {
    return fetch;
  })) !== null && _ref4 !== void 0 ? _ref4 : backupFetch) !== null && _ref3 !== void 0 ? _ref3 : never();
  return new HttpLink({
    uri: uri,
    fetch: wrapFetch(logger, supportedVersion, currentFetch),
    headers: _objectSpread2({}, origin && {
      origin: origin
    })
  });
}

var sessionDataVar = makeVar(null);
function getSessionData() {
  return sessionDataVar();
}
function useSessionDataVar() {
  return useReactiveVar(sessionDataVar);
}
function resetSessionData() {
  sessionDataVar(null);
}
function updateSessionData(session) {
  sessionDataVar(session);
}

function createLensApolloClient(_ref) {
  var accessTokenStorage = _ref.accessTokenStorage,
    uri = _ref.uri,
    logger = _ref.logger,
    pollingInterval = _ref.pollingInterval,
    connectToDevTools = _ref.connectToDevTools;
  var authLink = createAuthLink({
    accessTokenStorage: accessTokenStorage
  });
  var httpLink = createLensLink({
    logger: logger,
    supportedVersion: LENS_API_MINIMAL_SUPPORTED_VERSION,
    uri: uri
  });
  return new SafeApolloClient({
    connectToDevTools: connectToDevTools,
    cache: createLensCache(),
    link: from([authLink, httpLink]),
    pollingInterval: pollingInterval,
    version: LENS_API_MINIMAL_SUPPORTED_VERSION
  });
}
function createAuthApolloClient(_ref2) {
  var logger = _ref2.logger,
    origin = _ref2.origin,
    uri = _ref2.uri;
  return new SafeApolloClient({
    cache: createLensCache(),
    link: createLensLink({
      logger: logger,
      origin: origin,
      supportedVersion: LENS_API_MINIMAL_SUPPORTED_VERSION,
      uri: uri
    }),
    version: LENS_API_MINIMAL_SUPPORTED_VERSION
  });
}

export { chainType, createAuthApolloClient, createLensApolloClient, erc20Amount, fiatAmount, findCollectModuleSettings, getSessionData, isCollectModuleSettings, isCommentPublication, isMirrorPublication, isMultirecipientCollectFee, isPostPublication, isPrimaryPublication, isPublicationId, isQuotePublication, omitTypename, resetSessionData, resolveCollectPolicy, resolveFollowModuleInput, resolveFollowPolicy, resolveReferencePolicy, resolveTokenAllowanceRequest, sessionDataVar, updateSessionData, useSessionDataVar };
