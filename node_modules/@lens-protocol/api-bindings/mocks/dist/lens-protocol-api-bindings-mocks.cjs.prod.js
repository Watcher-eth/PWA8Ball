'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var unsupportedIterableToArray = require('../../dist/unsupportedIterableToArray-262e2bcd.cjs.prod.js');
var testing = require('@apollo/client/testing');
var graphql = require('graphql');
var faker = require('@faker-js/faker');
var mocks = require('@lens-protocol/domain/mocks');
var sharedKernel = require('@lens-protocol/shared-kernel');
var mocks$1 = require('@lens-protocol/shared-kernel/mocks');
var jestMockExtended = require('jest-mock-extended');
require('@apollo/client');
require('@apollo/client/utilities');
require('@lens-protocol/domain/entities');
require('@lens-protocol/domain/use-cases/publications');

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return unsupportedIterableToArray._arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || unsupportedIterableToArray._unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function mockLensApolloClient() {
  var mocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return new unsupportedIterableToArray.SafeApolloClient({
    cache: unsupportedIterableToArray.createLensCache(),
    link: testing.mockSingleLink.apply(void 0, _toConsumableArray(mocks)).setOnError(function (error) {
      throw error;
    }),
    pollingInterval: 1 // FAST
  });
}
function createGraphQLError(_ref) {
  var code = _ref.code,
    _ref$message = _ref.message,
    message = _ref$message === void 0 ? 'No pings please!' : _ref$message;
  return new graphql.GraphQLError(message, {
    extensions: {
      code: code
    }
  });
}
function createValidationGraphQLError() {
  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'No pings please!';
  // why GraphQLError and not ApolloError? Cause GraphQLError responses are rehydrated by ApolloClient
  // into ApolloError instances, and this dummy error is used to test the error logic of SafeApolloClient
  // which has a proper HttpLink instance (instead of mockSingleLink) that will rehydrate the error.
  return createGraphQLError({
    message: message,
    code: unsupportedIterableToArray.ApolloServerErrorCode.GRAPHQL_VALIDATION_FAILED
  });
}
function mockValidationErrorResponse(document) {
  return {
    request: {
      query: document
    },
    result: {
      errors: [createValidationGraphQLError()]
    }
  };
}
function mockGenericSuccessResponse(document, data) {
  return {
    request: {
      query: document
    },
    result: {
      data: data
    }
  };
}
function mockGenericErrorResponse(document) {
  return {
    request: {
      query: document
    },
    result: {
      errors: [createGraphQLError({
        message: 'No pings please!',
        code: unsupportedIterableToArray.ApolloServerErrorCode.INTERNAL_SERVER_ERROR
      })]
    }
  };
}
function createHttpJsonResponse(status, body) {
  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return new Response(JSON.stringify(body), {
    status: status,
    headers: unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, headers), {}, {
      'Content-Type': 'application/json'
    })
  });
}
function createUnauthenticatedHttpResponse() {
  return createHttpJsonResponse(401, {
    data: null,
    errors: [createGraphQLError({
      message: 'Authentication required',
      code: 'UNAUTHENTICATED'
    })]
  });
}

function mockLensCache() {
  return unsupportedIterableToArray.createLensCache();
}
function mockTransactionState(partial) {
  return unsupportedIterableToArray._objectSpread2({
    id: faker.faker.datatype.uuid(),
    status: unsupportedIterableToArray.TxStatus.PENDING,
    request: mocks.mockCreatePostRequest()
  }, partial);
}

function mockNetworkAddressFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    address: mocks$1.mockEvmAddress(),
    chainId: 1
  }, overrides), {}, {
    __typename: 'NetworkAddress'
  });
}
function mockErc20FragmentFrom(erc20) {
  return {
    __typename: 'Erc20',
    name: erc20.name,
    symbol: erc20.symbol,
    decimals: erc20.decimals,
    contract: mockNetworkAddressFragment({
      address: erc20.address,
      chainId: erc20.chainType === sharedKernel.ChainType.ETHEREUM ? 1 : 137
    })
  };
}
function mockAmountFragmentFrom(amount) {
  return {
    __typename: 'Amount',
    asset: mockErc20FragmentFrom(amount.asset),
    value: amount.toSignificantDigits(),
    rate: null
  };
}
function mockOptimisticStatusResultFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    value: true,
    isFinalisedOnchain: false
  }, overrides), {}, {
    __typename: 'OptimisticStatusResult'
  });
}
function mockProfileOperationsFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockProfileId(),
    canBlock: false,
    canUnblock: false,
    canFollow: unsupportedIterableToArray.TriStateValue.Unknown,
    canUnfollow: false,
    isBlockedByMe: mockOptimisticStatusResultFragment(),
    isFollowedByMe: mockOptimisticStatusResultFragment(),
    isFollowingMe: mockOptimisticStatusResultFragment()
  }, overrides), {}, {
    __typename: 'ProfileOperations'
  });
}
function mockProfileOnchainIdentityFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    proofOfHumanity: false,
    ens: null,
    sybilDotOrg: {
      verified: true,
      source: {
        twitter: {
          handle: null
        }
      }
    },
    worldcoin: {
      isHuman: false
    }
  }, overrides), {}, {
    __typename: 'ProfileOnchainIdentity'
  });
}
function mockHandleInfo() {
  var localName = faker.faker.internet.userName();
  var namespace = faker.faker.internet.domainWord();
  return {
    id: "".concat(namespace, "/").concat(localName, "}"),
    fullHandle: "".concat(localName, "/").concat(namespace),
    namespace: namespace,
    localName: localName,
    ownedBy: mocks$1.mockEvmAddress(),
    suggestedFormatted: {
      full: "".concat(namespace, "/@").concat(localName),
      localName: "@".concat(localName)
    },
    linkedTo: {
      nftTokenId: '1',
      contract: mockNetworkAddressFragment()
    },
    __typename: 'HandleInfo'
  };
}
function mockProfileFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockProfileId(),
    txHash: mocks.mockTransactionHash(),
    createdAt: faker.faker.date.past().toISOString(),
    interests: [],
    handle: mockHandleInfo(),
    invitesLeft: 0,
    sponsor: false,
    signless: false,
    ownedBy: mockNetworkAddressFragment(),
    operations: mockProfileOperationsFragment(),
    guardian: null,
    onchainIdentity: mockProfileOnchainIdentityFragment(),
    followNftAddress: mockNetworkAddressFragment(),
    followModule: null,
    metadata: null,
    invitedBy: null,
    stats: mockProfileStatsFragment(),
    globalStats: mockProfileStatsFragment(),
    peerToPeerRecommendedByMe: false
  }, overrides), {}, {
    __typename: 'Profile'
  });
}
function mockPostFragment(overrides) {
  var publicationId = mocks.mockPublicationId();
  var stats = mockPublicationStatsFragment({
    id: publicationId
  });
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: publicationId,
    isHidden: false,
    txHash: mocks.mockTransactionHash(),
    by: mockProfileFragment(),
    createdAt: faker.faker.date.past().toISOString(),
    publishedOn: null,
    momoka: null,
    operations: mockPublicationOperationsFragment(),
    metadata: mockPublicationTextOnlyMetadata(),
    openActionModules: [],
    referenceModule: null,
    stats: stats,
    globalStats: stats,
    isEncrypted: false,
    hashtagsMentioned: [],
    profilesMentioned: []
  }, overrides), {}, {
    __typename: 'Post'
  });
}
function mockCommentFragment(overrides) {
  var mainPost = mockPostFragment();
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockPublicationId(),
    isHidden: false,
    hiddenByAuthor: false,
    txHash: mocks.mockTransactionHash(),
    by: mockProfileFragment(),
    createdAt: faker.faker.date.past().toISOString(),
    publishedOn: null,
    momoka: null,
    operations: mockPublicationOperationsFragment(),
    metadata: mockPublicationTextOnlyMetadata(),
    openActionModules: [],
    referenceModule: null,
    root: mainPost,
    commentOn: mainPost,
    firstComment: null,
    stats: mockPublicationStatsFragment(),
    globalStats: mockPublicationStatsFragment(),
    isEncrypted: false,
    hashtagsMentioned: [],
    profilesMentioned: []
  }, overrides), {}, {
    __typename: 'Comment'
  });
}
function mockQuoteFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockPublicationId(),
    isHidden: false,
    txHash: mocks.mockTransactionHash(),
    by: mockProfileFragment(),
    createdAt: faker.faker.date.past().toISOString(),
    publishedOn: null,
    momoka: null,
    operations: mockPublicationOperationsFragment(),
    metadata: mockPublicationTextOnlyMetadata(),
    openActionModules: [],
    referenceModule: null,
    quoteOn: mockPostFragment(),
    stats: mockPublicationStatsFragment(),
    globalStats: mockPublicationStatsFragment(),
    isEncrypted: false,
    hashtagsMentioned: [],
    profilesMentioned: []
  }, overrides), {}, {
    __typename: 'Quote'
  });
}
function mockUnknownReferenceModuleSettings(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    contract: mockNetworkAddressFragment(),
    signlessApproved: true,
    sponsoredApproved: true,
    initializeCalldata: null,
    initializeResultData: null,
    verified: false
  }, overrides), {}, {
    __typename: 'UnknownReferenceModuleSettings'
  });
}
function mockMirrorFragment(overrides) {
  var mainPost = mockPostFragment();
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockPublicationId(),
    isHidden: false,
    txHash: mocks.mockTransactionHash(),
    by: mockProfileFragment(),
    createdAt: faker.faker.date.past().toISOString(),
    publishedOn: null,
    momoka: null,
    mirrorOn: mainPost
  }, overrides), {}, {
    __typename: 'Mirror'
  });
}
function mockPublicationTextOnlyMetadata() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: faker.faker.helpers.unique(faker.faker.datatype.uuid),
    rawURI: faker.faker.internet.url(),
    locale: 'en',
    tags: null,
    contentWarning: null,
    hideFromFeed: false,
    appId: null,
    content: faker.faker.lorem.words(5),
    marketplace: null,
    attributes: null,
    encryptedWith: null
  }, overrides), {}, {
    __typename: 'TextOnlyMetadataV3'
  });
}
function mockCanDecryptResponseFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    result: false,
    reasons: null,
    extraDetails: null
  }, overrides), {}, {
    __typename: 'CanDecryptResponse'
  });
}
function mockPublicationOperationsFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockPublicationId(),
    isNotInterested: false,
    hasBookmarked: false,
    hasReported: false,
    canCollect: unsupportedIterableToArray.TriStateValue.Unknown,
    canComment: unsupportedIterableToArray.TriStateValue.Unknown,
    canMirror: unsupportedIterableToArray.TriStateValue.Unknown,
    canQuote: unsupportedIterableToArray.TriStateValue.Unknown,
    hasMirrored: false,
    hasUpvoted: false,
    hasDownvoted: false,
    hasCollected: mockOptimisticStatusResultFragment(),
    canDecrypt: mockCanDecryptResponseFragment()
  }, overrides), {}, {
    __typename: 'PublicationOperations'
  });
}
function mockPaginatedResultInfo() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    prev: null,
    next: null
  }, overrides), {}, {
    __typename: 'PaginatedResultInfo'
  });
}
function mockPublicationStatsFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockPublicationId(),
    comments: faker.faker.datatype.number(),
    mirrors: faker.faker.datatype.number(),
    quotes: faker.faker.datatype.number(),
    bookmarks: faker.faker.datatype.number(),
    collects: faker.faker.datatype.number(),
    upvotes: faker.faker.datatype.number(),
    downvotes: faker.faker.datatype.number()
  }, overrides), {}, {
    __typename: 'PublicationStats'
  });
}
function mockProfileStatsFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: mocks.mockProfileId(),
    followers: faker.faker.datatype.number(),
    following: faker.faker.datatype.number(),
    comments: faker.faker.datatype.number(),
    posts: faker.faker.datatype.number(),
    mirrors: faker.faker.datatype.number(),
    quotes: faker.faker.datatype.number(),
    publications: faker.faker.datatype.number(),
    collects: faker.faker.datatype.number(),
    upvotes: faker.faker.datatype.number(),
    downvotes: faker.faker.datatype.number(),
    upvoted: faker.faker.datatype.number(),
    downvoted: faker.faker.datatype.number(),
    lensClassifierScore: 0
  }, overrides), {}, {
    __typename: 'ProfileStats'
  });
}
function mockFeedItemFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: faker.faker.datatype.uuid(),
    root: mockPostFragment(),
    comments: [],
    mirrors: [],
    reactions: []
  }, overrides), {}, {
    __typename: 'FeedItem'
  });
}
function mockProfileActionHistoryFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    id: faker.faker.datatype.number(),
    actionType: unsupportedIterableToArray.ProfileActionHistoryType.LoggedIn,
    who: mocks$1.mockEvmAddress(),
    txHash: mocks.mockTransactionHash(),
    actionedOn: faker.faker.date.past().toISOString()
  }, overrides), {}, {
    __typename: 'ProfileActionHistory'
  });
}
function mockMentionNotification(overrides) {
  return unsupportedIterableToArray._objectSpread2({
    __typename: 'MentionNotification',
    id: faker.faker.datatype.uuid(),
    publication: mockPostFragment()
  }, overrides);
}
function mockProfileReactionResultFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    reaction: unsupportedIterableToArray.PublicationReactionType.Upvote,
    reactionAt: faker.faker.date.past().toISOString()
  }, overrides), {}, {
    __typename: 'ProfileReactionResult'
  });
}
function mockProfileWhoReactedResultFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    profile: mockProfileFragment(),
    reactions: [mockProfileReactionResultFragment()]
  }, overrides), {}, {
    __typename: 'ProfileWhoReactedResult'
  });
}
function mockErc20Fragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    name: 'Wrapped MATIC',
    symbol: 'WMATIC',
    decimals: 18,
    contract: mockNetworkAddressFragment()
  }, overrides), {}, {
    __typename: 'Erc20'
  });
}
function mockAmountFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    value: faker.faker.datatype.number().toString(),
    asset: mockErc20Fragment(),
    rate: null
  }, overrides), {}, {
    __typename: 'Amount'
  });
}
function mockRevenueAggregateFragment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    total: mockAmountFragment()
  }, overrides), {}, {
    __typename: 'RevenueAggregate'
  });
}
function mockPublicationRevenueFragment() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$publication = _ref.publication,
    publication = _ref$publication === void 0 ? mockPostFragment() : _ref$publication;
  return {
    __typename: 'PublicationRevenue',
    publication: publication,
    revenue: [mockRevenueAggregateFragment()]
  };
}
function mockFeeFollowModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'FeeFollowModuleSettings'
  }));
}
function mockSimpleCollectOpenActionSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'SimpleCollectOpenActionSettings'
  }));
}
function mockMultirecipientFeeCollectOpenActionSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'MultirecipientFeeCollectOpenActionSettings'
  }));
}
function mockUnknownOpenActionModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    contract: mockNetworkAddressFragment()
  }, overrides), {}, {
    __typename: 'UnknownOpenActionModuleSettings'
  }));
}
function mockLegacyFreeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyFreeCollectModuleSettings'
  }));
}
function mockLegacyFeeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyFeeCollectModuleSettings'
  }));
}
function mockLegacyLimitedFeeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyLimitedFeeCollectModuleSettings'
  }));
}
function mockLegacyLimitedTimedFeeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyLimitedTimedFeeCollectModuleSettings'
  }));
}
function mockLegacyRevertCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyRevertCollectModuleSettings'
  }));
}
function mockLegacyTimedFeeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyTimedFeeCollectModuleSettings'
  }));
}
function mockLegacyMultirecipientFeeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyMultirecipientFeeCollectModuleSettings'
  }));
}
function mockLegacySimpleCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacySimpleCollectModuleSettings'
  }));
}
function mockLegacyErc4626FeeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyERC4626FeeCollectModuleSettings'
  }));
}
function mockLegacyAaveFeeCollectModuleSettingsFragment(overrides) {
  return jestMockExtended.mock(unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({}, overrides), {}, {
    __typename: 'LegacyAaveFeeCollectModuleSettings'
  }));
}
function mockModuleMetadataFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2({
    __typename: 'ModuleMetadata',
    authors: [],
    description: '',
    initializeCalldataABI: '[]',
    initializeResultDataABI: null,
    name: '',
    processCalldataABI: '[]',
    title: '',
    attributes: []
  }, overrides);
}
function mockModuleMetadataResultFragment(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    metadata: mockModuleMetadataFragment(),
    moduleType: unsupportedIterableToArray.ModuleType.Follow,
    signlessApproved: true,
    sponsoredApproved: true,
    verified: true
  }, overrides), {}, {
    __typename: 'GetModuleMetadataResult'
  });
}

/**
 * AST for:
 *
 * ```graphql
 * query GetHero($cursor: String!) {
 *   result: hero(cursor: $cursor) {
 *     items {
 *       name
 *     }
 *     pageInfo {
 *       ...PaginatedResultInfo
 *     }
 *   }
 * }
 * ```
 *
 * We couldn't use `graphql-tag` because it's does rely on fragment `DocumentNode` to
 * have `loc` property (from `gql` usage itself), which is not the case for our generated
 * fragments.
 */

var AnyPaginatedQueryDocument = {
  kind: 'Document',
  definitions: [{
    kind: 'OperationDefinition',
    operation: 'query',
    name: {
      kind: 'Name',
      value: 'GetHero'
    },
    variableDefinitions: [{
      kind: 'VariableDefinition',
      variable: {
        kind: 'Variable',
        name: {
          kind: 'Name',
          value: 'cursor'
        }
      },
      type: {
        kind: 'NamedType',
        name: {
          kind: 'Name',
          value: 'Cursor'
        }
      }
    }],
    selectionSet: {
      kind: 'SelectionSet',
      selections: [{
        kind: 'Field',
        alias: {
          kind: 'Name',
          value: 'result'
        },
        name: {
          kind: 'Name',
          value: 'hero'
        },
        arguments: [{
          kind: 'Argument',
          name: {
            kind: 'Name',
            value: 'cursor'
          },
          value: {
            kind: 'Variable',
            name: {
              kind: 'Name',
              value: 'cursor'
            }
          }
        }],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [{
            kind: 'Field',
            name: {
              kind: 'Name',
              value: 'items'
            },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [{
                kind: 'Field',
                name: {
                  kind: 'Name',
                  value: 'name'
                }
              }]
            }
          }, {
            kind: 'Field',
            name: {
              kind: 'Name',
              value: 'pageInfo'
            },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [{
                kind: 'FragmentSpread',
                name: {
                  kind: 'Name',
                  value: 'PaginatedResultInfo'
                }
              }]
            }
          }]
        }
      }]
    }
  }].concat(_toConsumableArray(unsupportedIterableToArray.FragmentPaginatedResultInfo.definitions))
};
function mockAnyPaginatedItem() {
  return {
    name: faker.faker.helpers.arrayElement(['Luke Skywalker', 'Darth Vader', 'Han Solo'])
  };
}
function mockAnyPaginatedQueryResult() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$items = _ref.items,
    items = _ref$items === void 0 ? [mockAnyPaginatedItem()] : _ref$items,
    _ref$next = _ref.next,
    next = _ref$next === void 0 ? null : _ref$next,
    _ref$prev = _ref.prev,
    prev = _ref$prev === void 0 ? null : _ref$prev;
  return {
    items: items,
    pageInfo: mockPaginatedResultInfo({
      next: next,
      prev: prev
    })
  };
}
function mockAnyPaginatedQueryResponse(_ref2) {
  var _ref2$variables = _ref2.variables,
    variables = _ref2$variables === void 0 ? {} : _ref2$variables,
    result = _ref2.result;
  return {
    request: {
      query: AnyPaginatedQueryDocument,
      variables: variables
    },
    result: {
      data: {
        result: result
      }
    }
  };
}

function mockEIP712TypedDataField() {
  return {
    name: 'nonce',
    type: 'uint256'
  };
}
function mockEIP712TypedDataDomain() {
  return {
    name: 'Lens',
    version: '1',
    chainId: 0,
    verifyingContract: mocks$1.mockEvmAddress()
  };
}
function mockCreateTypedDataResult(__typename, typedData) {
  return {
    __typename: __typename,
    id: faker.faker.datatype.uuid(),
    expiresAt: faker.faker.date.future().toISOString(),
    typedData: typedData
  };
}

function mockCreateActOnOpenActionTypedDataData() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$nonce = _ref.nonce,
    nonce = _ref$nonce === void 0 ? mocks.mockNonce() : _ref$nonce;
  return {
    result: mockCreateTypedDataResult('CreateActOnOpenActionBroadcastItemResult', {
      types: {
        Act: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        publicationActedProfileId: mocks.mockProfileId(),
        publicationActedId: '0x01',
        actorProfileId: mocks.mockProfileId(),
        referrerProfileIds: [],
        referrerPubIds: [],
        actionModuleAddress: mocks$1.mockEvmAddress(),
        actionModuleData: '0x'
      }
    })
  };
}
function mockCreateActOnOpenActionTypedDataResponse(_ref2) {
  var variables = _ref2.variables,
    data = _ref2.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateActOnOpenActionTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockActOnOpenActionResponse(_ref3) {
  var variables = _ref3.variables,
    data = _ref3.data;
  return {
    request: {
      query: unsupportedIterableToArray.ActOnOpenActionDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}

function mockRevokeAuthenticationResponse(variables) {
  return {
    request: {
      query: unsupportedIterableToArray.RevokeAuthenticationDocument,
      variables: variables
    },
    result: {
      data: {
        revokeAuthentication: null
      }
    }
  };
}

function mockCreateSetProfileMetadataTypedDataData() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$metadataURI = _ref.metadataURI,
    metadataURI = _ref$metadataURI === void 0 ? faker.faker.internet.url() : _ref$metadataURI,
    _ref$nonce = _ref.nonce,
    nonce = _ref$nonce === void 0 ? mocks.mockNonce() : _ref$nonce;
  return {
    result: mockCreateTypedDataResult('CreateOnchainSetProfileMetadataBroadcastItemResult', {
      __typename: 'CreateOnchainSetProfileMetadataBroadcastItemResult',
      types: {
        __typename: 'CreateSetProfileMetadataURIEIP712TypedDataTypes',
        SetProfileMetadataURI: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        __typename: 'CreateSetProfileMetadataURIEIP712TypedDataValue',
        nonce: nonce,
        deadline: faker.faker.datatype.number(),
        profileId: mocks.mockProfileId(),
        metadataURI: metadataURI
      }
    })
  };
}
function mockCreateSetProfileMetadataTypedDataResponse(_ref2) {
  var request = _ref2.request,
    overrideSigNonce = _ref2.overrideSigNonce,
    _ref2$data = _ref2.data,
    data = _ref2$data === void 0 ? mockCreateSetProfileMetadataTypedDataData({
      nonce: overrideSigNonce
    }) : _ref2$data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateOnchainSetProfileMetadataTypedDataDocument,
      variables: {
        request: request,
        options: overrideSigNonce ? {
          overrideSigNonce: overrideSigNonce
        } : undefined
      }
    },
    result: {
      data: data
    }
  };
}
function mockUnblockProfilesTypedDataData() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref3$nonce = _ref3.nonce,
    nonce = _ref3$nonce === void 0 ? mocks.mockNonce() : _ref3$nonce;
  return {
    result: mockCreateTypedDataResult('CreateUnblockProfilesBroadcastItemResult', {
      types: {
        SetBlockStatus: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        blockStatus: [false],
        byProfileId: mocks.mockProfileId(),
        idsOfProfilesToSetBlockStatus: [mocks.mockProfileId()],
        datas: []
      }
    })
  };
}
function mockUnblockProfilesResponse(_ref4) {
  var variables = _ref4.variables,
    data = _ref4.data;
  return {
    request: {
      query: unsupportedIterableToArray.UnblockDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockUnblockProfilesTypedDataResponse(_ref5) {
  var variables = _ref5.variables,
    data = _ref5.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateUnblockProfilesTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockBlockProfilesResponse(_ref6) {
  var variables = _ref6.variables,
    data = _ref6.data;
  return {
    request: {
      query: unsupportedIterableToArray.BlockDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockBlockProfilesTypedDataData() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref7$nonce = _ref7.nonce,
    nonce = _ref7$nonce === void 0 ? mocks.mockNonce() : _ref7$nonce;
  return {
    result: mockCreateTypedDataResult('CreateBlockProfilesBroadcastItemResult', {
      types: {
        SetBlockStatus: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        blockStatus: [true],
        byProfileId: mocks.mockProfileId(),
        idsOfProfilesToSetBlockStatus: [mocks.mockProfileId()],
        datas: []
      }
    })
  };
}
function mockBlockProfilesTypedDataResponse(_ref8) {
  var variables = _ref8.variables,
    data = _ref8.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateBlockProfilesTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateFollowTypedDataData() {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref9$nonce = _ref9.nonce,
    nonce = _ref9$nonce === void 0 ? mocks.mockNonce() : _ref9$nonce;
  return {
    result: mockCreateTypedDataResult('CreateFollowBroadcastItemResult', {
      types: {
        Follow: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        followerProfileId: mocks.mockProfileId(),
        idsOfProfilesToFollow: [mocks.mockProfileId()],
        followTokenIds: [],
        datas: []
      }
    })
  };
}
function mockCreateFollowTypedDataResponse(_ref10) {
  var variables = _ref10.variables,
    data = _ref10.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateFollowTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockFollowResponse(_ref11) {
  var variables = _ref11.variables,
    data = _ref11.data;
  return {
    request: {
      query: unsupportedIterableToArray.FollowDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateUnfollowTypedDataData() {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref12$nonce = _ref12.nonce,
    nonce = _ref12$nonce === void 0 ? mocks.mockNonce() : _ref12$nonce;
  return {
    result: mockCreateTypedDataResult('CreateUnfollowBroadcastItemResult', {
      types: {
        Unfollow: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        unfollowerProfileId: mocks.mockProfileId(),
        idsOfProfilesToUnfollow: [mocks.mockProfileId()]
      }
    })
  };
}
function mockCreateUnfollowTypedDataResponse(_ref13) {
  var variables = _ref13.variables,
    data = _ref13.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateUnfollowTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockUnfollowResponse(_ref14) {
  var variables = _ref14.variables,
    data = _ref14.data;
  return {
    request: {
      query: unsupportedIterableToArray.UnfollowDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateSetFollowModuleTypedDataData() {
  var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref15$nonce = _ref15.nonce,
    nonce = _ref15$nonce === void 0 ? mocks.mockNonce() : _ref15$nonce;
  return {
    result: mockCreateTypedDataResult('CreateSetFollowModuleBroadcastItemResult', {
      types: {
        SetFollowModule: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        followModule: mocks$1.mockEvmAddress(),
        followModuleInitData: '0x'
      }
    })
  };
}
function mockCreateSetFollowModuleTypedDataResponse(_ref16) {
  var variables = _ref16.variables,
    data = _ref16.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateSetFollowModuleTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockSetFollowModuleResponse(_ref17) {
  var variables = _ref17.variables,
    data = _ref17.data;
  return {
    request: {
      query: unsupportedIterableToArray.SetFollowModuleDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateLinkHandleToProfileTypedDataData() {
  var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref18$nonce = _ref18.nonce,
    nonce = _ref18$nonce === void 0 ? mocks.mockNonce() : _ref18$nonce;
  return {
    result: mockCreateTypedDataResult('CreateLinkHandleToProfileBroadcastItemResult', {
      types: {
        Link: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        handleId: mocks$1.mockEvmAddress()
      }
    })
  };
}
function mockCreateLinkHandleToProfileTypedDataResponse(_ref19) {
  var variables = _ref19.variables,
    data = _ref19.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateLinkHandleToProfileTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockLinkHandleToProfileResponse(_ref20) {
  var variables = _ref20.variables,
    data = _ref20.data;
  return {
    request: {
      query: unsupportedIterableToArray.LinkHandleToProfileDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateUnlinkHandleFromProfileTypedDataData() {
  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref21$nonce = _ref21.nonce,
    nonce = _ref21$nonce === void 0 ? mocks.mockNonce() : _ref21$nonce;
  return {
    result: mockCreateTypedDataResult('CreateUnlinkHandleFromProfileBroadcastItemResult', {
      types: {
        Unlink: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        handleId: mocks$1.mockEvmAddress()
      }
    })
  };
}
function mockCreateUnlinkHandleFromProfileTypedDataResponse(_ref22) {
  var variables = _ref22.variables,
    data = _ref22.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateUnlinkHandleFromProfileTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockUnlinkHandleFromProfileResponse(_ref23) {
  var variables = _ref23.variables,
    data = _ref23.data;
  return {
    request: {
      query: unsupportedIterableToArray.UnlinkHandleFromProfileDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}

function mockHidePublicationResponse(variables) {
  return {
    request: {
      query: unsupportedIterableToArray.HidePublicationDocument,
      variables: variables
    },
    result: {
      data: {
        hidePublication: null
      }
    }
  };
}
function mockReportPublicationResponse(args) {
  return {
    request: {
      query: unsupportedIterableToArray.ReportPublicationDocument,
      variables: args.variables
    },
    result: {
      data: {
        reportPublication: null
      }
    }
  };
}
function mockAddReactionResponse(_ref) {
  var variables = _ref.variables;
  return {
    request: {
      query: unsupportedIterableToArray.AddReactionDocument,
      variables: variables
    },
    result: {
      data: {
        addReaction: null
      }
    }
  };
}
function mockRemoveReactionResponse(_ref2) {
  var variables = _ref2.variables;
  return {
    request: {
      query: unsupportedIterableToArray.RemoveReactionDocument,
      variables: variables
    },
    result: {
      data: {
        removeReaction: null
      }
    }
  };
}
function mockCreateOnchainPostTypedDataData() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref3$nonce = _ref3.nonce,
    nonce = _ref3$nonce === void 0 ? mocks.mockNonce() : _ref3$nonce;
  return {
    result: mockCreateTypedDataResult('CreateOnchainPostBroadcastItemResult', {
      types: {
        Post: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        contentURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        actionModules: [mocks$1.mockEvmAddress()],
        actionModulesInitDatas: ['0x'],
        referenceModule: '0x0000000000000000000000000000000000000000',
        referenceModuleInitData: '0x'
      }
    })
  };
}
function mockCreateOnchainPostTypedDataResponse(_ref4) {
  var variables = _ref4.variables,
    data = _ref4.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateOnchainPostTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockPostOnchainResponse(_ref5) {
  var variables = _ref5.variables,
    data = _ref5.data;
  return {
    request: {
      query: unsupportedIterableToArray.PostOnchainDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateMomokaPostTypedDataData() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref6$nonce = _ref6.nonce,
    nonce = _ref6$nonce === void 0 ? mocks.mockNonce() : _ref6$nonce;
  return {
    result: mockCreateTypedDataResult('CreateMomokaPostBroadcastItemResult', {
      types: {
        Post: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        contentURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        actionModules: ['0xd6072BB2ABc0a9d1331c7d0B83AE6C47f2Cb86A3'],
        actionModulesInitDatas: ['0x'],
        referenceModule: '0x0000000000000000000000000000000000000000',
        referenceModuleInitData: '0x'
      }
    })
  };
}
function mockCreateMomokaPostTypedDataResponse(_ref7) {
  var variables = _ref7.variables,
    data = _ref7.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateMomokaPostTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockPostOnMomokaResponse(_ref8) {
  var variables = _ref8.variables,
    data = _ref8.data;
  return {
    request: {
      query: unsupportedIterableToArray.PostOnMomokaDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateMomokaPublicationResult() {
  return {
    __typename: 'CreateMomokaPublicationResult',
    id: mocks.mockPublicationId(),
    momokaId: faker.faker.datatype.uuid(),
    proof: '...'
  };
}
function mockCreateOnchainCommentTypedDataData() {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref9$nonce = _ref9.nonce,
    nonce = _ref9$nonce === void 0 ? mocks.mockNonce() : _ref9$nonce;
  return {
    result: mockCreateTypedDataResult('CreateOnchainCommentBroadcastItemResult', {
      types: {
        Comment: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        contentURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        pointedProfileId: mocks.mockProfileId(),
        pointedPubId: '0x01',
        referrerProfileIds: [],
        referrerPubIds: [],
        referenceModuleData: '0x',
        actionModules: [mocks$1.mockEvmAddress()],
        actionModulesInitDatas: ['0x'],
        referenceModule: '0x0000000000000000000000000000000000000000',
        referenceModuleInitData: '0x'
      }
    })
  };
}
function mockCreateOnchainCommentTypedDataResponse(_ref10) {
  var variables = _ref10.variables,
    data = _ref10.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateOnchainCommentTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCommentOnchainResponse(_ref11) {
  var variables = _ref11.variables,
    data = _ref11.data;
  return {
    request: {
      query: unsupportedIterableToArray.CommentOnchainDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateMomokaCommentTypedDataData() {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref12$nonce = _ref12.nonce,
    nonce = _ref12$nonce === void 0 ? mocks.mockNonce() : _ref12$nonce;
  return {
    result: mockCreateTypedDataResult('CreateMomokaCommentBroadcastItemResult', {
      types: {
        Comment: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        contentURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        pointedProfileId: mocks.mockProfileId(),
        pointedPubId: '0x01',
        referrerProfileIds: [],
        referrerPubIds: [],
        referenceModuleData: '0x',
        actionModules: [mocks$1.mockEvmAddress()],
        actionModulesInitDatas: ['0x'],
        referenceModule: '0x0000000000000000000000000000000000000000',
        referenceModuleInitData: '0x'
      }
    })
  };
}
function mockCreateMomokaCommentTypedDataResponse(_ref13) {
  var variables = _ref13.variables,
    data = _ref13.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateMomokaCommentTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCommentOnMomokaResponse(_ref14) {
  var variables = _ref14.variables,
    data = _ref14.data;
  return {
    request: {
      query: unsupportedIterableToArray.CommentOnMomokaDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateMomokaMirrorTypedDataData() {
  var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref15$nonce = _ref15.nonce,
    nonce = _ref15$nonce === void 0 ? mocks.mockNonce() : _ref15$nonce;
  return {
    result: mockCreateTypedDataResult('CreateMomokaMirrorBroadcastItemResult', {
      types: {
        Mirror: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        metadataURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        pointedProfileId: mocks.mockProfileId(),
        pointedPubId: '0x01',
        referrerProfileIds: [],
        referrerPubIds: [],
        referenceModuleData: '0x'
      }
    })
  };
}
function mockCreateMomokaMirrorTypedDataResponse(_ref16) {
  var variables = _ref16.variables,
    data = _ref16.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateMomokaMirrorTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockMirrorOnMomokaResponse(_ref17) {
  var variables = _ref17.variables,
    data = _ref17.data;
  return {
    request: {
      query: unsupportedIterableToArray.MirrorOnMomokaDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateOnchainMirrorTypedDataData() {
  var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref18$nonce = _ref18.nonce,
    nonce = _ref18$nonce === void 0 ? mocks.mockNonce() : _ref18$nonce;
  return {
    result: mockCreateTypedDataResult('CreateOnchainMirrorBroadcastItemResult', {
      types: {
        Mirror: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        metadataURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        pointedProfileId: mocks.mockProfileId(),
        pointedPubId: '0x01',
        referrerProfileIds: [],
        referrerPubIds: [],
        referenceModuleData: '0x'
      }
    })
  };
}
function mockCreateOnchainMirrorTypedDataResponse(_ref19) {
  var variables = _ref19.variables,
    data = _ref19.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateOnchainMirrorTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockMirrorOnchainResponse(_ref20) {
  var variables = _ref20.variables,
    data = _ref20.data;
  return {
    request: {
      query: unsupportedIterableToArray.MirrorOnchainDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateOnchainQuoteTypedDataData() {
  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref21$nonce = _ref21.nonce,
    nonce = _ref21$nonce === void 0 ? mocks.mockNonce() : _ref21$nonce;
  return {
    result: mockCreateTypedDataResult('CreateOnchainQuoteBroadcastItemResult', {
      types: {
        Quote: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        contentURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        pointedProfileId: mocks.mockProfileId(),
        pointedPubId: '0x01',
        referrerProfileIds: [],
        referrerPubIds: [],
        referenceModuleData: '0x',
        actionModules: [mocks$1.mockEvmAddress()],
        actionModulesInitDatas: ['0x'],
        referenceModule: '0x0000000000000000000000000000000000000000',
        referenceModuleInitData: '0x'
      }
    })
  };
}
function mockCreateOnchainQuoteTypedDataResponse(_ref22) {
  var variables = _ref22.variables,
    data = _ref22.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateOnchainQuoteTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockQuoteOnchainResponse(_ref23) {
  var variables = _ref23.variables,
    data = _ref23.data;
  return {
    request: {
      query: unsupportedIterableToArray.QuoteOnchainDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockCreateMomokaQuoteTypedDataData() {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref24$nonce = _ref24.nonce,
    nonce = _ref24$nonce === void 0 ? mocks.mockNonce() : _ref24$nonce;
  return {
    result: mockCreateTypedDataResult('CreateMomokaQuoteBroadcastItemResult', {
      types: {
        Quote: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        profileId: mocks.mockProfileId(),
        contentURI: 'ipfs://QmR5V6fwKWzoa9gevmYaQ11eMQsAahsjfWPz1rCoNJjN1K.json',
        pointedProfileId: mocks.mockProfileId(),
        pointedPubId: '0x01',
        referrerProfileIds: [],
        referrerPubIds: [],
        referenceModuleData: '0x',
        actionModules: [mocks$1.mockEvmAddress()],
        actionModulesInitDatas: ['0x'],
        referenceModule: '0x0000000000000000000000000000000000000000',
        referenceModuleInitData: '0x'
      }
    })
  };
}
function mockCreateMomokaQuoteTypedDataResponse(_ref25) {
  var variables = _ref25.variables,
    data = _ref25.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateMomokaQuoteTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockQuoteOnMomokaResponse(_ref26) {
  var variables = _ref26.variables,
    data = _ref26.data;
  return {
    request: {
      query: unsupportedIterableToArray.QuoteOnMomokaDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockAddToMyBookmarksResponse(variables) {
  return {
    request: {
      query: unsupportedIterableToArray.AddPublicationBookmarkDocument,
      variables: variables
    },
    result: {
      data: {
        result: null
      }
    }
  };
}
function mockRemoveFromMyBookmarksResponse(variables) {
  return {
    request: {
      query: unsupportedIterableToArray.RemovePublicationBookmarkDocument,
      variables: variables
    },
    result: {
      data: {
        result: null
      }
    }
  };
}
function mockCreateLegacyCollectTypedDataData() {
  var _ref27 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref27$nonce = _ref27.nonce,
    nonce = _ref27$nonce === void 0 ? mocks.mockNonce() : _ref27$nonce;
  return {
    result: mockCreateTypedDataResult('CreateLegacyCollectBroadcastItemResult', {
      types: {
        CollectLegacy: [mockEIP712TypedDataField()]
      },
      domain: mockEIP712TypedDataDomain(),
      message: {
        nonce: nonce,
        deadline: 1644303500,
        publicationCollectedProfileId: mocks.mockProfileId(),
        publicationCollectedId: '0x01',
        collectorProfileId: mocks.mockProfileId(),
        referrerProfileId: mocks.mockProfileId(),
        referrerPubId: faker.faker.datatype.hexadecimal({
          length: 2
        }),
        collectModuleData: '0x'
      }
    })
  };
}
function mockCreateLegacyCollectTypedDataResponse(_ref28) {
  var variables = _ref28.variables,
    data = _ref28.data;
  return {
    request: {
      query: unsupportedIterableToArray.CreateLegacyCollectTypedDataDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockLegacyCollectResponse(_ref29) {
  var variables = _ref29.variables,
    data = _ref29.data;
  return {
    request: {
      query: unsupportedIterableToArray.LegacyCollectDocument,
      variables: variables
    },
    result: {
      data: data
    }
  };
}
function mockAddPublicationNotInterestedResponse(variables) {
  return {
    request: {
      query: unsupportedIterableToArray.AddPublicationNotInterestedDocument,
      variables: variables
    },
    result: {
      data: {
        addPublicationNotInterested: null
      }
    }
  };
}
function mockUndoPublicationNotInterestedResponse(variables) {
  return {
    request: {
      query: unsupportedIterableToArray.UndoPublicationNotInterestedDocument,
      variables: variables
    },
    result: {
      data: {
        undoPublicationNotInterested: null
      }
    }
  };
}

function mockBroadcastOnchainData(result) {
  return {
    result: result
  };
}
function mockBroadcastOnchainResponse(_ref) {
  var result = _ref.result,
    variables = _ref.variables;
  return {
    request: {
      query: unsupportedIterableToArray.BroadcastOnchainDocument,
      variables: variables
    },
    result: {
      data: mockBroadcastOnchainData(result)
    }
  };
}
function mockRelaySuccessFragment() {
  var txHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mocks.mockTransactionHash();
  return {
    __typename: 'RelaySuccess',
    txHash: txHash,
    txId: faker.faker.datatype.uuid()
  };
}
function mockRelayErrorFragment(reason) {
  return {
    __typename: 'RelayError',
    reason: reason
  };
}
function mockLensProfileManagerRelayError(reason) {
  return {
    __typename: 'LensProfileManagerRelayError',
    reason: reason
  };
}
function mockBroadcastOnMomokaResponse(_ref2) {
  var variables = _ref2.variables,
    result = _ref2.result;
  return {
    request: {
      query: unsupportedIterableToArray.BroadcastOnMomokaDocument,
      variables: variables
    },
    result: {
      data: {
        result: result
      }
    }
  };
}

/**
 * Mock any response by matching the query and variables.
 */
function mockAnyResponse(bulk) {
  return {
    request: {
      query: bulk.request.query
    },
    variableMatcher: function variableMatcher(variables) {
      if (!bulk.request.variables) {
        return true;
      }
      try {
        expect(variables).toMatchObject(bulk.request.variables);
        return true;
      } catch (_unused) {
        return false;
      }
    },
    result: bulk.result
  };
}

/**
 * Mock any paginated responses by matching the query and variables.
 */
function mockAnyPaginatedResponse(_ref) {
  var variables = _ref.variables,
    items = _ref.items,
    _ref$info = _ref.info,
    info = _ref$info === void 0 ? mockPaginatedResultInfo() : _ref$info,
    query = _ref.query;
  return mockAnyResponse({
    request: {
      query: query,
      variables: variables
    },
    result: {
      data: {
        result: {
          items: items,
          pageInfo: info
        }
      }
    }
  });
}

function mockFeedResponse(_ref) {
  var variables = _ref.variables,
    items = _ref.items;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    query: unsupportedIterableToArray.FeedDocument
  });
}
function mockExplorePublicationsResponse(args) {
  return mockAnyPaginatedResponse({
    variables: args.variables,
    items: args.items,
    query: unsupportedIterableToArray.ExplorePublicationsDocument
  });
}
function mockFeedHighlightsResponse(_ref2) {
  var variables = _ref2.variables,
    items = _ref2.items;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    query: unsupportedIterableToArray.FeedHighlightsDocument
  });
}
function mockExploreProfilesResponse(_ref3) {
  var variables = _ref3.variables,
    items = _ref3.items;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    query: unsupportedIterableToArray.ExploreProfilesDocument
  });
}

function mockCurrenciesResponse(_ref) {
  var variables = _ref.variables,
    items = _ref.items,
    _ref$info = _ref.info,
    info = _ref$info === void 0 ? mockPaginatedResultInfo() : _ref$info;
  return {
    request: {
      query: unsupportedIterableToArray.CurrenciesDocument,
      variables: variables
    },
    result: {
      data: {
        result: {
          items: items.map(function (currency) {
            return {
              __typename: 'Erc20',
              name: currency.name,
              symbol: currency.symbol,
              decimals: currency.decimals,
              contract: {
                __typename: 'NetworkAddress',
                address: currency.address,
                chainId: 80002
              }
            };
          }),
          pageInfo: info
        }
      }
    }
  };
}

function mockModuleMetadataResponse(_ref) {
  var implementation = _ref.implementation,
    result = _ref.result;
  return {
    request: {
      query: unsupportedIterableToArray.ModuleMetadataDocument,
      variables: {
        request: {
          implementation: implementation
        }
      }
    },
    result: {
      data: {
        result: result
      }
    }
  };
}

function mockNotificationsResponse(_ref) {
  var variables = _ref.variables,
    items = _ref.items,
    _ref$info = _ref.info,
    info = _ref$info === void 0 ? mockPaginatedResultInfo() : _ref$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    query: unsupportedIterableToArray.NotificationsDocument,
    info: info
  });
}

function mockProfileResponse(_ref) {
  var variables = _ref.variables,
    result = _ref.result;
  return mockAnyResponse({
    request: {
      query: unsupportedIterableToArray.ProfileDocument,
      variables: variables
    },
    result: {
      data: {
        result: result
      }
    }
  });
}
function mockProfilesResponse(_ref2) {
  var variables = _ref2.variables,
    items = _ref2.items,
    _ref2$info = _ref2.info,
    info = _ref2$info === void 0 ? mockPaginatedResultInfo() : _ref2$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.ProfilesDocument
  });
}
function mockMutualFollowersResponse(_ref3) {
  var variables = _ref3.variables,
    items = _ref3.items,
    _ref3$info = _ref3.info,
    info = _ref3$info === void 0 ? mockPaginatedResultInfo() : _ref3$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.MutualFollowersDocument
  });
}
function mockFollowersResponse(_ref4) {
  var variables = _ref4.variables,
    items = _ref4.items,
    _ref4$info = _ref4.info,
    info = _ref4$info === void 0 ? mockPaginatedResultInfo() : _ref4$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.FollowersDocument
  });
}
function mockFollowingResponse(_ref5) {
  var variables = _ref5.variables,
    items = _ref5.items,
    _ref5$info = _ref5.info,
    info = _ref5$info === void 0 ? mockPaginatedResultInfo() : _ref5$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.FollowingDocument
  });
}
function mockSearchProfilesResponse(_ref6) {
  var variables = _ref6.variables,
    items = _ref6.items,
    _ref6$info = _ref6.info,
    info = _ref6$info === void 0 ? mockPaginatedResultInfo() : _ref6$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.SearchProfilesDocument
  });
}
function mockProfileRecommendationsResponse(_ref7) {
  var variables = _ref7.variables,
    items = _ref7.items,
    _ref7$info = _ref7.info,
    info = _ref7$info === void 0 ? mockPaginatedResultInfo() : _ref7$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.ProfileRecommendationsDocument
  });
}
function mockWhoActedOnPublicationResponse(_ref8) {
  var variables = _ref8.variables,
    items = _ref8.items,
    _ref8$info = _ref8.info,
    info = _ref8$info === void 0 ? mockPaginatedResultInfo() : _ref8$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.WhoActedOnPublicationDocument
  });
}
function mockProfileActionHistoryResponse(_ref9) {
  var variables = _ref9.variables,
    items = _ref9.items,
    _ref9$info = _ref9.info,
    info = _ref9$info === void 0 ? mockPaginatedResultInfo() : _ref9$info;
  return {
    request: {
      query: unsupportedIterableToArray.ProfileActionHistoryDocument,
      variables: variables
    },
    result: {
      data: {
        result: {
          items: items,
          pageInfo: info
        }
      }
    }
  };
}
function mockWhoReactedToPublicationResponse(_ref10) {
  var variables = _ref10.variables,
    items = _ref10.items,
    _ref10$info = _ref10.info,
    info = _ref10$info === void 0 ? mockPaginatedResultInfo() : _ref10$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.WhoReactedPublicationDocument
  });
}

function mockPublicationResponse(_ref) {
  var variables = _ref.variables,
    result = _ref.result;
  return mockAnyResponse({
    request: {
      query: unsupportedIterableToArray.PublicationDocument,
      variables: variables
    },
    result: {
      data: {
        result: result
      }
    }
  });
}
function mockPublicationsResponse(_ref2) {
  var variables = _ref2.variables,
    items = _ref2.items,
    _ref2$info = _ref2.info,
    info = _ref2$info === void 0 ? mockPaginatedResultInfo() : _ref2$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.PublicationsDocument
  });
}
function mockSearchPublicationsResponse(_ref3) {
  var variables = _ref3.variables,
    items = _ref3.items,
    _ref3$info = _ref3.info,
    info = _ref3$info === void 0 ? mockPaginatedResultInfo() : _ref3$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.SearchPublicationsDocument
  });
}
function mockProfileBookmarksResponse(_ref4) {
  var variables = _ref4.variables,
    items = _ref4.items,
    _ref4$info = _ref4.info,
    info = _ref4$info === void 0 ? mockPaginatedResultInfo() : _ref4$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.PublicationBookmarksDocument
  });
}

function mockFollowRevenuesResponse(_ref) {
  var variables = _ref.variables,
    result = _ref.result;
  return mockAnyResponse({
    request: {
      query: unsupportedIterableToArray.FollowRevenuesDocument,
      variables: variables
    },
    result: {
      data: {
        result: {
          revenues: result
        }
      }
    }
  });
}
function mockRevenueFromPublicationResponse(_ref2) {
  var variables = _ref2.variables,
    result = _ref2.result;
  return mockAnyResponse({
    request: {
      query: unsupportedIterableToArray.RevenueFromPublicationDocument,
      variables: variables
    },
    result: {
      data: {
        result: result
      }
    }
  });
}
function mockRevenueFromPublicationsResponse(_ref3) {
  var variables = _ref3.variables,
    items = _ref3.items,
    _ref3$info = _ref3.info,
    info = _ref3$info === void 0 ? mockPaginatedResultInfo() : _ref3$info;
  return mockAnyPaginatedResponse({
    variables: variables,
    items: items,
    info: info,
    query: unsupportedIterableToArray.RevenueFromPublicationsDocument
  });
}

function mockLensTransactionStatusDataResponse(_ref) {
  var request = _ref.request,
    result = _ref.result;
  return {
    request: {
      query: unsupportedIterableToArray.LensTransactionStatusDocument,
      variables: {
        request: request
      }
    },
    result: {
      data: {
        result: result
      }
    }
  };
}
function mockLensTransactionResult(overrides) {
  return unsupportedIterableToArray._objectSpread2(unsupportedIterableToArray._objectSpread2({
    extraInfo: null,
    reason: null,
    status: unsupportedIterableToArray.LensTransactionStatusType.Processing,
    txHash: mocks.mockTransactionHash()
  }, overrides), {}, {
    __typename: 'LensTransactionResult'
  });
}
function mockGenerateLensAPIRelayAddressResponse(_ref2) {
  var address = _ref2.address;
  return {
    request: {
      query: unsupportedIterableToArray.GenerateLensApiRelayAddressDocument
    },
    result: {
      data: {
        result: address
      }
    }
  };
}

function mockCursor() {
  return faker.faker.random.alphaNumeric(10);
}

exports.AnyPaginatedQueryDocument = AnyPaginatedQueryDocument;
exports.createHttpJsonResponse = createHttpJsonResponse;
exports.createUnauthenticatedHttpResponse = createUnauthenticatedHttpResponse;
exports.mockActOnOpenActionResponse = mockActOnOpenActionResponse;
exports.mockAddPublicationNotInterestedResponse = mockAddPublicationNotInterestedResponse;
exports.mockAddReactionResponse = mockAddReactionResponse;
exports.mockAddToMyBookmarksResponse = mockAddToMyBookmarksResponse;
exports.mockAmountFragment = mockAmountFragment;
exports.mockAmountFragmentFrom = mockAmountFragmentFrom;
exports.mockAnyPaginatedQueryResponse = mockAnyPaginatedQueryResponse;
exports.mockAnyPaginatedQueryResult = mockAnyPaginatedQueryResult;
exports.mockBlockProfilesResponse = mockBlockProfilesResponse;
exports.mockBlockProfilesTypedDataData = mockBlockProfilesTypedDataData;
exports.mockBlockProfilesTypedDataResponse = mockBlockProfilesTypedDataResponse;
exports.mockBroadcastOnMomokaResponse = mockBroadcastOnMomokaResponse;
exports.mockBroadcastOnchainResponse = mockBroadcastOnchainResponse;
exports.mockCommentFragment = mockCommentFragment;
exports.mockCommentOnMomokaResponse = mockCommentOnMomokaResponse;
exports.mockCommentOnchainResponse = mockCommentOnchainResponse;
exports.mockCreateActOnOpenActionTypedDataData = mockCreateActOnOpenActionTypedDataData;
exports.mockCreateActOnOpenActionTypedDataResponse = mockCreateActOnOpenActionTypedDataResponse;
exports.mockCreateFollowTypedDataData = mockCreateFollowTypedDataData;
exports.mockCreateFollowTypedDataResponse = mockCreateFollowTypedDataResponse;
exports.mockCreateLegacyCollectTypedDataData = mockCreateLegacyCollectTypedDataData;
exports.mockCreateLegacyCollectTypedDataResponse = mockCreateLegacyCollectTypedDataResponse;
exports.mockCreateLinkHandleToProfileTypedDataData = mockCreateLinkHandleToProfileTypedDataData;
exports.mockCreateLinkHandleToProfileTypedDataResponse = mockCreateLinkHandleToProfileTypedDataResponse;
exports.mockCreateMomokaCommentTypedDataData = mockCreateMomokaCommentTypedDataData;
exports.mockCreateMomokaCommentTypedDataResponse = mockCreateMomokaCommentTypedDataResponse;
exports.mockCreateMomokaMirrorTypedDataData = mockCreateMomokaMirrorTypedDataData;
exports.mockCreateMomokaMirrorTypedDataResponse = mockCreateMomokaMirrorTypedDataResponse;
exports.mockCreateMomokaPostTypedDataData = mockCreateMomokaPostTypedDataData;
exports.mockCreateMomokaPostTypedDataResponse = mockCreateMomokaPostTypedDataResponse;
exports.mockCreateMomokaPublicationResult = mockCreateMomokaPublicationResult;
exports.mockCreateMomokaQuoteTypedDataData = mockCreateMomokaQuoteTypedDataData;
exports.mockCreateMomokaQuoteTypedDataResponse = mockCreateMomokaQuoteTypedDataResponse;
exports.mockCreateOnchainCommentTypedDataData = mockCreateOnchainCommentTypedDataData;
exports.mockCreateOnchainCommentTypedDataResponse = mockCreateOnchainCommentTypedDataResponse;
exports.mockCreateOnchainMirrorTypedDataData = mockCreateOnchainMirrorTypedDataData;
exports.mockCreateOnchainMirrorTypedDataResponse = mockCreateOnchainMirrorTypedDataResponse;
exports.mockCreateOnchainPostTypedDataData = mockCreateOnchainPostTypedDataData;
exports.mockCreateOnchainPostTypedDataResponse = mockCreateOnchainPostTypedDataResponse;
exports.mockCreateOnchainQuoteTypedDataData = mockCreateOnchainQuoteTypedDataData;
exports.mockCreateOnchainQuoteTypedDataResponse = mockCreateOnchainQuoteTypedDataResponse;
exports.mockCreateSetFollowModuleTypedDataData = mockCreateSetFollowModuleTypedDataData;
exports.mockCreateSetFollowModuleTypedDataResponse = mockCreateSetFollowModuleTypedDataResponse;
exports.mockCreateSetProfileMetadataTypedDataData = mockCreateSetProfileMetadataTypedDataData;
exports.mockCreateSetProfileMetadataTypedDataResponse = mockCreateSetProfileMetadataTypedDataResponse;
exports.mockCreateUnfollowTypedDataData = mockCreateUnfollowTypedDataData;
exports.mockCreateUnfollowTypedDataResponse = mockCreateUnfollowTypedDataResponse;
exports.mockCreateUnlinkHandleFromProfileTypedDataData = mockCreateUnlinkHandleFromProfileTypedDataData;
exports.mockCreateUnlinkHandleFromProfileTypedDataResponse = mockCreateUnlinkHandleFromProfileTypedDataResponse;
exports.mockCurrenciesResponse = mockCurrenciesResponse;
exports.mockCursor = mockCursor;
exports.mockErc20Fragment = mockErc20Fragment;
exports.mockExploreProfilesResponse = mockExploreProfilesResponse;
exports.mockExplorePublicationsResponse = mockExplorePublicationsResponse;
exports.mockFeeFollowModuleSettingsFragment = mockFeeFollowModuleSettingsFragment;
exports.mockFeedHighlightsResponse = mockFeedHighlightsResponse;
exports.mockFeedItemFragment = mockFeedItemFragment;
exports.mockFeedResponse = mockFeedResponse;
exports.mockFollowResponse = mockFollowResponse;
exports.mockFollowRevenuesResponse = mockFollowRevenuesResponse;
exports.mockFollowersResponse = mockFollowersResponse;
exports.mockFollowingResponse = mockFollowingResponse;
exports.mockGenerateLensAPIRelayAddressResponse = mockGenerateLensAPIRelayAddressResponse;
exports.mockGenericErrorResponse = mockGenericErrorResponse;
exports.mockGenericSuccessResponse = mockGenericSuccessResponse;
exports.mockHandleInfo = mockHandleInfo;
exports.mockHidePublicationResponse = mockHidePublicationResponse;
exports.mockLegacyAaveFeeCollectModuleSettingsFragment = mockLegacyAaveFeeCollectModuleSettingsFragment;
exports.mockLegacyCollectResponse = mockLegacyCollectResponse;
exports.mockLegacyErc4626FeeCollectModuleSettingsFragment = mockLegacyErc4626FeeCollectModuleSettingsFragment;
exports.mockLegacyFeeCollectModuleSettingsFragment = mockLegacyFeeCollectModuleSettingsFragment;
exports.mockLegacyFreeCollectModuleSettingsFragment = mockLegacyFreeCollectModuleSettingsFragment;
exports.mockLegacyLimitedFeeCollectModuleSettingsFragment = mockLegacyLimitedFeeCollectModuleSettingsFragment;
exports.mockLegacyLimitedTimedFeeCollectModuleSettingsFragment = mockLegacyLimitedTimedFeeCollectModuleSettingsFragment;
exports.mockLegacyMultirecipientFeeCollectModuleSettingsFragment = mockLegacyMultirecipientFeeCollectModuleSettingsFragment;
exports.mockLegacyRevertCollectModuleSettingsFragment = mockLegacyRevertCollectModuleSettingsFragment;
exports.mockLegacySimpleCollectModuleSettingsFragment = mockLegacySimpleCollectModuleSettingsFragment;
exports.mockLegacyTimedFeeCollectModuleSettingsFragment = mockLegacyTimedFeeCollectModuleSettingsFragment;
exports.mockLensApolloClient = mockLensApolloClient;
exports.mockLensCache = mockLensCache;
exports.mockLensProfileManagerRelayError = mockLensProfileManagerRelayError;
exports.mockLensTransactionResult = mockLensTransactionResult;
exports.mockLensTransactionStatusDataResponse = mockLensTransactionStatusDataResponse;
exports.mockLinkHandleToProfileResponse = mockLinkHandleToProfileResponse;
exports.mockMentionNotification = mockMentionNotification;
exports.mockMirrorFragment = mockMirrorFragment;
exports.mockMirrorOnMomokaResponse = mockMirrorOnMomokaResponse;
exports.mockMirrorOnchainResponse = mockMirrorOnchainResponse;
exports.mockModuleMetadataFragment = mockModuleMetadataFragment;
exports.mockModuleMetadataResponse = mockModuleMetadataResponse;
exports.mockModuleMetadataResultFragment = mockModuleMetadataResultFragment;
exports.mockMultirecipientFeeCollectOpenActionSettingsFragment = mockMultirecipientFeeCollectOpenActionSettingsFragment;
exports.mockMutualFollowersResponse = mockMutualFollowersResponse;
exports.mockNetworkAddressFragment = mockNetworkAddressFragment;
exports.mockNotificationsResponse = mockNotificationsResponse;
exports.mockPaginatedResultInfo = mockPaginatedResultInfo;
exports.mockPostFragment = mockPostFragment;
exports.mockPostOnMomokaResponse = mockPostOnMomokaResponse;
exports.mockPostOnchainResponse = mockPostOnchainResponse;
exports.mockProfileActionHistoryFragment = mockProfileActionHistoryFragment;
exports.mockProfileActionHistoryResponse = mockProfileActionHistoryResponse;
exports.mockProfileBookmarksResponse = mockProfileBookmarksResponse;
exports.mockProfileFragment = mockProfileFragment;
exports.mockProfileReactionResultFragment = mockProfileReactionResultFragment;
exports.mockProfileRecommendationsResponse = mockProfileRecommendationsResponse;
exports.mockProfileResponse = mockProfileResponse;
exports.mockProfileStatsFragment = mockProfileStatsFragment;
exports.mockProfileWhoReactedResultFragment = mockProfileWhoReactedResultFragment;
exports.mockProfilesResponse = mockProfilesResponse;
exports.mockPublicationOperationsFragment = mockPublicationOperationsFragment;
exports.mockPublicationResponse = mockPublicationResponse;
exports.mockPublicationRevenueFragment = mockPublicationRevenueFragment;
exports.mockPublicationStatsFragment = mockPublicationStatsFragment;
exports.mockPublicationTextOnlyMetadata = mockPublicationTextOnlyMetadata;
exports.mockPublicationsResponse = mockPublicationsResponse;
exports.mockQuoteFragment = mockQuoteFragment;
exports.mockQuoteOnMomokaResponse = mockQuoteOnMomokaResponse;
exports.mockQuoteOnchainResponse = mockQuoteOnchainResponse;
exports.mockRelayErrorFragment = mockRelayErrorFragment;
exports.mockRelaySuccessFragment = mockRelaySuccessFragment;
exports.mockRemoveFromMyBookmarksResponse = mockRemoveFromMyBookmarksResponse;
exports.mockRemoveReactionResponse = mockRemoveReactionResponse;
exports.mockReportPublicationResponse = mockReportPublicationResponse;
exports.mockRevenueAggregateFragment = mockRevenueAggregateFragment;
exports.mockRevenueFromPublicationResponse = mockRevenueFromPublicationResponse;
exports.mockRevenueFromPublicationsResponse = mockRevenueFromPublicationsResponse;
exports.mockRevokeAuthenticationResponse = mockRevokeAuthenticationResponse;
exports.mockSearchProfilesResponse = mockSearchProfilesResponse;
exports.mockSearchPublicationsResponse = mockSearchPublicationsResponse;
exports.mockSetFollowModuleResponse = mockSetFollowModuleResponse;
exports.mockSimpleCollectOpenActionSettingsFragment = mockSimpleCollectOpenActionSettingsFragment;
exports.mockTransactionState = mockTransactionState;
exports.mockUnblockProfilesResponse = mockUnblockProfilesResponse;
exports.mockUnblockProfilesTypedDataData = mockUnblockProfilesTypedDataData;
exports.mockUnblockProfilesTypedDataResponse = mockUnblockProfilesTypedDataResponse;
exports.mockUndoPublicationNotInterestedResponse = mockUndoPublicationNotInterestedResponse;
exports.mockUnfollowResponse = mockUnfollowResponse;
exports.mockUnknownOpenActionModuleSettingsFragment = mockUnknownOpenActionModuleSettingsFragment;
exports.mockUnknownReferenceModuleSettings = mockUnknownReferenceModuleSettings;
exports.mockUnlinkHandleFromProfileResponse = mockUnlinkHandleFromProfileResponse;
exports.mockValidationErrorResponse = mockValidationErrorResponse;
exports.mockWhoActedOnPublicationResponse = mockWhoActedOnPublicationResponse;
exports.mockWhoReactedToPublicationResponse = mockWhoReactedToPublicationResponse;
