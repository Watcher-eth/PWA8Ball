import type { PromiseResult } from '@lens-protocol/shared-kernel';
import type { Authentication } from "../../authentication/index.js";
import { LensContext } from "../../context.js";
import type { CredentialsExpiredError, NotAuthenticatedError } from "../../errors.js";
import type { NftGalleriesRequest, NftGalleryCreateRequest, NftGalleryDeleteRequest, NftGalleryUpdateInfoRequest, NftGalleryUpdateItemOrderRequest, NftGalleryUpdateItemsRequest, NftOwnershipChallengeRequest, NftsRequest } from "../../graphql/types.generated.js";
import { PaginatedResult } from "../../helpers/index.js";
import { NftFragment, NftOwnershipChallengeResultFragment, NftGalleryFragment } from "./graphql/nfts.generated.js";
/**
 * Query owned NFTs. Challenge ownership. Create and manage NFT galleries.
 *
 * @group LensClient Modules
 */
export declare class Nfts {
    private readonly authentication;
    private readonly sdk;
    constructor(context: LensContext, authentication?: Authentication);
    /**
     * Fetch NFTs.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * If you are using `development` enviroment you can only query chainIds 5 and 80001.
     * If you are using `production` enviroment you can only query chainIds 1 and 137.
     *
     * @param request - Request object for the query
     * @returns {@link PromiseResult} with NFTs wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.nfts.fetch();
     * ```
     */
    fetch(request?: NftsRequest): PromiseResult<PaginatedResult<NftFragment>, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Fetch NFT ownership challenge.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * If you are using `development` enviroment you can only query chainIds 5 and 80001.
     * If you are using `production` enviroment you can only query chainIds 1 and 137.
     *
     * @param request - Request object for the query
     * @returns {@link PromiseResult} with {@link NftOwnershipChallengeResultFragment}
     *
     * @example
     * ```ts
     * const result = await client.nfts.ownershipChallenge({
     *   for: '0x1234567890123456789012345678901234567890',
     *   nfts: [
     *     {
     *       contract: {
     *         address: '0x1234123412341234123412341234123412341234', // an NFT that wallet owns
     *         chainId: 5,
     *       },
     *       tokenId: '1',
     *     }
     *   ]
     * });
     * ```
     */
    ownershipChallenge(request: NftOwnershipChallengeRequest): PromiseResult<NftOwnershipChallengeResultFragment, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Fetch NFT galleries of a profile.
     *
     * @param request - Request object for the query
     * @returns Array of NFT galleries wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.nfts.fetchGalleries({
     *   for: '0x01',
     * });
     * ```
     */
    fetchGalleries(request: NftGalleriesRequest): Promise<PaginatedResult<NftGalleryFragment>>;
    /**
     * Create a new NFT gallery.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * If you are using `development` enviroment you can only query chainIds 5 and 80001.
     * If you are using `production` enviroment you can only query chainIds 1 and 137.
     *
     * @param request - Request object for the mutation
     * @returns {@link PromiseResult} with the id of the new gallery
     *
     * @example
     * ```ts
     * const result = await client.nfts.createGallery({
     *   name: 'My favorite NFTs',
     *   items: [
     *     {
     *       contract: {
     *         address: '0x1234123412341234123412341234123412341234', // an NFT that wallet owns
     *         chainId: 5,
     *       },
     *       tokenId: '1',
     *     }
     *   ]
     * });
     * ```
     */
    createGallery(request: NftGalleryCreateRequest): PromiseResult<string, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Update an NFT gallery.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the mutation
     * @returns {@link PromiseResult} with void
     *
     * @example
     * ```ts
     * const result = await client.nfts.updateGalleryInfo({
     *   galleryId: '9aeb66b2-0d8f-4c33-951c-feedbb171148',
     *   name: 'New name',
     * });
     * ```
     */
    updateGalleryInfo(request: NftGalleryUpdateInfoRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Update a NFT gallery items.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * If you are using `development` enviroment you can only query chainIds 5 and 80001.
     * If you are using `production` enviroment you can only query chainIds 1 and 137.
     *
     * @param request - Request object for the mutation
     * @returns {@link PromiseResult} with void
     *
     * @example
     * ```ts
     * const result = await client.nfts.updateGalleryItems({
     *   galleryId: '9aeb66b2-0d8f-4c33-951c-feedbb171148',
     *   toAdd: [
     *     {
     *       contract: {
     *         address: '0x1234123412341234123412341234123412341234', // an NFT that wallet owns
     *         chainId: 5,
     *       },
     *       tokenId: '1',
     *     },
     *   ],
     *   toRemove: [
     *     {
     *       contract: {
     *         address: '0x1234123412341234123412341234123412341234', // an NFT that wallet owns
     *         chainId: 5,
     *       },
     *       tokenId: '2',
     *     },
     *   ],
     * });
     * ```
     */
    updateGalleryItems(request: NftGalleryUpdateItemsRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Update a NFT gallery items order.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * If you are using `development` enviroment you can only query chainIds 5 and 80001.
     * If you are using `production` enviroment you can only query chainIds 1 and 137.
     *
     * @param request - Request object for the mutation
     * @returns {@link PromiseResult} with void
     *
     * @example
     * ```ts
     * const result = await client.nfts.updateGalleryOrder({
     *   galleryId: '9aeb66b2-0d8f-4c33-951c-feedbb171148',
     *   updates: [
     *     {
     *       contract: {
     *         address: '0x1234123412341234123412341234123412341234', // an NFT that wallet owns
     *         chainId: 5,
     *       },
     *       tokenId: '1',
     *       newOrder: 1,
     *     },
     *   ],
     * });
     * ```
     */
    updateGalleryOrder(request: NftGalleryUpdateItemOrderRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Delete a NFT gallery.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the mutation
     * @returns {@link PromiseResult} with void
     *
     * @example
     * ```ts
     * const result = await client.nfts.deleteGallery({
     *   galleryId: '9aeb66b2-0d8f-4c33-951c-feedbb171148'
     * });
     * ```
     */
    deleteGallery(request: NftGalleryDeleteRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
}
