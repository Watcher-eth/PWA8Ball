import { PendingSigningRequestError, UserRejectedError, Wallet, WalletConnectionError } from "../../entities/index.js";
import { PollId, ISignedVote, IUnsignedVote } from "../../entities/polls.js";
import { ActiveWallet } from "../authentication/index.js";
import { IGenericResultPresenter } from "../transactions/index.js";
export type VoteChoice = number | number[];
export type VotePollRequest = {
    pollId: PollId;
    choice: VoteChoice;
};
export type CreateUnsignedVoteRequest = {
    pollId: PollId;
    choice: VoteChoice;
    voter: Wallet;
};
export interface IUnsignedVoteFactory {
    createUnsignedVote(request: CreateUnsignedVoteRequest): Promise<IUnsignedVote>;
}
export interface IPollVoteRelayer {
    relay(signedVote: ISignedVote): Promise<void>;
}
export type IVotePollPresenter = IGenericResultPresenter<void, PendingSigningRequestError | UserRejectedError | WalletConnectionError>;
export declare class VotePoll {
    private readonly factory;
    private readonly activeWallet;
    private readonly presenter;
    private readonly relayer;
    constructor(factory: IUnsignedVoteFactory, activeWallet: ActiveWallet, presenter: IVotePollPresenter, relayer: IPollVoteRelayer);
    execute({ pollId, choice }: VotePollRequest): Promise<void>;
}
