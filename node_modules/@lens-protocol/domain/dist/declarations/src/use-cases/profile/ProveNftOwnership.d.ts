import { EvmAddress } from '@lens-protocol/shared-kernel';
import { NftOwnershipChallenge, Signature, PendingSigningRequestError, UserRejectedError, WalletConnectionError } from "../../entities/index.js";
import { ActiveWallet } from "../authentication/ActiveWallet.js";
import { IGenericResultPresenter } from "../transactions/IGenericResultPresenter.js";
export type ProveNftOwnershipRequest = {
    chainId: number;
    contractAddress: EvmAddress;
    ownerAddress: EvmAddress;
    tokenId: string;
};
export interface INftOwnershipChallengeGateway {
    createOwnershipChallenge(request: ProveNftOwnershipRequest): Promise<NftOwnershipChallenge>;
}
/**
 * @alpha
 */
export type NftOwnershipSignature = {
    id: string;
    signature: Signature;
};
export type IProveNftOwnershipPresenter = IGenericResultPresenter<NftOwnershipSignature, PendingSigningRequestError | UserRejectedError | WalletConnectionError>;
export declare class ProveNftOwnership {
    private readonly activeWallet;
    private readonly gateway;
    private readonly presenter;
    constructor(activeWallet: ActiveWallet, gateway: INftOwnershipChallengeGateway, presenter: IProveNftOwnershipPresenter);
    proveOwnership(request: ProveNftOwnershipRequest): Promise<void>;
}
