import { PromiseResult, Url } from '@lens-protocol/shared-kernel';
import { NativeTransaction, TransactionKind, AnyTransactionRequestModel } from "../../entities/index.js";
import { BroadcastingError } from "../transactions/BroadcastingError.js";
import { ITransactionResultPresenter } from "../transactions/ITransactionResultPresenter.js";
import { TransactionQueue } from "../transactions/TransactionQueue.js";
import { FollowPolicyConfig } from "./FollowPolicy.js";
export type CreateProfileRequest = {
    handle: string;
    kind: TransactionKind.CREATE_PROFILE;
    followPolicy?: FollowPolicyConfig;
    profileImage?: Url;
};
export declare class DuplicatedHandleError extends Error {
    name: "DuplicatedHandleError";
    constructor(handle: string);
}
export interface IProfileTransactionGateway {
    createProfileTransaction<T extends CreateProfileRequest>(request: T): PromiseResult<NativeTransaction<T>, BroadcastingError | DuplicatedHandleError>;
}
export type ICreateProfilePresenter = ITransactionResultPresenter<CreateProfileRequest, BroadcastingError | DuplicatedHandleError>;
export declare class CreateProfile {
    private readonly transactionFactory;
    private readonly transactionQueue;
    private readonly presenter;
    constructor(transactionFactory: IProfileTransactionGateway, transactionQueue: TransactionQueue<AnyTransactionRequestModel>, presenter: ICreateProfilePresenter);
    execute(request: CreateProfileRequest): Promise<void>;
}
