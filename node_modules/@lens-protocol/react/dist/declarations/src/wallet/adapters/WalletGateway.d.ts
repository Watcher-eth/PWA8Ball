import { IReadableWalletGateway, IWritableWalletGateway, IResettableWalletGateway } from '@lens-protocol/domain/use-cases/authentication';
import { EvmAddress } from '@lens-protocol/shared-kernel';
import { IStorage } from '@lens-protocol/storage';
import { z } from 'zod';
import { ConcreteWallet, WalletDataSchema } from "./ConcreteWallet.js";
export interface IWalletUnmarshaller {
    rehydrate(data: WalletDataSchema): ConcreteWallet;
}
export declare const WalletStorageSchema: z.ZodArray<z.ZodObject<{
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>, "many">;
export type WalletStorageSchema = z.infer<typeof WalletStorageSchema>;
export declare class WalletGateway implements IReadableWalletGateway, IResettableWalletGateway, IWritableWalletGateway {
    private readonly storage;
    private readonly factory;
    private inMemoryCache;
    constructor(storage: IStorage<WalletStorageSchema>, factory: IWalletUnmarshaller);
    getByAddress(address: EvmAddress): Promise<ConcreteWallet | null>;
    reset(): Promise<void>;
    save(wallet: ConcreteWallet): Promise<void>;
    private getAll;
}
