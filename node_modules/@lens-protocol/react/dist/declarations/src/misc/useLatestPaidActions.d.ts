import { AnyPaidAction, LatestPaidActionsFilter, LatestPaidActionsWhere } from '@lens-protocol/api-bindings';
import { PaginatedArgs, PaginatedReadResult } from "../helpers/reads.js";
export type { OpenActionPaidAction, FollowPaidAction, LatestActed, } from '@lens-protocol/api-bindings';
export type LatestPaidActionRequest = {
    filter?: LatestPaidActionsFilter;
    where?: LatestPaidActionsWhere;
};
export type { AnyPaidAction };
/**
 * {@link useLatestPaidActions} hook arguments
 */
export type UseLatestPaidActionsArgs = PaginatedArgs<LatestPaidActionRequest>;
/**
 * Fetch a paginated result of paid actions (e.g. follows and collects with fee) for the authenticated profile.
 *
 * The results are sorted by the latest action first.
 *
 * @example
 * ```tsx
 * const { data, loading, error } = useLatestPaidActions();
 * ```
 * @category Discovery
 * @group Hooks
 * @param args - {@link UseLatestPaidActionsArgs}
 */
export declare function useLatestPaidActions({ filter, where, }?: UseLatestPaidActionsArgs): PaginatedReadResult<AnyPaidAction[]>;
