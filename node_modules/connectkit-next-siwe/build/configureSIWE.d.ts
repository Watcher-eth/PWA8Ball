/// <reference types="node" />
import { FunctionComponent, ComponentProps } from 'react';
import { SIWEProvider } from 'connectkit';
import type { IncomingMessage, ServerResponse } from 'http';
import { IronSession, IronSessionOptions } from 'iron-session';
import { NextApiHandler, NextApiRequest, NextApiResponse } from 'next';
type RouteHandlerOptions = {
    afterNonce?: (req: NextApiRequest, res: NextApiResponse, session: NextSIWESession<{}>) => Promise<void>;
    afterVerify?: (req: NextApiRequest, res: NextApiResponse, session: NextSIWESession<{}>) => Promise<void>;
    afterSession?: (req: NextApiRequest, res: NextApiResponse, session: NextSIWESession<{}>) => Promise<void>;
    afterLogout?: (req: NextApiRequest, res: NextApiResponse) => Promise<void>;
};
type NextServerSIWEConfig = {
    session?: Partial<IronSessionOptions>;
    options?: RouteHandlerOptions;
};
type NextClientSIWEConfig = {
    apiRoutePrefix: string;
    statement?: string;
};
type NextSIWESession<TSessionData extends Object = {}> = IronSession & TSessionData & {
    nonce?: string;
    address?: string;
    chainId?: number;
};
type NextSIWEProviderProps = Omit<ComponentProps<typeof SIWEProvider>, 'getNonce' | 'createMessage' | 'verifyMessage' | 'getSession' | 'signOut' | 'data' | 'signIn' | 'status' | 'resetStatus'>;
type ConfigureServerSIWEResult<TSessionData extends Object = {}> = {
    apiRouteHandler: NextApiHandler;
    getSession: (req: IncomingMessage, res: ServerResponse) => Promise<NextSIWESession<TSessionData>>;
};
type ConfigureClientSIWEResult<TSessionData extends Object = {}> = {
    Provider: FunctionComponent<NextSIWEProviderProps>;
};
export declare const configureServerSideSIWE: <TSessionData extends Object = {}>({ session: { cookieName, password, cookieOptions, ...otherSessionOptions }, options: { afterNonce, afterVerify, afterSession, afterLogout }, }: NextServerSIWEConfig) => ConfigureServerSIWEResult<TSessionData>;
export declare const configureClientSIWE: <TSessionData extends Object = {}>({ apiRoutePrefix, statement, }: NextClientSIWEConfig) => ConfigureClientSIWEResult<TSessionData>;
export {};
