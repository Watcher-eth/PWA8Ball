import { jsx } from 'react/jsx-runtime';
import { SIWEProvider } from 'connectkit';
import { getIronSession } from 'iron-session';
import { SiweMessage, generateNonce, SiweErrorType } from 'siwe';

const getSession = async (req, res, // ServerResponse<IncomingMessage>,
sessionConfig) => {
    const session = (await getIronSession(req, res, sessionConfig));
    return session;
};
const logoutRoute = async (req, res, sessionConfig, afterCallback) => {
    switch (req.method) {
        case 'GET':
            const session = await getSession(req, res, sessionConfig);
            session.destroy();
            if (afterCallback) {
                await afterCallback(req, res);
            }
            res.status(200).end();
            break;
        default:
            res.setHeader('Allow', ['GET']);
            res.status(405).end(`Method ${req.method} Not Allowed`);
    }
};
const nonceRoute = async (req, res, sessionConfig, afterCallback) => {
    switch (req.method) {
        case 'GET':
            const session = await getSession(req, res, sessionConfig);
            if (!session.nonce) {
                session.nonce = generateNonce();
                await session.save();
            }
            if (afterCallback) {
                await afterCallback(req, res, session);
            }
            res.send(session.nonce);
            break;
        default:
            res.setHeader('Allow', ['GET']);
            res.status(405).end(`Method ${req.method} Not Allowed`);
    }
};
const sessionRoute = async (req, res, sessionConfig, afterCallback) => {
    switch (req.method) {
        case 'GET':
            const session = await getSession(req, res, sessionConfig);
            if (afterCallback) {
                await afterCallback(req, res, session);
            }
            const { address, chainId } = session;
            res.send({ address, chainId });
            break;
        default:
            res.setHeader('Allow', ['GET']);
            res.status(405).end(`Method ${req.method} Not Allowed`);
    }
};
const verifyRoute = async (req, res, sessionConfig, afterCallback) => {
    switch (req.method) {
        case 'POST':
            try {
                const session = await getSession(req, res, sessionConfig);
                const { message, signature } = req.body;
                const siweMessage = new SiweMessage(message);
                const { data: fields } = await siweMessage.verify({ signature, nonce: session.nonce });
                if (fields.nonce !== session.nonce) {
                    return res.status(422).end('Invalid nonce.');
                }
                session.address = fields.address;
                session.chainId = fields.chainId;
                await session.save();
                if (afterCallback) {
                    await afterCallback(req, res, session);
                }
                res.status(200).end();
            }
            catch (error) {
                switch (error) {
                    case SiweErrorType.INVALID_NONCE:
                    case SiweErrorType.INVALID_SIGNATURE: {
                        res.status(422).end(String(error));
                        break;
                    }
                    default: {
                        res.status(400).end(String(error));
                        break;
                    }
                }
            }
            break;
        default:
            res.setHeader('Allow', ['POST']);
            res.status(405).end(`Method ${req.method} Not Allowed`);
    }
};
const envVar = (name) => {
    const value = process.env[name];
    if (!value) {
        throw new Error(`Missing environment variable: ${name}`);
    }
    return value;
};
const configureServerSideSIWE = ({ session: { cookieName, password, cookieOptions, ...otherSessionOptions } = {}, options: { afterNonce, afterVerify, afterSession, afterLogout } = {}, }) => {
    const sessionConfig = {
        cookieName: cookieName !== null && cookieName !== void 0 ? cookieName : 'connectkit-next-siwe',
        password: password !== null && password !== void 0 ? password : envVar('SESSION_SECRET'),
        cookieOptions: {
            secure: process.env.NODE_ENV === 'production',
            ...(cookieOptions !== null && cookieOptions !== void 0 ? cookieOptions : {}),
        },
        ...otherSessionOptions,
    };
    const apiRouteHandler = async (req, res) => {
        if (!(req.query.route instanceof Array)) {
            throw new Error('Catch-all query param `route` not found. SIWE API page should be named `[...route].ts` and within your `pages/api` directory.');
        }
        const route = req.query.route.join('/');
        switch (route) {
            case 'nonce':
                return await nonceRoute(req, res, sessionConfig, afterNonce);
            case 'verify':
                return await verifyRoute(req, res, sessionConfig, afterVerify);
            case 'session':
                return await sessionRoute(req, res, sessionConfig, afterSession);
            case 'logout':
                return await logoutRoute(req, res, sessionConfig, afterLogout);
            default:
                return res.status(404).end();
        }
    };
    return {
        apiRouteHandler,
        getSession: async (req, res) => await getSession(req, res, sessionConfig),
    };
};
const configureClientSIWE = ({ apiRoutePrefix, statement = 'Sign In With Ethereum.', }) => {
    const NextSIWEProvider = (props) => {
        return (jsx(SIWEProvider, { getNonce: async () => {
                const res = await fetch(`${apiRoutePrefix}/nonce`);
                if (!res.ok) {
                    throw new Error('Failed to fetch SIWE nonce');
                }
                const nonce = await res.text();
                return nonce;
            }, createMessage: ({ nonce, address, chainId }) => new SiweMessage({
                version: '1',
                domain: window.location.host,
                uri: window.location.origin,
                address,
                chainId,
                nonce,
                statement,
            }).prepareMessage(), verifyMessage: ({ message, signature }) => fetch(`${apiRoutePrefix}/verify`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message, signature }),
            }).then((res) => res.ok), getSession: async () => {
                const res = await fetch(`${apiRoutePrefix}/session`);
                if (!res.ok) {
                    throw new Error('Failed to fetch SIWE session');
                }
                const { address, chainId } = await res.json();
                return address && chainId ? { address, chainId } : null;
            }, signOut: () => fetch(`${apiRoutePrefix}/logout`).then((res) => res.ok), ...props }));
    };
    return {
        Provider: NextSIWEProvider,
    };
};

export { configureClientSIWE, configureServerSideSIWE };
//# sourceMappingURL=index.es.js.map
