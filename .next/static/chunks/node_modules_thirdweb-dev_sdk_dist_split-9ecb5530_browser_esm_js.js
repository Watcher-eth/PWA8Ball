"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_sdk_dist_split-9ecb5530_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/split-9ecb5530.browser.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/split-9ecb5530.browser.esm.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Split: function() { return /* binding */ Split; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var _fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fetchCurrencyValue-36d56838.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-36d56838.browser.esm.js\");\n/* harmony import */ var _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-2ccb97b5.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-2ccb97b5.browser.esm.js\");\n/* harmony import */ var _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transactions-403814af.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-403814af.browser.esm.js\");\n/* harmony import */ var _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./contract-appuri-a994d460.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-a994d460.browser.esm.js\");\n/* harmony import */ var _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./contract-interceptor-d7b164a7.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js\");\n/* harmony import */ var _contract_roles_277398d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./contract-roles-277398d4.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-roles-277398d4.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/@thirdweb-dev/sdk/node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Split {\n  static contractRoles = _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.dM;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.cs(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.bj.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.C(this.contractWrapper, _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.c7, this.storage);\n    this.app = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.b(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_roles_277398d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.C(this.contractWrapper, Split.contractRoles);\n    this.encoder = new _fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.C(this.contractWrapper);\n    this.estimator = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.G(this.contractWrapper);\n    this.events = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.a(this.contractWrapper);\n    this.interceptor = new _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.C(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([(0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([(0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([(0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(tokenAddress), (0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(walletAddress)]);\n    const ERC20Abi = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\", 19))).default;\n    const erc20 = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await (0,_fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a)(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([(0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.f)(async walletAddress => {\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await (0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.f)(async (walletAddress, tokenAddress) => {\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([(0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(tokenAddress), (0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.f)(async () => {\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.f)(async tokenAddress => {\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await (0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([(0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aL)(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC9zcGxpdC05ZWNiNTUzMC5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkM7QUFDZ0U7QUFDZ0Q7QUFDcEQ7QUFDMEM7QUFDekQ7QUFDWjtBQUNqRTtBQUNpQjtBQUNBO0FBQ047QUFDVDtBQUNEO0FBQ29EO0FBQ1Q7QUFDUTtBQUNHO0FBQ0c7QUFDYjtBQUNNO0FBQ0U7QUFDSjtBQUNTO0FBQ0w7QUFDQztBQUNDO0FBQ0Y7QUFDQTtBQUNQO0FBQ1U7QUFDVztBQUNmO0FBQ0o7QUFDTTtBQUNLO0FBQ0c7QUFDSjtBQUNMO0FBQ0U7QUFDSjtBQUNBO0FBQ0c7QUFDQztBQUNDO0FBQ1I7QUFDTTtBQUNLO0FBQ0c7QUFDZjtBQUNRO0FBQ0Y7QUFDSTtBQUNGO0FBQ0s7QUFDTjtBQUNSO0FBQ1U7QUFDRjtBQUNDO0FBQ1Q7QUFDTztBQUNGO0FBQ1U7QUFDVjtBQUNBO0FBQ0o7QUFDRDtBQUNNO0FBQ0M7QUFDQztBQUNJO0FBQ0E7QUFDRztBQUNkO0FBQ2xDO0FBQ0g7QUFDUTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0Esa0NBQWtDLFdBQVc7QUFDN0MsNkNBQTZDLGtCQUFrQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsOERBQVU7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRyw4REFBZTtBQUNqSDtBQUNBLGVBQWUsOERBQVM7QUFDeEI7QUFDQTtBQUNBLHdCQUF3Qix1RUFBZ0IsdUJBQXVCLDhEQUFvQjtBQUNuRixtQkFBbUIsdUVBQWM7QUFDakMscUJBQXFCLHNFQUFhO0FBQ2xDLHVCQUF1QiwwRUFBZTtBQUN0Qyx5QkFBeUIsdUVBQWdCO0FBQ3pDLHNCQUFzQix1RUFBYztBQUNwQywyQkFBMkIsNEVBQW1CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw2Q0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGtFQUFjO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGtFQUFjO0FBQzdGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxrRUFBYyxnQkFBZ0Isa0VBQWM7QUFDM0csNEJBQTRCLHFOQUEwRDtBQUN0RixzQkFBc0IsNkNBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhFQUFrQjtBQUNuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGtFQUFjO0FBQzNGO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyw2Q0FBUztBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixnQkFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5RUFBd0I7QUFDcEQsV0FBVyxxRUFBVztBQUN0QjtBQUNBO0FBQ0EsbUJBQW1CLGtFQUFjO0FBQ2pDLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx5RUFBd0I7QUFDekQsV0FBVyxxRUFBVztBQUN0QjtBQUNBO0FBQ0EsK0JBQStCLGtFQUFjLGdCQUFnQixrRUFBYztBQUMzRSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix5RUFBd0I7QUFDdEQsV0FBVyxxRUFBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHlFQUF3QjtBQUMzRCxXQUFXLHFFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxtQkFBbUIsa0VBQWM7QUFDakMsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQThELGtFQUFjO0FBQzVFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxRUFBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B0aGlyZHdlYi1kZXYvc2RrL2Rpc3Qvc3BsaXQtOWVjYjU1MzAuYnJvd3Nlci5lc20uanM/NDBhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaWdOdW1iZXIsIENvbnRyYWN0IH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IEMgYXMgQ29udHJhY3RFbmNvZGVyLCBhIGFzIGZldGNoQ3VycmVuY3lWYWx1ZSB9IGZyb20gJy4vZmV0Y2hDdXJyZW5jeVZhbHVlLTM2ZDU2ODM4LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGRNIGFzIEFETUlOX1JPTEUsIGNzIGFzIENvbnRyYWN0V3JhcHBlciwgYmogYXMgQWJpU2NoZW1hLCBjNyBhcyBTcGxpdHNDb250cmFjdFNjaGVtYSwgYUwgYXMgcmVzb2x2ZUFkZHJlc3MgfSBmcm9tICcuL2luZGV4LTJjY2I5N2I1LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGYgYXMgYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uLCBUIGFzIFRyYW5zYWN0aW9uIH0gZnJvbSAnLi90cmFuc2FjdGlvbnMtNDAzODE0YWYuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgQyBhcyBDb250cmFjdE1ldGFkYXRhLCBiIGFzIENvbnRyYWN0QXBwVVJJLCBHIGFzIEdhc0Nvc3RFc3RpbWF0b3IsIGEgYXMgQ29udHJhY3RFdmVudHMgfSBmcm9tICcuL2NvbnRyYWN0LWFwcHVyaS1hOTk0ZDQ2MC5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBDIGFzIENvbnRyYWN0SW50ZXJjZXB0b3IgfSBmcm9tICcuL2NvbnRyYWN0LWludGVyY2VwdG9yLWQ3YjE2NGE3LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IEMgYXMgQ29udHJhY3RSb2xlcyB9IGZyb20gJy4vY29udHJhY3Qtcm9sZXMtMjc3Mzk4ZDQuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICd6b2QnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NoYWlucyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY3J5cHRvJztcbmltcG9ydCAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0ICdibi5qcyc7XG5pbXBvcnQgJ2JzNTgnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUJ1cm5hYmxlRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wRVJDMjBfVjIuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZV9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyMFBlcm1pdC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNaW50YWJsZUVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU11bHRpY2FsbC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjBNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lCdXJuYWJsZUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lDbGFpbWFibGVFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRGVsYXllZFJldmVhbC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wRVJDNzIxX1YzLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFFbnVtZXJhYmxlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMUFRdWVyeWFibGVVcGdyYWRlYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFTdXBwbHkuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTGF6eU1pbnQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTWludGFibGVFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDNzIxX1YxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvTGF6eU1pbnRXaXRoVGllcl9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL1NoYXJlZE1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvem9yYV9JRVJDNzIxRHJvcC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lMb3lhbHR5Q2FyZC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lORlRNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lCdXJuYWJsZUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQ2xhaW1hYmxlRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wRVJDMTE1NV9WMi5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2UxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZTExNTVfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxMTU1TWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NVN1cHBseS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxMTU1RW51bWVyYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNaW50YWJsZUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjc3MUNvbnRleHQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQXBwVVJJLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUNvbnRyYWN0TWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRGlyZWN0TGlzdGluZ3MuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRW5nbGlzaEF1Y3Rpb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU9mZmVycy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQYWNrVlJGRGlyZWN0Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zRW51bWVyYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQbGF0Zm9ybUZlZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQcmltYXJ5U2FsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lSb3lhbHR5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvT3duYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBaXJkcm9wRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWlyZHJvcEVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBaXJkcm9wRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50RmFjdG9yeUNvcmUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWNjb3VudFBlcm1pc3Npb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUFjY291bnRQZXJtaXNzaW9uc19WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50Lmpzb24nO1xuaW1wb3J0ICdldGhlcnMvbGliL3V0aWxzJztcbmltcG9ydCAnZXZlbnRlbWl0dGVyMyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvc3RvcmFnZSc7XG5cbi8qKlxuICogQ3JlYXRlIGN1c3RvbSByb3lhbHR5IHNwbGl0cyB0byBkaXN0cmlidXRlIGZ1bmRzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgVGhpcmR3ZWJTREsgfSBmcm9tIFwiQHRoaXJkd2ViLWRldi9zZGtcIjtcbiAqXG4gKiBjb25zdCBzZGsgPSBuZXcgVGhpcmR3ZWJTREsoXCJ7e2NoYWluTmFtZX19XCIpO1xuICogY29uc3QgY29udHJhY3QgPSBhd2FpdCBzZGsuZ2V0Q29udHJhY3QoXCJ7e2NvbnRyYWN0X2FkZHJlc3N9fVwiLCBcInNwbGl0XCIpO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyBUT0RPIGNyZWF0ZSBleHRlbnNpb24gd3JhcHBlcnMgZm9yIHRoaXNcbmNsYXNzIFNwbGl0IHtcbiAgc3RhdGljIGNvbnRyYWN0Um9sZXMgPSBBRE1JTl9ST0xFO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgZ2V0IGNoYWluSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYWluSWQ7XG4gIH1cbiAgY29uc3RydWN0b3IobmV0d29yaywgYWRkcmVzcywgc3RvcmFnZSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICBsZXQgYWJpID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XG4gICAgbGV0IGNoYWluSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgY29udHJhY3RXcmFwcGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiBuZXcgQ29udHJhY3RXcmFwcGVyKG5ldHdvcmssIGFkZHJlc3MsIGFiaSwgb3B0aW9ucywgc3RvcmFnZSk7XG4gICAgdGhpcy5fY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgdGhpcy5hYmkgPSBBYmlTY2hlbWEucGFyc2UoYWJpIHx8IFtdKTtcbiAgICB0aGlzLmNvbnRyYWN0V3JhcHBlciA9IGNvbnRyYWN0V3JhcHBlcjtcbiAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgQ29udHJhY3RNZXRhZGF0YSh0aGlzLmNvbnRyYWN0V3JhcHBlciwgU3BsaXRzQ29udHJhY3RTY2hlbWEsIHRoaXMuc3RvcmFnZSk7XG4gICAgdGhpcy5hcHAgPSBuZXcgQ29udHJhY3RBcHBVUkkodGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMubWV0YWRhdGEsIHRoaXMuc3RvcmFnZSk7XG4gICAgdGhpcy5yb2xlcyA9IG5ldyBDb250cmFjdFJvbGVzKHRoaXMuY29udHJhY3RXcmFwcGVyLCBTcGxpdC5jb250cmFjdFJvbGVzKTtcbiAgICB0aGlzLmVuY29kZXIgPSBuZXcgQ29udHJhY3RFbmNvZGVyKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLmVzdGltYXRvciA9IG5ldyBHYXNDb3N0RXN0aW1hdG9yKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBDb250cmFjdEV2ZW50cyh0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gICAgdGhpcy5pbnRlcmNlcHRvciA9IG5ldyBDb250cmFjdEludGVyY2VwdG9yKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgfVxuICBvbk5ldHdvcmtVcGRhdGVkKG5ldHdvcmspIHtcbiAgICB0aGlzLmNvbnRyYWN0V3JhcHBlci51cGRhdGVTaWduZXJPclByb3ZpZGVyKG5ldHdvcmspO1xuICB9XG4gIGdldEFkZHJlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3RXcmFwcGVyLmFkZHJlc3M7XG4gIH1cblxuICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFJFQUQgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBHZXQgUmVjaXBpZW50cyBvZiB0aGlzIHNwbGl0cyBjb250cmFjdFxuICAgKlxuICAgKiBAcmVtYXJrcyBHZXQgdGhlIGRhdGEgYWJvdXQgdGhlIHNoYXJlcyBvZiBldmVyeSBzcGxpdCByZWNpcGllbnQgb24gdGhlIGNvbnRyYWN0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcmVjaXBpZW50cyA9IGF3YWl0IGNvbnRyYWN0LmdldEFsbFJlY2lwaWVudHMoKTtcbiAgICogY29uc29sZS5sb2cocmVjaXBpZW50cyk7XG4gICAqIGBgYFxuICAgKi9cbiAgYXN5bmMgZ2V0QWxsUmVjaXBpZW50cygpIHtcbiAgICBjb25zdCByZWNpcGllbnRzID0gW107XG4gICAgbGV0IGluZGV4ID0gQmlnTnVtYmVyLmZyb20oMCk7XG4gICAgY29uc3QgdG90YWxSZWNpcGllbnRzID0gYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZChcInBheWVlQ291bnRcIiwgW10pO1xuICAgIHdoaWxlIChpbmRleC5sdCh0b3RhbFJlY2lwaWVudHMpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZWNpcGllbnRBZGRyZXNzID0gYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZChcInBheWVlXCIsIFtpbmRleF0pO1xuICAgICAgICByZWNpcGllbnRzLnB1c2goYXdhaXQgdGhpcy5nZXRSZWNpcGllbnRTcGxpdFBlcmNlbnRhZ2UocmVjaXBpZW50QWRkcmVzcykpO1xuICAgICAgICBpbmRleCA9IGluZGV4LmFkZCgxKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBUaGUgb25seSB3YXkgd2Uga25vdyBob3cgdG8gZGV0ZWN0IHRoYXQgd2UndmUgZm91bmQgYWxsIHJlY2lwaWVudHNcbiAgICAgICAgLy8gaXMgaWYgd2UgZ2V0IGFuIGVycm9yIHdoZW4gdHJ5aW5nIHRvIGdldCB0aGUgbmV4dCByZWNpcGllbnQuXG4gICAgICAgIGlmIChcIm1ldGhvZFwiIGluIGVyciAmJiBlcnJbXCJtZXRob2RcIl0udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInBheWVlKHVpbnQyNTYpXCIpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWNpcGllbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRoZSByZWNpcGllbnRzIGFuZCB0aGVpciBiYWxhbmNlcyBpbiB0aGUgbmF0aXZlIGN1cnJlbmN5LlxuICAgKlxuICAgKiBAcmV0dXJucyBBIG1hcCBvZiByZWNpcGllbnQgYWRkcmVzc2VzIHRvIHRoZWlyIGJhbGFuY2VzIGluIHRoZSBuYXRpdmUgY3VycmVuY3kuXG4gICAqL1xuICBhc3luYyBiYWxhbmNlT2ZBbGxSZWNpcGllbnRzKCkge1xuICAgIGNvbnN0IHJlY2lwaWVudHMgPSBhd2FpdCB0aGlzLmdldEFsbFJlY2lwaWVudHMoKTtcbiAgICBjb25zdCBiYWxhbmNlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgcmVjaXBpZW50IG9mIHJlY2lwaWVudHMpIHtcbiAgICAgIGJhbGFuY2VzW3JlY2lwaWVudC5hZGRyZXNzXSA9IGF3YWl0IHRoaXMuYmFsYW5jZU9mKHJlY2lwaWVudC5hZGRyZXNzKTtcbiAgICB9XG4gICAgcmV0dXJuIGJhbGFuY2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRoZSByZWNpcGllbnRzIGFuZCB0aGVpciBiYWxhbmNlcyBpbiBhIG5vbi1uYXRpdmUgY3VycmVuY3kuXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbkFkZHJlc3MgLSBUaGUgYWRkcmVzcyBvZiB0aGUgY3VycmVuY3kgdG8gY2hlY2sgdGhlIGJhbGFuY2VzIGluLlxuICAgKiBAcmV0dXJucyBBIG1hcCBvZiByZWNpcGllbnQgYWRkcmVzc2VzIHRvIHRoZWlyIGJhbGFuY2VzIGluIHRoZSBzcGVjaWZpZWQgY3VycmVuY3kuXG4gICAqL1xuICBhc3luYyBiYWxhbmNlT2ZUb2tlbkFsbFJlY2lwaWVudHModG9rZW5BZGRyZXNzKSB7XG4gICAgY29uc3QgW3Jlc29sdmVkVG9rZW4sIHJlY2lwaWVudHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3Jlc29sdmVBZGRyZXNzKHRva2VuQWRkcmVzcyksIHRoaXMuZ2V0QWxsUmVjaXBpZW50cygpXSk7XG4gICAgY29uc3QgYmFsYW5jZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHJlY2lwaWVudCBvZiByZWNpcGllbnRzKSB7XG4gICAgICBiYWxhbmNlc1tyZWNpcGllbnQuYWRkcmVzc10gPSBhd2FpdCB0aGlzLmJhbGFuY2VPZlRva2VuKHJlY2lwaWVudC5hZGRyZXNzLCByZXNvbHZlZFRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIGJhbGFuY2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBGdW5kcyBvd2VkIHRvIGEgcGFydGljdWxhciB3YWxsZXRcbiAgICpcbiAgICogQHJlbWFya3MgR2V0IHRoZSBhbW91bnQgb2YgZnVuZHMgaW4gdGhlIG5hdGl2ZSBjdXJyZW5jeSBoZWxkIGJ5IHRoZSBjb250cmFjdCB0aGF0IGlzIG93ZWQgdG8gYSBzcGVjaWZpYyByZWNpcGllbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gVGhlIGFkZHJlc3MgdG8gY2hlY2sgdGhlIGZ1bmRzIG9mXG4gICAqIGNvbnN0IGFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiO1xuICAgKiBjb25zdCBmdW5kcyA9IGF3YWl0IGNvbnRyYWN0LmJhbGFuY2VPZihhZGRyZXNzKTtcbiAgICogY29uc29sZS5sb2coZnVuZHMpO1xuICAgKiBgYGBcbiAgICovXG4gIGFzeW5jIGJhbGFuY2VPZihhZGRyZXNzKSB7XG4gICAgY29uc3QgW3Jlc29sdmVkQWRkcmVzcywgd2FsbGV0QmFsYW5jZSwgdG90YWxSZWxlYXNlZF0gPSBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZUFkZHJlc3MoYWRkcmVzcyksIHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFByb3ZpZGVyKCkuZ2V0QmFsYW5jZSh0aGlzLmdldEFkZHJlc3MoKSksIHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJ0b3RhbFJlbGVhc2VkXCIsIFtdKV0pO1xuICAgIGNvbnN0IHRvdGFsUmVjZWl2ZWQgPSB3YWxsZXRCYWxhbmNlLmFkZCh0b3RhbFJlbGVhc2VkKTtcbiAgICByZXR1cm4gdGhpcy5fcGVuZGluZ1BheW1lbnQocmVzb2x2ZWRBZGRyZXNzLCB0b3RhbFJlY2VpdmVkLCBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkKFwicmVsZWFzZWRcIiwgW3Jlc29sdmVkQWRkcmVzc10pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm9uLW5hdGl2ZSBUb2tlbiBGdW5kcyBvd2VkIHRvIGEgcGFydGljdWxhciB3YWxsZXRcbiAgICpcbiAgICogQHJlbWFya3MgR2V0IHRoZSBhbW91bnQgb2YgZnVuZHMgaW4gdGhlIG5vbi1uYXRpdmUgdG9rZW5zIGhlbGQgYnkgdGhlIGNvbnRyYWN0IHRoYXQgaXMgb3dlZCB0byBhIHNwZWNpZmljIHJlY2lwaWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyBUaGUgYWRkcmVzcyB0byBjaGVjayB0aGUgZnVuZHMgb2ZcbiAgICogY29uc3QgYWRkcmVzcyA9IFwie3t3YWxsZXRfYWRkcmVzc319XCI7XG4gICAqIC8vIFRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW5jeSB0byBjaGVjayB0aGUgY29udHJhY3RzIGZ1bmRzIG9mXG4gICAqIGNvbnN0IHRva2VuQWRkcmVzcyA9IFwiMHguLi5cIlxuICAgKiBjb25zdCBmdW5kcyA9IGF3YWl0IGNvbnRyYWN0LmJhbGFuY2VPZlRva2VuKGFkZHJlc3MsIHRva2VuQWRkcmVzcyk7XG4gICAqIGNvbnNvbGUubG9nKGZ1bmRzKTtcbiAgICogYGBgXG4gICAqL1xuICBhc3luYyBiYWxhbmNlT2ZUb2tlbih3YWxsZXRBZGRyZXNzLCB0b2tlbkFkZHJlc3MpIHtcbiAgICBjb25zdCBbcmVzb2x2ZWRUb2tlbiwgcmVzb2x2ZWRXYWxsZXRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3Jlc29sdmVBZGRyZXNzKHRva2VuQWRkcmVzcyksIHJlc29sdmVBZGRyZXNzKHdhbGxldEFkZHJlc3MpXSk7XG4gICAgY29uc3QgRVJDMjBBYmkgPSAoYXdhaXQgaW1wb3J0KCdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzIwLmpzb24nKSkuZGVmYXVsdDtcbiAgICBjb25zdCBlcmMyMCA9IG5ldyBDb250cmFjdChyZXNvbHZlZFRva2VuLCBFUkMyMEFiaSwgdGhpcy5jb250cmFjdFdyYXBwZXIuZ2V0UHJvdmlkZXIoKSk7XG4gICAgY29uc3QgW3dhbGxldEJhbGFuY2UsIHRvdGFsUmVsZWFzZWQsIGFscmVhZHlSZWxlYXNlZF0gPSBhd2FpdCBQcm9taXNlLmFsbChbZXJjMjAuYmFsYW5jZU9mKHRoaXMuZ2V0QWRkcmVzcygpKSwgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZChcInRvdGFsUmVsZWFzZWRcIiwgW3Jlc29sdmVkVG9rZW5dKSwgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZChcInJlbGVhc2VkXCIsIFtyZXNvbHZlZFRva2VuLCByZXNvbHZlZFdhbGxldF0pXSk7XG4gICAgY29uc3QgdG90YWxSZWNlaXZlZCA9IHdhbGxldEJhbGFuY2UuYWRkKHRvdGFsUmVsZWFzZWQpO1xuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy5fcGVuZGluZ1BheW1lbnQocmVzb2x2ZWRXYWxsZXQsIHRvdGFsUmVjZWl2ZWQsIGFscmVhZHlSZWxlYXNlZCk7XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoQ3VycmVuY3lWYWx1ZSh0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRQcm92aWRlcigpLCByZXNvbHZlZFRva2VuLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSAlIG9mIGZ1bmRzIG93ZWQgdG8gYSBnaXZlbiBhZGRyZXNzXG4gICAqIEBwYXJhbSBhZGRyZXNzIC0gdGhlIGFkZHJlc3MgdG8gY2hlY2sgcGVyY2VudGFnZSBvZlxuICAgKi9cbiAgYXN5bmMgZ2V0UmVjaXBpZW50U3BsaXRQZXJjZW50YWdlKGFkZHJlc3MpIHtcbiAgICBjb25zdCBbcmVzb2x2ZWRBZGRyZXNzLCB0b3RhbFNoYXJlcywgd2FsbGV0c1NoYXJlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZUFkZHJlc3MoYWRkcmVzcyksIHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJ0b3RhbFNoYXJlc1wiLCBbXSksIHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJzaGFyZXNcIiwgW2FkZHJlc3NdKV0pO1xuICAgIC8vIFdlIGNvbnZlcnQgdG8gYmFzaXMgcG9pbnRzIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGxvc3Mgb2YgcHJlY2lzaW9uXG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZHJlc3M6IHJlc29sdmVkQWRkcmVzcyxcbiAgICAgIHNwbGl0UGVyY2VudGFnZTogd2FsbGV0c1NoYXJlcy5tdWwoQmlnTnVtYmVyLmZyb20oMWU3KSkuZGl2KHRvdGFsU2hhcmVzKS50b051bWJlcigpIC8gMWU1XG4gICAgfTtcbiAgfVxuXG4gIC8qKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogV1JJVEUgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBXaXRoZHJhdyBGdW5kc1xuICAgKiBAcmVtYXJrcyBUcmlnZ2VycyBhIHRyYW5zZmVyIHRvIGFjY291bnQgb2YgdGhlIGFtb3VudCBvZiBuYXRpdmUgY3VycmVuY3kgdGhleSBhcmUgb3dlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyB0aGUgd2FsbGV0IGFkZHJlc3MgdGhhdCB3YW50cyB0byB3aXRoZHJhdyB0aGVpciBmdW5kc1xuICAgKiBjb25zdCB3YWxsZXRBZGRyZXNzID0gXCJ7e3dhbGxldF9hZGRyZXNzfX1cIlxuICAgKiBhd2FpdCBjb250cmFjdC53aXRoZHJhdyh3YWxsZXRBZGRyZXNzKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB3YWxsZXRBZGRyZXNzIC0gVGhlIGFkZHJlc3MgdG8gZGlzdHJpYnV0ZXMgdGhlIGFtb3VudCB0b1xuICAgKi9cbiAgd2l0aGRyYXcgPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgd2FsbGV0QWRkcmVzcyA9PiB7XG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21Db250cmFjdFdyYXBwZXIoe1xuICAgICAgY29udHJhY3RXcmFwcGVyOiB0aGlzLmNvbnRyYWN0V3JhcHBlcixcbiAgICAgIG1ldGhvZDogXCJyZWxlYXNlKGFkZHJlc3MpXCIsXG4gICAgICBhcmdzOiBbYXdhaXQgcmVzb2x2ZUFkZHJlc3Mod2FsbGV0QWRkcmVzcyldXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBhIHRyYW5zZmVyIHRvIGFjY291bnQgb2YgdGhlIGFtb3VudCBvZiBhIGdpdmVuIGN1cnJlbmN5IHRoZXkgYXJlIG93ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB3YWxsZXRBZGRyZXNzIC0gVGhlIGFkZHJlc3MgdG8gZGlzdHJpYnV0ZXMgdGhlIGFtb3VudCB0b1xuICAgKiBAcGFyYW0gdG9rZW5BZGRyZXNzIC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbmN5IGNvbnRyYWN0IHRvIGRpc3RyaWJ1dGUgZnVuZHNcbiAgICovXG4gIHdpdGhkcmF3VG9rZW4gPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgKHdhbGxldEFkZHJlc3MsIHRva2VuQWRkcmVzcykgPT4ge1xuICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tQ29udHJhY3RXcmFwcGVyKHtcbiAgICAgIGNvbnRyYWN0V3JhcHBlcjogdGhpcy5jb250cmFjdFdyYXBwZXIsXG4gICAgICBtZXRob2Q6IFwicmVsZWFzZShhZGRyZXNzLGFkZHJlc3MpXCIsXG4gICAgICBhcmdzOiBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZUFkZHJlc3ModG9rZW5BZGRyZXNzKSwgcmVzb2x2ZUFkZHJlc3Mod2FsbGV0QWRkcmVzcyldKVxuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogRGlzdHJpYnV0ZSBGdW5kc1xuICAgKlxuICAgKiBAcmVtYXJrcyBEaXN0cmlidXRlIGZ1bmRzIGhlbGQgYnkgdGhlIGNvbnRyYWN0IGluIHRoZSBuYXRpdmUgY3VycmVuY3kgdG8gYWxsIHJlY2lwaWVudHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogYXdhaXQgY29udHJhY3QuZGlzdHJpYnV0ZSgpO1xuICAgKiBgYGBcbiAgICovXG4gIGRpc3RyaWJ1dGUgPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgKCkgPT4ge1xuICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tQ29udHJhY3RXcmFwcGVyKHtcbiAgICAgIGNvbnRyYWN0V3JhcHBlcjogdGhpcy5jb250cmFjdFdyYXBwZXIsXG4gICAgICBtZXRob2Q6IFwiZGlzdHJpYnV0ZSgpXCIsXG4gICAgICBhcmdzOiBbXVxuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogRGlzdHJpYnV0ZSBGdW5kc1xuICAgKlxuICAgKiBAcmVtYXJrcyBEaXN0cmlidXRlIGZ1bmRzIGhlbGQgYnkgdGhlIGNvbnRyYWN0IGluIHRoZSBuYXRpdmUgY3VycmVuY3kgdG8gYWxsIHJlY2lwaWVudHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gVGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbmN5IHRvIGRpc3RyaWJ1dGUgZnVuZHNcbiAgICogY29uc3QgdG9rZW5BZGRyZXNzID0gXCIweC4uLlwiXG4gICAqIGF3YWl0IGNvbnRyYWN0LmRpc3RyaWJ1dGVUb2tlbih0b2tlbkFkZHJlc3MpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHRva2VuQWRkcmVzcyAtIFRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW5jeSBjb250cmFjdCB0byBkaXN0cmlidXRlIGZ1bmRzXG4gICAqL1xuICBkaXN0cmlidXRlVG9rZW4gPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgdG9rZW5BZGRyZXNzID0+IHtcbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUNvbnRyYWN0V3JhcHBlcih7XG4gICAgICBjb250cmFjdFdyYXBwZXI6IHRoaXMuY29udHJhY3RXcmFwcGVyLFxuICAgICAgbWV0aG9kOiBcImRpc3RyaWJ1dGUoYWRkcmVzcylcIixcbiAgICAgIGFyZ3M6IFthd2FpdCByZXNvbHZlQWRkcmVzcyh0b2tlbkFkZHJlc3MpXVxuICAgIH0pO1xuICB9KTtcblxuICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFBSSVZBVEUgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIGFzeW5jIF9wZW5kaW5nUGF5bWVudChhZGRyZXNzLCB0b3RhbFJlY2VpdmVkLCBhbHJlYWR5UmVsZWFzZWQpIHtcbiAgICBjb25zdCBbcmVzb2x2ZWRBZGRyZXNzLCB0b3RhbFNoYXJlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZUFkZHJlc3MoYWRkcmVzcyksIHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJ0b3RhbFNoYXJlc1wiLCBbXSldKTtcbiAgICBjb25zdCBhZGRyZXNzUmVjZWl2ZWQgPSB0b3RhbFJlY2VpdmVkLm11bChhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkKFwic2hhcmVzXCIsIFtyZXNvbHZlZEFkZHJlc3NdKSk7XG4gICAgY29uc3QgdG90YWxSb3lhbHR5QXZhaWxhYmxlID0gYWRkcmVzc1JlY2VpdmVkLmRpdih0b3RhbFNoYXJlcyk7XG4gICAgcmV0dXJuIHRvdGFsUm95YWx0eUF2YWlsYWJsZS5zdWIoYWxyZWFkeVJlbGVhc2VkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIHByZXBhcmUobWV0aG9kLCBhcmdzLCBvdmVycmlkZXMpIHtcbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUNvbnRyYWN0V3JhcHBlcih7XG4gICAgICBjb250cmFjdFdyYXBwZXI6IHRoaXMuY29udHJhY3RXcmFwcGVyLFxuICAgICAgbWV0aG9kLFxuICAgICAgYXJncyxcbiAgICAgIG92ZXJyaWRlc1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgY2FsbChmdW5jdGlvbk5hbWUsIGFyZ3MsIG92ZXJyaWRlcykge1xuICAgIHJldHVybiB0aGlzLmNvbnRyYWN0V3JhcHBlci5jYWxsKGZ1bmN0aW9uTmFtZSwgYXJncywgb3ZlcnJpZGVzKTtcbiAgfVxufVxuXG5leHBvcnQgeyBTcGxpdCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/split-9ecb5530.browser.esm.js\n"));

/***/ })

}]);