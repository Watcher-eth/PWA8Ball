"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_sdk_dist_pack-ee1cac26_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-9be25ae4.browser.esm.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-9be25ae4.browser.esm.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ StandardErc1155; }\n/* harmony export */ });\n/* harmony import */ var _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transactions-403814af.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-403814af.browser.esm.js\");\n/* harmony import */ var _erc_1155_064c2b84_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./erc-1155-064c2b84.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-1155-064c2b84.browser.esm.js\");\n\n\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new _erc_1155_064c2b84_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.E(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns The total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Transfer multiple NFTs\n   * \n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\n   * \n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFTs to\n   * const toAddress = \"{{wallet_address}}\";\n   * // Array of token IDs of the NFTs you want to send\n   * const tokenIds = [\"0\", \"1\", \"2\"];\n   * // Array of amounts of the NFTs you want to send\n   * const amounts = [1, 2, 3];\n   * await contract.transferBatch(toAddress, tokenIds, amounts);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)((() => {\n    var _this2 = this;\n    return async function (to, tokenIds, amounts, fromAddress) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return _this2.erc1155.transferBatch.prepare(to, tokenIds, amounts, fromAddress, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)((() => {\n    var _this3 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this3.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-9be25ae4.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/dist/pack-ee1cac26.browser.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/pack-ee1cac26.browser.esm.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pack: function() { return /* binding */ Pack; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var _fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fetchCurrencyValue-36d56838.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-36d56838.browser.esm.js\");\n/* harmony import */ var _hasERC20Allowance_2e7389c9_browser_esm_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./hasERC20Allowance-2e7389c9.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/hasERC20Allowance-2e7389c9.browser.esm.js\");\n/* harmony import */ var _normalizePriceValue_d418796c_browser_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./normalizePriceValue-d418796c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/normalizePriceValue-d418796c.browser.esm.js\");\n/* harmony import */ var _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-2ccb97b5.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-2ccb97b5.browser.esm.js\");\n/* harmony import */ var _assertEnabled_320ac1c1_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./assertEnabled-320ac1c1.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/assertEnabled-320ac1c1.browser.esm.js\");\n/* harmony import */ var _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./contract-appuri-a994d460.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-a994d460.browser.esm.js\");\n/* harmony import */ var _marketplace_391556f0_browser_esm_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./marketplace-391556f0.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/marketplace-391556f0.browser.esm.js\");\n/* harmony import */ var _QueryParams_6da1e9d6_browser_esm_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./QueryParams-6da1e9d6.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/QueryParams-6da1e9d6.browser.esm.js\");\n/* harmony import */ var _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transactions-403814af.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-403814af.browser.esm.js\");\n/* harmony import */ var _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./contract-interceptor-d7b164a7.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js\");\n/* harmony import */ var _contract_owner_e45fc8f4_browser_esm_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./contract-owner-e45fc8f4.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-owner-e45fc8f4.browser.esm.js\");\n/* harmony import */ var _contract_roles_277398d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./contract-roles-277398d4.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-roles-277398d4.browser.esm.js\");\n/* harmony import */ var _erc_1155_standard_9be25ae4_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./erc-1155-standard-9be25ae4.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-9be25ae4.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPackVRFDirect_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json\");\n/* harmony import */ var _erc_20_254c9bd5_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./erc-20-254c9bd5.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-20-254c9bd5.browser.esm.js\");\n/* harmony import */ var _pack_a5de65c9_browser_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./pack-a5de65c9.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/pack-a5de65c9.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/@thirdweb-dev/sdk/node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass PackVRF {\n  featureName = _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.dK.name;\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.cs(network, address, _thirdweb_dev_contracts_js_dist_abis_IPackVRFDirect_json__WEBPACK_IMPORTED_MODULE_6__, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Open pack\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const amount = 1;\n   * const receipt = await contract.pack.open(tokenId, amount);\n   * ```\n   *\n   * @remarks\n   * Open a pack using Chainlink VRFs random number generation\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   *\n   * @param tokenId - the id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @returns\n   * @twfeature PackVRF\n   */\n  open = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(0);\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n            id = event[0].args.requestId;\n          } catch (e) {}\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    };\n  })());\n\n  /**\n   * Claim the rewards from an opened pack\n   *\n   * @example\n   * ```javascript\n   * const rewards = await contract.pack.claimRewards();\n   * ```\n   *\n   * @remarks This will return the contents of the pack\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns The random rewards from opening a pack\n   * @twfeature PackVRF\n   */\n  claimRewards = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)((() => {\n    var _this2 = this;\n    return async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this2.parseRewards(rewards);\n        }\n      });\n    };\n  })());\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await (0,_fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.f)(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers__WEBPACK_IMPORTED_MODULE_11__.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * ```\n   *\n   * @param callback - the listener to call when a pack is opened\n   * @returns A unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress - Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await (0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId - The id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit - Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(500000)\n    });\n    let id = ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns The balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    const ERC20Abi = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\", 19))).default;\n    return this.getLinkContract(ERC20Abi).balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount - the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    const ERC20Abi = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\", 19))).default;\n    await this.getLinkContract(ERC20Abi).transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract(ERC20Abi) {\n    const linkAddress = _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aY[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.cs(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new _erc_20_254c9bd5_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__.E(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers\nclass Pack extends _erc_1155_standard_9be25ae4_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__.S {\n  static contractRoles = _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.dL;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return (0,_assertEnabled_320ac1c1_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__.a)(this._vrf, _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.dK);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.cs(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.bj.parse(abi || []);\n    this.metadata = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.C(this.contractWrapper, _index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.c3, this.storage);\n    this.app = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.b(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_roles_277398d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.C(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new _contract_owner_e45fc8f4_browser_esm_js__WEBPACK_IMPORTED_MODULE_16__.C(this.contractWrapper, this.metadata);\n    this.encoder = new _fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.C(this.contractWrapper);\n    this.estimator = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.G(this.contractWrapper);\n    this.events = new _contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a(this.contractWrapper);\n    this.interceptor = new _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__.C(this.contractWrapper);\n    this.owner = new _contract_owner_e45fc8f4_browser_esm_js__WEBPACK_IMPORTED_MODULE_16__.a(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns The total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [(0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.H)(\"transfer\"), ethers__WEBPACK_IMPORTED_MODULE_18__.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns  The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await (0,_fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.f)(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = ethers__WEBPACK_IMPORTED_MODULE_11__.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = ethers__WEBPACK_IMPORTED_MODULE_11__.formatUnits(ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet. See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  create = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)(async metadataWithRewards => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\n  });\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack. See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  addPackContents = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)(async (packId, packContents) => {\n    const [signerAddress, parsedContents] = await Promise.all([this.contractWrapper.getSignerAddress(), _pack_a5de65c9_browser_esm_js__WEBPACK_IMPORTED_MODULE_19__.c.parseAsync(packContents)]);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addPackContents\",\n      args: [packId, contents, numOfRewardUnits, signerAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackUpdated event not found\");\n        }\n        const id = event[0].args.packId;\n        return {\n          id: id,\n          receipt,\n          data: () => this.erc1155.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  createTo = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)(async (to, metadataWithRewards) => {\n    const [uri, parsedMetadata, toAddress] = await Promise.all([(0,_QueryParams_6da1e9d6_browser_esm_js__WEBPACK_IMPORTED_MODULE_20__.b)(metadataWithRewards.packMetadata, this.storage), _pack_a5de65c9_browser_esm_js__WEBPACK_IMPORTED_MODULE_19__.d.parseAsync(metadataWithRewards), (0,_index_2ccb97b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(to)]);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createPack\",\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, toAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackCreated event not found\");\n        }\n        const packId = event[0].args.packId;\n        return {\n          id: packId,\n          receipt,\n          data: () => this.erc1155.get(packId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  open = /* @__PURE__ */(0,_transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n      return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await (0,_fetchCurrencyValue_36d56838_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.f)(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: ethers__WEBPACK_IMPORTED_MODULE_11__.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    };\n  })());\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await (0,_normalizePriceValue_d418796c_browser_esm_js__WEBPACK_IMPORTED_MODULE_21__.n)(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await (0,_hasERC20Allowance_2e7389c9_browser_esm_js__WEBPACK_IMPORTED_MODULE_22__.h)(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await (0,_marketplace_391556f0_browser_esm_js__WEBPACK_IMPORTED_MODULE_23__.i)(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await (0,_marketplace_391556f0_browser_esm_js__WEBPACK_IMPORTED_MODULE_23__.i)(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(erc1155.quantityPerReward).mul(ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _transactions_403814af_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if ((0,_contract_appuri_a994d460_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.d)(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/pack-ee1cac26.browser.esm.js\n"));

/***/ })

}]);